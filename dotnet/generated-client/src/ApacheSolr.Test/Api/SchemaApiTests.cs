/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using ApacheSolr.Client;
using ApacheSolr.Api;
// uncomment below to import models
//using ApacheSolr.Model;

namespace ApacheSolr.Test.Api
{
    /// <summary>
    ///  Class for testing SchemaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SchemaApiTests : IDisposable
    {
        private SchemaApi instance;

        public SchemaApiTests()
        {
            instance = new SchemaApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SchemaApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SchemaApi
            //Assert.IsType<SchemaApi>(instance);
        }

        /// <summary>
        /// Test GetDynamicFieldInfo
        /// </summary>
        [Fact]
        public void GetDynamicFieldInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //string fieldName = null;
            //var response = instance.GetDynamicFieldInfo(indexType, indexName, fieldName);
            //Assert.IsType<SchemaGetDynamicFieldInfoResponseModel>(response);
        }

        /// <summary>
        /// Test GetFieldInfo
        /// </summary>
        [Fact]
        public void GetFieldInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //string fieldName = null;
            //var response = instance.GetFieldInfo(indexType, indexName, fieldName);
            //Assert.IsType<SchemaGetFieldInfoResponseModel>(response);
        }

        /// <summary>
        /// Test GetFieldTypeInfo
        /// </summary>
        [Fact]
        public void GetFieldTypeInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //string fieldTypeName = null;
            //var response = instance.GetFieldTypeInfo(indexType, indexName, fieldTypeName);
            //Assert.IsType<SchemaGetFieldTypeInfoResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaInfo
        /// </summary>
        [Fact]
        public void GetSchemaInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.GetSchemaInfo(indexType, indexName);
            //Assert.IsType<SchemaInfoResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaName
        /// </summary>
        [Fact]
        public void GetSchemaNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.GetSchemaName(indexType, indexName);
            //Assert.IsType<SchemaNameResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaSimilarity
        /// </summary>
        [Fact]
        public void GetSchemaSimilarityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.GetSchemaSimilarity(indexType, indexName);
            //Assert.IsType<SchemaSimilarityResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaUniqueKey
        /// </summary>
        [Fact]
        public void GetSchemaUniqueKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.GetSchemaUniqueKey(indexType, indexName);
            //Assert.IsType<SchemaUniqueKeyResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaVersion
        /// </summary>
        [Fact]
        public void GetSchemaVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.GetSchemaVersion(indexType, indexName);
            //Assert.IsType<SchemaVersionResponseModel>(response);
        }

        /// <summary>
        /// Test GetSchemaZkVersion
        /// </summary>
        [Fact]
        public void GetSchemaZkVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //int? refreshIfBelowVersion = null;
            //var response = instance.GetSchemaZkVersion(indexType, indexName, refreshIfBelowVersion);
            //Assert.IsType<SchemaZkVersionResponseModel>(response);
        }

        /// <summary>
        /// Test ListCopyFields
        /// </summary>
        [Fact]
        public void ListCopyFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.ListCopyFields(indexType, indexName);
            //Assert.IsType<SchemaListCopyFieldsResponseModel>(response);
        }

        /// <summary>
        /// Test ListDynamicFields
        /// </summary>
        [Fact]
        public void ListDynamicFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.ListDynamicFields(indexType, indexName);
            //Assert.IsType<SchemaListDynamicFieldsResponseModel>(response);
        }

        /// <summary>
        /// Test ListSchemaFieldTypes
        /// </summary>
        [Fact]
        public void ListSchemaFieldTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.ListSchemaFieldTypes(indexType, indexName);
            //Assert.IsType<SchemaListFieldTypesResponseModel>(response);
        }

        /// <summary>
        /// Test ListSchemaFields
        /// </summary>
        [Fact]
        public void ListSchemaFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IndexTypeModel indexType = null;
            //string indexName = null;
            //var response = instance.ListSchemaFields(indexType, indexName);
            //Assert.IsType<SchemaListFieldsResponseModel>(response);
        }
    }
}
