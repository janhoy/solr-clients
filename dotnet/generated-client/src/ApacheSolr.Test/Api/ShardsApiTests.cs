/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using ApacheSolr.Client;
using ApacheSolr.Api;
// uncomment below to import models
//using ApacheSolr.Model;

namespace ApacheSolr.Test.Api
{
    /// <summary>
    ///  Class for testing ShardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShardsApiTests : IDisposable
    {
        private ShardsApi instance;

        public ShardsApiTests()
        {
            instance = new ShardsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShardsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ShardsApi
            //Assert.IsType<ShardsApi>(instance);
        }

        /// <summary>
        /// Test CreateShard
        /// </summary>
        [Fact]
        public void CreateShardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionName = null;
            //CreateShardRequestBodyModel? createShardRequestBodyModel = null;
            //var response = instance.CreateShard(collectionName, createShardRequestBodyModel);
            //Assert.IsType<SubResponseAccumulatingJerseyResponseModel>(response);
        }

        /// <summary>
        /// Test DeleteShard
        /// </summary>
        [Fact]
        public void DeleteShardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionName = null;
            //string shardName = null;
            //bool? deleteInstanceDir = null;
            //bool? deleteDataDir = null;
            //bool? deleteIndex = null;
            //bool? followAliases = null;
            //string? async = null;
            //var response = instance.DeleteShard(collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async);
            //Assert.IsType<SubResponseAccumulatingJerseyResponseModel>(response);
        }

        /// <summary>
        /// Test ForceShardLeader
        /// </summary>
        [Fact]
        public void ForceShardLeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionName = null;
            //string shardName = null;
            //var response = instance.ForceShardLeader(collectionName, shardName);
            //Assert.IsType<SolrJerseyResponseModel>(response);
        }

        /// <summary>
        /// Test InstallShardData
        /// </summary>
        [Fact]
        public void InstallShardDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collName = null;
            //string shardName = null;
            //InstallShardDataRequestBodyModel? installShardDataRequestBodyModel = null;
            //var response = instance.InstallShardData(collName, shardName, installShardDataRequestBodyModel);
            //Assert.IsType<SolrJerseyResponseModel>(response);
        }

        /// <summary>
        /// Test SyncShard
        /// </summary>
        [Fact]
        public void SyncShardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionName = null;
            //string shardName = null;
            //var response = instance.SyncShard(collectionName, shardName);
            //Assert.IsType<SolrJerseyResponseModel>(response);
        }
    }
}
