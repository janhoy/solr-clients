/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ApacheSolr.Client;
using ApacheSolr.Model;

namespace ApacheSolr.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionSnapshotsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <returns>CreateCollectionSnapshotResponseModel</returns>
        CreateCollectionSnapshotResponseModel CreateCollectionSnapshot(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel);

        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <returns>ApiResponse of CreateCollectionSnapshotResponseModel</returns>
        ApiResponse<CreateCollectionSnapshotResponseModel> CreateCollectionSnapshotWithHttpInfo(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel);
        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>DeleteCollectionSnapshotResponseModel</returns>
        DeleteCollectionSnapshotResponseModel DeleteCollectionSnapshot(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?));

        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of DeleteCollectionSnapshotResponseModel</returns>
        ApiResponse<DeleteCollectionSnapshotResponseModel> DeleteCollectionSnapshotWithHttpInfo(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?));
        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <returns>ListCollectionSnapshotsResponseModel</returns>
        ListCollectionSnapshotsResponseModel ListSnapshots(string collName);

        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <returns>ApiResponse of ListCollectionSnapshotsResponseModel</returns>
        ApiResponse<ListCollectionSnapshotsResponseModel> ListSnapshotsWithHttpInfo(string collName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionSnapshotsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionSnapshotResponseModel</returns>
        System.Threading.Tasks.Task<CreateCollectionSnapshotResponseModel> CreateCollectionSnapshotAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionSnapshotResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollectionSnapshotResponseModel>> CreateCollectionSnapshotWithHttpInfoAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionSnapshotResponseModel</returns>
        System.Threading.Tasks.Task<DeleteCollectionSnapshotResponseModel> DeleteCollectionSnapshotAsync(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionSnapshotResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCollectionSnapshotResponseModel>> DeleteCollectionSnapshotWithHttpInfoAsync(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionSnapshotsResponseModel</returns>
        System.Threading.Tasks.Task<ListCollectionSnapshotsResponseModel> ListSnapshotsAsync(string collName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionSnapshotsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCollectionSnapshotsResponseModel>> ListSnapshotsWithHttpInfoAsync(string collName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionSnapshotsApi : ICollectionSnapshotsApiSync, ICollectionSnapshotsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionSnapshotsApi : IDisposable, ICollectionSnapshotsApi
    {
        private ApacheSolr.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CollectionSnapshotsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CollectionSnapshotsApi(string basePath)
        {
            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CollectionSnapshotsApi(ApacheSolr.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionSnapshotsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionSnapshotsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionSnapshotsApi(HttpClient client, ApacheSolr.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CollectionSnapshotsApi(ApacheSolr.Client.ISynchronousClient client, ApacheSolr.Client.IAsynchronousClient asyncClient, ApacheSolr.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApacheSolr.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApacheSolr.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApacheSolr.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApacheSolr.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApacheSolr.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <returns>CreateCollectionSnapshotResponseModel</returns>
        public CreateCollectionSnapshotResponseModel CreateCollectionSnapshot(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel)
        {
            ApacheSolr.Client.ApiResponse<CreateCollectionSnapshotResponseModel> localVarResponse = CreateCollectionSnapshotWithHttpInfo(collName, snapshotName, createCollectionSnapshotRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <returns>ApiResponse of CreateCollectionSnapshotResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<CreateCollectionSnapshotResponseModel> CreateCollectionSnapshotWithHttpInfo(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel)
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");

            // verify the required parameter 'createCollectionSnapshotRequestBodyModel' is set
            if (createCollectionSnapshotRequestBodyModel == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'createCollectionSnapshotRequestBodyModel' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            localVarRequestOptions.Data = createCollectionSnapshotRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCollectionSnapshotResponseModel>("/collections/{collName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCollectionSnapshotResponseModel</returns>
        public async System.Threading.Tasks.Task<CreateCollectionSnapshotResponseModel> CreateCollectionSnapshotAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<CreateCollectionSnapshotResponseModel> localVarResponse = await CreateCollectionSnapshotWithHttpInfoAsync(collName, snapshotName, createCollectionSnapshotRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBodyModel">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCollectionSnapshotResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<CreateCollectionSnapshotResponseModel>> CreateCollectionSnapshotWithHttpInfoAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBodyModel createCollectionSnapshotRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");

            // verify the required parameter 'createCollectionSnapshotRequestBodyModel' is set
            if (createCollectionSnapshotRequestBodyModel == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'createCollectionSnapshotRequestBodyModel' when calling CollectionSnapshotsApi->CreateCollectionSnapshot");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            localVarRequestOptions.Data = createCollectionSnapshotRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCollectionSnapshotResponseModel>("/collections/{collName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>DeleteCollectionSnapshotResponseModel</returns>
        public DeleteCollectionSnapshotResponseModel DeleteCollectionSnapshot(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?))
        {
            ApacheSolr.Client.ApiResponse<DeleteCollectionSnapshotResponseModel> localVarResponse = DeleteCollectionSnapshotWithHttpInfo(collName, snapshotName, followAliases, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of DeleteCollectionSnapshotResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<DeleteCollectionSnapshotResponseModel> DeleteCollectionSnapshotWithHttpInfo(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->DeleteCollectionSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CollectionSnapshotsApi->DeleteCollectionSnapshot");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCollectionSnapshotResponseModel>("/collections/{collName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCollectionSnapshotResponseModel</returns>
        public async System.Threading.Tasks.Task<DeleteCollectionSnapshotResponseModel> DeleteCollectionSnapshotAsync(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<DeleteCollectionSnapshotResponseModel> localVarResponse = await DeleteCollectionSnapshotWithHttpInfoAsync(collName, snapshotName, followAliases, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCollectionSnapshotResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<DeleteCollectionSnapshotResponseModel>> DeleteCollectionSnapshotWithHttpInfoAsync(string collName, string snapshotName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->DeleteCollectionSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CollectionSnapshotsApi->DeleteCollectionSnapshot");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCollectionSnapshotResponseModel>("/collections/{collName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollectionSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <returns>ListCollectionSnapshotsResponseModel</returns>
        public ListCollectionSnapshotsResponseModel ListSnapshots(string collName)
        {
            ApacheSolr.Client.ApiResponse<ListCollectionSnapshotsResponseModel> localVarResponse = ListSnapshotsWithHttpInfo(collName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <returns>ApiResponse of ListCollectionSnapshotsResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<ListCollectionSnapshotsResponseModel> ListSnapshotsWithHttpInfo(string collName)
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->ListSnapshots");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCollectionSnapshotsResponseModel>("/collections/{collName}/snapshots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSnapshots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionSnapshotsResponseModel</returns>
        public async System.Threading.Tasks.Task<ListCollectionSnapshotsResponseModel> ListSnapshotsAsync(string collName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<ListCollectionSnapshotsResponseModel> localVarResponse = await ListSnapshotsWithHttpInfoAsync(collName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionSnapshotsResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<ListCollectionSnapshotsResponseModel>> ListSnapshotsWithHttpInfoAsync(string collName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collName' when calling CollectionSnapshotsApi->ListSnapshots");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", ApacheSolr.Client.ClientUtils.ParameterToString(collName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCollectionSnapshotsResponseModel>("/collections/{collName}/snapshots", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSnapshots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
