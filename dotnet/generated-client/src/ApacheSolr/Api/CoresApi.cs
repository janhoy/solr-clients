/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ApacheSolr.Client;
using ApacheSolr.Model;

namespace ApacheSolr.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoresApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel InstallCoreData(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?));

        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> InstallCoreDataWithHttpInfo(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?));
        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel MergeIndexes(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?));

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> MergeIndexesWithHttpInfo(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?));
        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel ReloadCore(string coreName);

        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> ReloadCoreWithHttpInfo(string coreName);
        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel RenameCore(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?));

        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> RenameCoreWithHttpInfo(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?));
        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel RestoreCore(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?));

        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> RestoreCoreWithHttpInfo(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?));
        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel SwapCores(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?));

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> SwapCoresWithHttpInfo(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?));
        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel UnloadCore(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?));

        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> UnloadCoreWithHttpInfo(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoresApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> InstallCoreDataAsync(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> InstallCoreDataWithHttpInfoAsync(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> MergeIndexesAsync(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> MergeIndexesWithHttpInfoAsync(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> ReloadCoreAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> ReloadCoreWithHttpInfoAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> RenameCoreAsync(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> RenameCoreWithHttpInfoAsync(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> RestoreCoreAsync(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> RestoreCoreWithHttpInfoAsync(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> SwapCoresAsync(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> SwapCoresWithHttpInfoAsync(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> UnloadCoreAsync(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> UnloadCoreWithHttpInfoAsync(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoresApi : ICoresApiSync, ICoresApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoresApi : IDisposable, ICoresApi
    {
        private ApacheSolr.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CoresApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CoresApi(string basePath)
        {
            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CoresApi(ApacheSolr.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoresApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoresApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoresApi(HttpClient client, ApacheSolr.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CoresApi(ApacheSolr.Client.ISynchronousClient client, ApacheSolr.Client.IAsynchronousClient asyncClient, ApacheSolr.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApacheSolr.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApacheSolr.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApacheSolr.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApacheSolr.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApacheSolr.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel InstallCoreData(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = InstallCoreDataWithHttpInfo(coreName, installCoreDataRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> InstallCoreDataWithHttpInfo(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->InstallCoreData");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = installCoreDataRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/install", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallCoreData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> InstallCoreDataAsync(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await InstallCoreDataWithHttpInfoAsync(coreName, installCoreDataRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> InstallCoreDataWithHttpInfoAsync(string coreName, InstallCoreDataRequestBodyModel? installCoreDataRequestBodyModel = default(InstallCoreDataRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->InstallCoreData");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = installCoreDataRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/install", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallCoreData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel MergeIndexes(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = MergeIndexesWithHttpInfo(coreName, mergeIndexesRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> MergeIndexesWithHttpInfo(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->MergeIndexes");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = mergeIndexesRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/merge-indices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeIndexes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> MergeIndexesAsync(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await MergeIndexesWithHttpInfoAsync(coreName, mergeIndexesRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBodyModel">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> MergeIndexesWithHttpInfoAsync(string coreName, MergeIndexesRequestBodyModel? mergeIndexesRequestBodyModel = default(MergeIndexesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->MergeIndexes");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = mergeIndexesRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/merge-indices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeIndexes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel ReloadCore(string coreName)
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = ReloadCoreWithHttpInfo(coreName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> ReloadCoreWithHttpInfo(string coreName)
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->ReloadCore");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/reload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> ReloadCoreAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await ReloadCoreWithHttpInfoAsync(coreName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> ReloadCoreWithHttpInfoAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->ReloadCore");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/reload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel RenameCore(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = RenameCoreWithHttpInfo(coreName, renameCoreRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> RenameCoreWithHttpInfo(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->RenameCore");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = renameCoreRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/rename", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> RenameCoreAsync(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await RenameCoreWithHttpInfoAsync(coreName, renameCoreRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBodyModel">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> RenameCoreWithHttpInfoAsync(string coreName, RenameCoreRequestBodyModel? renameCoreRequestBodyModel = default(RenameCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->RenameCore");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = renameCoreRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel RestoreCore(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = RestoreCoreWithHttpInfo(coreName, restoreCoreRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> RestoreCoreWithHttpInfo(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->RestoreCore");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = restoreCoreRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> RestoreCoreAsync(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await RestoreCoreWithHttpInfoAsync(coreName, restoreCoreRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> RestoreCoreWithHttpInfoAsync(string coreName, RestoreCoreRequestBodyModel? restoreCoreRequestBodyModel = default(RestoreCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->RestoreCore");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = restoreCoreRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel SwapCores(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = SwapCoresWithHttpInfo(coreName, swapCoresRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> SwapCoresWithHttpInfo(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->SwapCores");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = swapCoresRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapCores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> SwapCoresAsync(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await SwapCoresWithHttpInfoAsync(coreName, swapCoresRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBodyModel">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> SwapCoresWithHttpInfoAsync(string coreName, SwapCoresRequestBodyModel? swapCoresRequestBodyModel = default(SwapCoresRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->SwapCores");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = swapCoresRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/swap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SwapCores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel UnloadCore(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = UnloadCoreWithHttpInfo(coreName, unloadCoreRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> UnloadCoreWithHttpInfo(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->UnloadCore");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = unloadCoreRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/cores/{coreName}/unload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> UnloadCoreAsync(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await UnloadCoreWithHttpInfoAsync(coreName, unloadCoreRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBodyModel">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> UnloadCoreWithHttpInfoAsync(string coreName, UnloadCoreRequestBodyModel? unloadCoreRequestBodyModel = default(UnloadCoreRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoresApi->UnloadCore");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.Data = unloadCoreRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/cores/{coreName}/unload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadCore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
