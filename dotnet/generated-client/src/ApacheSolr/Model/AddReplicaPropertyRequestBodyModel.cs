/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ApacheSolr.Client.FileParameter;
using OpenAPIDateConverter = ApacheSolr.Client.OpenAPIDateConverter;

namespace ApacheSolr.Model
{
    /// <summary>
    /// AddReplicaPropertyRequestBodyModel
    /// </summary>
    [DataContract(Name = "AddReplicaPropertyRequestBody")]
    public partial class AddReplicaPropertyRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddReplicaPropertyRequestBodyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddReplicaPropertyRequestBodyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddReplicaPropertyRequestBodyModel" /> class.
        /// </summary>
        /// <param name="value">The value to assign to the property. (required).</param>
        /// <param name="shardUnique">If &#x60;true&#x60;, then setting this property in one replica will remove the property from all other replicas in that shard. The default is &#x60;false&#x60;.\\nThere is one pre-defined property &#x60;preferredLeader&#x60; for which &#x60;shardUnique&#x60; is forced to &#x60;true&#x60; and an error returned if &#x60;shardUnique&#x60; is explicitly set to &#x60;false&#x60;. (default to false).</param>
        public AddReplicaPropertyRequestBodyModel(string value = default(string), bool shardUnique = false)
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for AddReplicaPropertyRequestBodyModel and cannot be null");
            }
            this.Value = value;
            this.ShardUnique = shardUnique;
        }

        /// <summary>
        /// The value to assign to the property.
        /// </summary>
        /// <value>The value to assign to the property.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, then setting this property in one replica will remove the property from all other replicas in that shard. The default is &#x60;false&#x60;.\\nThere is one pre-defined property &#x60;preferredLeader&#x60; for which &#x60;shardUnique&#x60; is forced to &#x60;true&#x60; and an error returned if &#x60;shardUnique&#x60; is explicitly set to &#x60;false&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, then setting this property in one replica will remove the property from all other replicas in that shard. The default is &#x60;false&#x60;.\\nThere is one pre-defined property &#x60;preferredLeader&#x60; for which &#x60;shardUnique&#x60; is forced to &#x60;true&#x60; and an error returned if &#x60;shardUnique&#x60; is explicitly set to &#x60;false&#x60;.</value>
        [DataMember(Name = "shardUnique", EmitDefaultValue = true)]
        public bool ShardUnique { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddReplicaPropertyRequestBodyModel {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ShardUnique: ").Append(ShardUnique).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
