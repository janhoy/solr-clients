/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ApacheSolr.Client.FileParameter;
using OpenAPIDateConverter = ApacheSolr.Client.OpenAPIDateConverter;

namespace ApacheSolr.Model
{
    /// <summary>
    /// MigrateReplicasRequestBodyModel
    /// </summary>
    [DataContract(Name = "MigrateReplicasRequestBody")]
    public partial class MigrateReplicasRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateReplicasRequestBodyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MigrateReplicasRequestBodyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateReplicasRequestBodyModel" /> class.
        /// </summary>
        /// <param name="sourceNodes">The set of nodes which all replicas will be migrated off of. (required).</param>
        /// <param name="targetNodes">A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;..</param>
        /// <param name="waitForFinalState">If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active..</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously..</param>
        public MigrateReplicasRequestBodyModel(Collection<string> sourceNodes = default(Collection<string>), Collection<string> targetNodes = default(Collection<string>), bool waitForFinalState = default(bool), string async = default(string))
        {
            // to ensure "sourceNodes" is required (not null)
            if (sourceNodes == null)
            {
                throw new ArgumentNullException("sourceNodes is a required property for MigrateReplicasRequestBodyModel and cannot be null");
            }
            this.SourceNodes = sourceNodes;
            this.TargetNodes = targetNodes;
            this.WaitForFinalState = waitForFinalState;
            this.Async = async;
        }

        /// <summary>
        /// The set of nodes which all replicas will be migrated off of.
        /// </summary>
        /// <value>The set of nodes which all replicas will be migrated off of.</value>
        [DataMember(Name = "sourceNodes", IsRequired = true, EmitDefaultValue = true)]
        public Collection<string> SourceNodes { get; set; }

        /// <summary>
        /// A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;.
        /// </summary>
        /// <value>A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;.</value>
        [DataMember(Name = "targetNodes", EmitDefaultValue = false)]
        public Collection<string> TargetNodes { get; set; }

        /// <summary>
        /// If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active.
        /// </summary>
        /// <value>If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active.</value>
        [DataMember(Name = "waitForFinalState", EmitDefaultValue = true)]
        public bool WaitForFinalState { get; set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [DataMember(Name = "async", EmitDefaultValue = false)]
        public string Async { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrateReplicasRequestBodyModel {\n");
            sb.Append("  SourceNodes: ").Append(SourceNodes).Append("\n");
            sb.Append("  TargetNodes: ").Append(TargetNodes).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
