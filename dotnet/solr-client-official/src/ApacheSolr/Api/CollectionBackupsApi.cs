/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ApacheSolr.Client;
using ApacheSolr.Model;

namespace ApacheSolr.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionBackupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel CreateCollectionBackup(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?));

        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> CreateCollectionBackupWithHttpInfo(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?));
        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>BackupDeletionResponseBodyModel</returns>
        BackupDeletionResponseBodyModel DeleteMultipleBackupsByRecency(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?));

        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of BackupDeletionResponseBodyModel</returns>
        ApiResponse<BackupDeletionResponseBodyModel> DeleteMultipleBackupsByRecencyWithHttpInfo(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?));
        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>BackupDeletionResponseBodyModel</returns>
        BackupDeletionResponseBodyModel DeleteSingleBackupById(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?));

        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of BackupDeletionResponseBodyModel</returns>
        ApiResponse<BackupDeletionResponseBodyModel> DeleteSingleBackupByIdWithHttpInfo(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?));
        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <returns>PurgeUnusedResponseModel</returns>
        PurgeUnusedResponseModel GarbageCollectUnusedBackupFiles(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?));

        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <returns>ApiResponse of PurgeUnusedResponseModel</returns>
        ApiResponse<PurgeUnusedResponseModel> GarbageCollectUnusedBackupFilesWithHttpInfo(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?));
        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <returns>ListCollectionBackupsResponseModel</returns>
        ListCollectionBackupsResponseModel ListBackupsAtLocation(string backupName, string? location = default(string?), string? repository = default(string?));

        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <returns>ApiResponse of ListCollectionBackupsResponseModel</returns>
        ApiResponse<ListCollectionBackupsResponseModel> ListBackupsAtLocationWithHttpInfo(string backupName, string? location = default(string?), string? repository = default(string?));
        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel RestoreCollection(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?));

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> RestoreCollectionWithHttpInfo(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionBackupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateCollectionBackupAsync(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> CreateCollectionBackupWithHttpInfoAsync(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDeletionResponseBodyModel</returns>
        System.Threading.Tasks.Task<BackupDeletionResponseBodyModel> DeleteMultipleBackupsByRecencyAsync(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDeletionResponseBodyModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupDeletionResponseBodyModel>> DeleteMultipleBackupsByRecencyWithHttpInfoAsync(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDeletionResponseBodyModel</returns>
        System.Threading.Tasks.Task<BackupDeletionResponseBodyModel> DeleteSingleBackupByIdAsync(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDeletionResponseBodyModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupDeletionResponseBodyModel>> DeleteSingleBackupByIdWithHttpInfoAsync(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurgeUnusedResponseModel</returns>
        System.Threading.Tasks.Task<PurgeUnusedResponseModel> GarbageCollectUnusedBackupFilesAsync(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurgeUnusedResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurgeUnusedResponseModel>> GarbageCollectUnusedBackupFilesWithHttpInfoAsync(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionBackupsResponseModel</returns>
        System.Threading.Tasks.Task<ListCollectionBackupsResponseModel> ListBackupsAtLocationAsync(string backupName, string? location = default(string?), string? repository = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionBackupsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCollectionBackupsResponseModel>> ListBackupsAtLocationWithHttpInfoAsync(string backupName, string? location = default(string?), string? repository = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> RestoreCollectionAsync(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> RestoreCollectionWithHttpInfoAsync(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionBackupsApi : ICollectionBackupsApiSync, ICollectionBackupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionBackupsApi : IDisposable, ICollectionBackupsApi
    {
        private ApacheSolr.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CollectionBackupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CollectionBackupsApi(string basePath)
        {
            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CollectionBackupsApi(ApacheSolr.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionBackupsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionBackupsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionBackupsApi(HttpClient client, ApacheSolr.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CollectionBackupsApi(ApacheSolr.Client.ISynchronousClient client, ApacheSolr.Client.IAsynchronousClient asyncClient, ApacheSolr.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApacheSolr.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApacheSolr.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApacheSolr.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApacheSolr.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApacheSolr.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel CreateCollectionBackup(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = CreateCollectionBackupWithHttpInfo(collectionName, backupName, createCollectionBackupRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> CreateCollectionBackupWithHttpInfo(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionBackupsApi->CreateCollectionBackup");

            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->CreateCollectionBackup");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", ApacheSolr.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = createCollectionBackupRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrJerseyResponseModel>("/collections/{collectionName}/backups/{backupName}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateCollectionBackupAsync(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await CreateCollectionBackupWithHttpInfoAsync(collectionName, backupName, createCollectionBackupRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SolrJerseyResponseModel>> CreateCollectionBackupWithHttpInfoAsync(string collectionName, string backupName, CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = default(CreateCollectionBackupRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionBackupsApi->CreateCollectionBackup");

            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->CreateCollectionBackup");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", ApacheSolr.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = createCollectionBackupRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrJerseyResponseModel>("/collections/{collectionName}/backups/{backupName}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollectionBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>BackupDeletionResponseBodyModel</returns>
        public BackupDeletionResponseBodyModel DeleteMultipleBackupsByRecency(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?))
        {
            ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> localVarResponse = DeleteMultipleBackupsByRecencyWithHttpInfo(backupName, retainLatest, location, repository, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of BackupDeletionResponseBodyModel</returns>
        public ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> DeleteMultipleBackupsByRecencyWithHttpInfo(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->DeleteMultipleBackupsByRecency");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            if (retainLatest != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "retainLatest", retainLatest));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<BackupDeletionResponseBodyModel>("/backups/{backupName}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMultipleBackupsByRecency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDeletionResponseBodyModel</returns>
        public async System.Threading.Tasks.Task<BackupDeletionResponseBodyModel> DeleteMultipleBackupsByRecencyAsync(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> localVarResponse = await DeleteMultipleBackupsByRecencyWithHttpInfoAsync(backupName, retainLatest, location, repository, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDeletionResponseBodyModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel>> DeleteMultipleBackupsByRecencyWithHttpInfoAsync(string backupName, int? retainLatest = default(int?), string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->DeleteMultipleBackupsByRecency");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            if (retainLatest != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "retainLatest", retainLatest));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BackupDeletionResponseBodyModel>("/backups/{backupName}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMultipleBackupsByRecency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>BackupDeletionResponseBodyModel</returns>
        public BackupDeletionResponseBodyModel DeleteSingleBackupById(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?))
        {
            ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> localVarResponse = DeleteSingleBackupByIdWithHttpInfo(backupName, backupId, location, repository, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of BackupDeletionResponseBodyModel</returns>
        public ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> DeleteSingleBackupByIdWithHttpInfo(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->DeleteSingleBackupById");

            // verify the required parameter 'backupId' is set
            if (backupId == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupId' when calling CollectionBackupsApi->DeleteSingleBackupById");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", ApacheSolr.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<BackupDeletionResponseBodyModel>("/backups/{backupName}/versions/{backupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSingleBackupById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupDeletionResponseBodyModel</returns>
        public async System.Threading.Tasks.Task<BackupDeletionResponseBodyModel> DeleteSingleBackupByIdAsync(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel> localVarResponse = await DeleteSingleBackupByIdWithHttpInfoAsync(backupName, backupId, location, repository, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupDeletionResponseBodyModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<BackupDeletionResponseBodyModel>> DeleteSingleBackupByIdWithHttpInfoAsync(string backupName, string backupId, string? location = default(string?), string? repository = default(string?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->DeleteSingleBackupById");

            // verify the required parameter 'backupId' is set
            if (backupId == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupId' when calling CollectionBackupsApi->DeleteSingleBackupById");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("backupId", ApacheSolr.Client.ClientUtils.ParameterToString(backupId)); // path parameter
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BackupDeletionResponseBodyModel>("/backups/{backupName}/versions/{backupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSingleBackupById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <returns>PurgeUnusedResponseModel</returns>
        public PurgeUnusedResponseModel GarbageCollectUnusedBackupFiles(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<PurgeUnusedResponseModel> localVarResponse = GarbageCollectUnusedBackupFilesWithHttpInfo(backupName, purgeUnusedFilesRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <returns>ApiResponse of PurgeUnusedResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<PurgeUnusedResponseModel> GarbageCollectUnusedBackupFilesWithHttpInfo(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->GarbageCollectUnusedBackupFiles");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = purgeUnusedFilesRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PurgeUnusedResponseModel>("/backups/{backupName}/purgeUnused", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GarbageCollectUnusedBackupFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurgeUnusedResponseModel</returns>
        public async System.Threading.Tasks.Task<PurgeUnusedResponseModel> GarbageCollectUnusedBackupFilesAsync(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<PurgeUnusedResponseModel> localVarResponse = await GarbageCollectUnusedBackupFilesWithHttpInfoAsync(backupName, purgeUnusedFilesRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBodyModel">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurgeUnusedResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<PurgeUnusedResponseModel>> GarbageCollectUnusedBackupFilesWithHttpInfoAsync(string backupName, PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = default(PurgeUnusedFilesRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->GarbageCollectUnusedBackupFiles");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = purgeUnusedFilesRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PurgeUnusedResponseModel>("/backups/{backupName}/purgeUnused", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GarbageCollectUnusedBackupFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <returns>ListCollectionBackupsResponseModel</returns>
        public ListCollectionBackupsResponseModel ListBackupsAtLocation(string backupName, string? location = default(string?), string? repository = default(string?))
        {
            ApacheSolr.Client.ApiResponse<ListCollectionBackupsResponseModel> localVarResponse = ListBackupsAtLocationWithHttpInfo(backupName, location, repository);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <returns>ApiResponse of ListCollectionBackupsResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<ListCollectionBackupsResponseModel> ListBackupsAtLocationWithHttpInfo(string backupName, string? location = default(string?), string? repository = default(string?))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->ListBackupsAtLocation");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCollectionBackupsResponseModel>("/backups/{backupName}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBackupsAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionBackupsResponseModel</returns>
        public async System.Threading.Tasks.Task<ListCollectionBackupsResponseModel> ListBackupsAtLocationAsync(string backupName, string? location = default(string?), string? repository = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<ListCollectionBackupsResponseModel> localVarResponse = await ListBackupsAtLocationWithHttpInfoAsync(backupName, location, repository, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionBackupsResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<ListCollectionBackupsResponseModel>> ListBackupsAtLocationWithHttpInfoAsync(string backupName, string? location = default(string?), string? repository = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->ListBackupsAtLocation");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (repository != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "repository", repository));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCollectionBackupsResponseModel>("/backups/{backupName}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBackupsAtLocation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel RestoreCollection(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?))
        {
            ApacheSolr.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = RestoreCollectionWithHttpInfo(backupName, restoreCollectionRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> RestoreCollectionWithHttpInfo(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->RestoreCollection");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = restoreCollectionRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/backups/{backupName}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> RestoreCollectionAsync(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await RestoreCollectionWithHttpInfoAsync(backupName, restoreCollectionRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> RestoreCollectionWithHttpInfoAsync(string backupName, RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = default(RestoreCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'backupName' is set
            if (backupName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'backupName' when calling CollectionBackupsApi->RestoreCollection");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("backupName", ApacheSolr.Client.ClientUtils.ParameterToString(backupName)); // path parameter
            localVarRequestOptions.Data = restoreCollectionRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/backups/{backupName}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
