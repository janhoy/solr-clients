/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ApacheSolr.Client;
using ApacheSolr.Model;

namespace ApacheSolr.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreSnapshotsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>CreateCoreSnapshotResponseModel</returns>
        CreateCoreSnapshotResponseModel CreateSnapshot(string coreName, string snapshotName, string? async = default(string?));

        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>ApiResponse of CreateCoreSnapshotResponseModel</returns>
        ApiResponse<CreateCoreSnapshotResponseModel> CreateSnapshotWithHttpInfo(string coreName, string snapshotName, string? async = default(string?));
        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>DeleteSnapshotResponseModel</returns>
        DeleteSnapshotResponseModel DeleteSnapshot(string coreName, string snapshotName, string? async = default(string?));

        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>ApiResponse of DeleteSnapshotResponseModel</returns>
        ApiResponse<DeleteSnapshotResponseModel> DeleteSnapshotWithHttpInfo(string coreName, string snapshotName, string? async = default(string?));
        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <returns>ListCoreSnapshotsResponseModel</returns>
        ListCoreSnapshotsResponseModel ListSnapshots1(string coreName);

        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <returns>ApiResponse of ListCoreSnapshotsResponseModel</returns>
        ApiResponse<ListCoreSnapshotsResponseModel> ListSnapshots1WithHttpInfo(string coreName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreSnapshotsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoreSnapshotResponseModel</returns>
        System.Threading.Tasks.Task<CreateCoreSnapshotResponseModel> CreateSnapshotAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoreSnapshotResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCoreSnapshotResponseModel>> CreateSnapshotWithHttpInfoAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSnapshotResponseModel</returns>
        System.Threading.Tasks.Task<DeleteSnapshotResponseModel> DeleteSnapshotAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSnapshotResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSnapshotResponseModel>> DeleteSnapshotWithHttpInfoAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCoreSnapshotsResponseModel</returns>
        System.Threading.Tasks.Task<ListCoreSnapshotsResponseModel> ListSnapshots1Async(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCoreSnapshotsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCoreSnapshotsResponseModel>> ListSnapshots1WithHttpInfoAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreSnapshotsApi : ICoreSnapshotsApiSync, ICoreSnapshotsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreSnapshotsApi : IDisposable, ICoreSnapshotsApi
    {
        private ApacheSolr.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CoreSnapshotsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CoreSnapshotsApi(string basePath)
        {
            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CoreSnapshotsApi(ApacheSolr.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoreSnapshotsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoreSnapshotsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                new ApacheSolr.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CoreSnapshotsApi(HttpClient client, ApacheSolr.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ApacheSolr.Client.Configuration.MergeConfigurations(
                ApacheSolr.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApacheSolr.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CoreSnapshotsApi(ApacheSolr.Client.ISynchronousClient client, ApacheSolr.Client.IAsynchronousClient asyncClient, ApacheSolr.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ApacheSolr.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApacheSolr.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ApacheSolr.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ApacheSolr.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApacheSolr.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ApacheSolr.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>CreateCoreSnapshotResponseModel</returns>
        public CreateCoreSnapshotResponseModel CreateSnapshot(string coreName, string snapshotName, string? async = default(string?))
        {
            ApacheSolr.Client.ApiResponse<CreateCoreSnapshotResponseModel> localVarResponse = CreateSnapshotWithHttpInfo(coreName, snapshotName, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>ApiResponse of CreateCoreSnapshotResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<CreateCoreSnapshotResponseModel> CreateSnapshotWithHttpInfo(string coreName, string snapshotName, string? async = default(string?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->CreateSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CoreSnapshotsApi->CreateSnapshot");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCoreSnapshotResponseModel>("/cores/{coreName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCoreSnapshotResponseModel</returns>
        public async System.Threading.Tasks.Task<CreateCoreSnapshotResponseModel> CreateSnapshotAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<CreateCoreSnapshotResponseModel> localVarResponse = await CreateSnapshotWithHttpInfoAsync(coreName, snapshotName, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCoreSnapshotResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<CreateCoreSnapshotResponseModel>> CreateSnapshotWithHttpInfoAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->CreateSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CoreSnapshotsApi->CreateSnapshot");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCoreSnapshotResponseModel>("/cores/{coreName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>DeleteSnapshotResponseModel</returns>
        public DeleteSnapshotResponseModel DeleteSnapshot(string coreName, string snapshotName, string? async = default(string?))
        {
            ApacheSolr.Client.ApiResponse<DeleteSnapshotResponseModel> localVarResponse = DeleteSnapshotWithHttpInfo(coreName, snapshotName, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <returns>ApiResponse of DeleteSnapshotResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<DeleteSnapshotResponseModel> DeleteSnapshotWithHttpInfo(string coreName, string snapshotName, string? async = default(string?))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->DeleteSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CoreSnapshotsApi->DeleteSnapshot");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteSnapshotResponseModel>("/cores/{coreName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSnapshotResponseModel</returns>
        public async System.Threading.Tasks.Task<DeleteSnapshotResponseModel> DeleteSnapshotAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<DeleteSnapshotResponseModel> localVarResponse = await DeleteSnapshotWithHttpInfoAsync(coreName, snapshotName, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSnapshotResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<DeleteSnapshotResponseModel>> DeleteSnapshotWithHttpInfoAsync(string coreName, string snapshotName, string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->DeleteSnapshot");

            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'snapshotName' when calling CoreSnapshotsApi->DeleteSnapshot");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter
            localVarRequestOptions.PathParameters.Add("snapshotName", ApacheSolr.Client.ClientUtils.ParameterToString(snapshotName)); // path parameter
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(ApacheSolr.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSnapshotResponseModel>("/cores/{coreName}/snapshots/{snapshotName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <returns>ListCoreSnapshotsResponseModel</returns>
        public ListCoreSnapshotsResponseModel ListSnapshots1(string coreName)
        {
            ApacheSolr.Client.ApiResponse<ListCoreSnapshotsResponseModel> localVarResponse = ListSnapshots1WithHttpInfo(coreName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <returns>ApiResponse of ListCoreSnapshotsResponseModel</returns>
        public ApacheSolr.Client.ApiResponse<ListCoreSnapshotsResponseModel> ListSnapshots1WithHttpInfo(string coreName)
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->ListSnapshots1");

            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCoreSnapshotsResponseModel>("/cores/{coreName}/snapshots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSnapshots1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCoreSnapshotsResponseModel</returns>
        public async System.Threading.Tasks.Task<ListCoreSnapshotsResponseModel> ListSnapshots1Async(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ApacheSolr.Client.ApiResponse<ListCoreSnapshotsResponseModel> localVarResponse = await ListSnapshots1WithHttpInfoAsync(coreName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <exception cref="ApacheSolr.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCoreSnapshotsResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApacheSolr.Client.ApiResponse<ListCoreSnapshotsResponseModel>> ListSnapshots1WithHttpInfoAsync(string coreName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreName' is set
            if (coreName == null)
                throw new ApacheSolr.Client.ApiException(400, "Missing required parameter 'coreName' when calling CoreSnapshotsApi->ListSnapshots1");


            ApacheSolr.Client.RequestOptions localVarRequestOptions = new ApacheSolr.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = ApacheSolr.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ApacheSolr.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("coreName", ApacheSolr.Client.ClientUtils.ParameterToString(coreName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCoreSnapshotsResponseModel>("/cores/{coreName}/snapshots", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSnapshots1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
