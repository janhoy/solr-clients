/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ApacheSolr.Client.FileParameter;
using OpenAPIDateConverter = ApacheSolr.Client.OpenAPIDateConverter;

namespace ApacheSolr.Model
{
    /// <summary>
    /// CreateCollectionBackupRequestBodyModel
    /// </summary>
    [DataContract(Name = "CreateCollectionBackupRequestBody")]
    public partial class CreateCollectionBackupRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionBackupRequestBodyModel" /> class.
        /// </summary>
        /// <param name="location">location.</param>
        /// <param name="repository">repository.</param>
        /// <param name="followAliases">followAliases.</param>
        /// <param name="backupStrategy">backupStrategy.</param>
        /// <param name="snapshotName">snapshotName.</param>
        /// <param name="incremental">incremental.</param>
        /// <param name="backupConfigset">backupConfigset.</param>
        /// <param name="maxNumBackupPoints">maxNumBackupPoints.</param>
        /// <param name="async">async.</param>
        /// <param name="extraProperties">extraProperties.</param>
        public CreateCollectionBackupRequestBodyModel(string location = default(string), string repository = default(string), bool followAliases = default(bool), string backupStrategy = default(string), string snapshotName = default(string), bool incremental = default(bool), bool backupConfigset = default(bool), int maxNumBackupPoints = default(int), string async = default(string), Dictionary<string, string> extraProperties = default(Dictionary<string, string>))
        {
            this.Location = location;
            this.Repository = repository;
            this.FollowAliases = followAliases;
            this.BackupStrategy = backupStrategy;
            this.SnapshotName = snapshotName;
            this.Incremental = incremental;
            this.BackupConfigset = backupConfigset;
            this.MaxNumBackupPoints = maxNumBackupPoints;
            this.Async = async;
            this.ExtraProperties = extraProperties;
        }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [DataMember(Name = "followAliases", EmitDefaultValue = true)]
        public bool FollowAliases { get; set; }

        /// <summary>
        /// Gets or Sets BackupStrategy
        /// </summary>
        [DataMember(Name = "backupStrategy", EmitDefaultValue = false)]
        public string BackupStrategy { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotName
        /// </summary>
        [DataMember(Name = "snapshotName", EmitDefaultValue = false)]
        public string SnapshotName { get; set; }

        /// <summary>
        /// Gets or Sets Incremental
        /// </summary>
        [DataMember(Name = "incremental", EmitDefaultValue = true)]
        public bool Incremental { get; set; }

        /// <summary>
        /// Gets or Sets BackupConfigset
        /// </summary>
        [DataMember(Name = "backupConfigset", EmitDefaultValue = true)]
        public bool BackupConfigset { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumBackupPoints
        /// </summary>
        [DataMember(Name = "maxNumBackupPoints", EmitDefaultValue = false)]
        public int MaxNumBackupPoints { get; set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [DataMember(Name = "async", EmitDefaultValue = false)]
        public string Async { get; set; }

        /// <summary>
        /// Gets or Sets ExtraProperties
        /// </summary>
        [DataMember(Name = "extraProperties", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtraProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCollectionBackupRequestBodyModel {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  BackupStrategy: ").Append(BackupStrategy).Append("\n");
            sb.Append("  SnapshotName: ").Append(SnapshotName).Append("\n");
            sb.Append("  Incremental: ").Append(Incremental).Append("\n");
            sb.Append("  BackupConfigset: ").Append(BackupConfigset).Append("\n");
            sb.Append("  MaxNumBackupPoints: ").Append(MaxNumBackupPoints).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  ExtraProperties: ").Append(ExtraProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
