/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using SolrClient.Client;
using SolrClient.Api;
// uncomment below to import models
//using SolrClient.Model;

namespace SolrClient.Test.Api
{
    /// <summary>
    ///  Class for testing CollectionBackupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CollectionBackupsApiTests : IDisposable
    {
        private CollectionBackupsApi instance;

        public CollectionBackupsApiTests()
        {
            instance = new CollectionBackupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CollectionBackupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CollectionBackupsApi
            //Assert.IsType<CollectionBackupsApi>(instance);
        }

        /// <summary>
        /// Test CreateCollectionBackup
        /// </summary>
        [Fact]
        public void CreateCollectionBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionName = null;
            //string backupName = null;
            //CreateCollectionBackupRequestBodyModel? createCollectionBackupRequestBodyModel = null;
            //var response = instance.CreateCollectionBackup(collectionName, backupName, createCollectionBackupRequestBodyModel);
            //Assert.IsType<SolrJerseyResponseModel>(response);
        }

        /// <summary>
        /// Test DeleteMultipleBackupsByRecency
        /// </summary>
        [Fact]
        public void DeleteMultipleBackupsByRecencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backupName = null;
            //int? retainLatest = null;
            //string? location = null;
            //string? repository = null;
            //string? async = null;
            //var response = instance.DeleteMultipleBackupsByRecency(backupName, retainLatest, location, repository, async);
            //Assert.IsType<BackupDeletionResponseBodyModel>(response);
        }

        /// <summary>
        /// Test DeleteSingleBackupById
        /// </summary>
        [Fact]
        public void DeleteSingleBackupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backupName = null;
            //string backupId = null;
            //string? location = null;
            //string? repository = null;
            //string? async = null;
            //var response = instance.DeleteSingleBackupById(backupName, backupId, location, repository, async);
            //Assert.IsType<BackupDeletionResponseBodyModel>(response);
        }

        /// <summary>
        /// Test GarbageCollectUnusedBackupFiles
        /// </summary>
        [Fact]
        public void GarbageCollectUnusedBackupFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backupName = null;
            //PurgeUnusedFilesRequestBodyModel? purgeUnusedFilesRequestBodyModel = null;
            //var response = instance.GarbageCollectUnusedBackupFiles(backupName, purgeUnusedFilesRequestBodyModel);
            //Assert.IsType<PurgeUnusedResponseModel>(response);
        }

        /// <summary>
        /// Test ListBackupsAtLocation
        /// </summary>
        [Fact]
        public void ListBackupsAtLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backupName = null;
            //string? location = null;
            //string? repository = null;
            //var response = instance.ListBackupsAtLocation(backupName, location, repository);
            //Assert.IsType<ListCollectionBackupsResponseModel>(response);
        }

        /// <summary>
        /// Test RestoreCollection
        /// </summary>
        [Fact]
        public void RestoreCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backupName = null;
            //RestoreCollectionRequestBodyModel? restoreCollectionRequestBodyModel = null;
            //var response = instance.RestoreCollection(backupName, restoreCollectionRequestBodyModel);
            //Assert.IsType<SubResponseAccumulatingJerseyResponseModel>(response);
        }
    }
}
