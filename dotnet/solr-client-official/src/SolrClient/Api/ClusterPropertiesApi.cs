/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterPropertiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel CreateOrUpdateClusterProperty(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel);

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> CreateOrUpdateClusterPropertyWithHttpInfo(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel);
        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel CreateOrUpdateNestedClusterProperty(Dictionary<string, Object> requestBody);

        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> CreateOrUpdateNestedClusterPropertyWithHttpInfo(Dictionary<string, Object> requestBody);
        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel DeleteClusterProperty(string propertyName);

        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> DeleteClusterPropertyWithHttpInfo(string propertyName);
        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel GetClusterProperty(string propertyName);

        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> GetClusterPropertyWithHttpInfo(string propertyName);
        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListClusterPropertiesResponseModel</returns>
        ListClusterPropertiesResponseModel ListClusterProperties();

        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListClusterPropertiesResponseModel</returns>
        ApiResponse<ListClusterPropertiesResponseModel> ListClusterPropertiesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterPropertiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateOrUpdateClusterPropertyAsync(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> CreateOrUpdateClusterPropertyWithHttpInfoAsync(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateOrUpdateNestedClusterPropertyAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> CreateOrUpdateNestedClusterPropertyWithHttpInfoAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> DeleteClusterPropertyWithHttpInfoAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> GetClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> GetClusterPropertyWithHttpInfoAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListClusterPropertiesResponseModel</returns>
        System.Threading.Tasks.Task<ListClusterPropertiesResponseModel> ListClusterPropertiesAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListClusterPropertiesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListClusterPropertiesResponseModel>> ListClusterPropertiesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterPropertiesApi : IClusterPropertiesApiSync, IClusterPropertiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClusterPropertiesApi : IDisposable, IClusterPropertiesApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ClusterPropertiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ClusterPropertiesApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClusterPropertiesApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClusterPropertiesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClusterPropertiesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClusterPropertiesApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ClusterPropertiesApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel CreateOrUpdateClusterProperty(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = CreateOrUpdateClusterPropertyWithHttpInfo(propertyName, setClusterPropertyRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> CreateOrUpdateClusterPropertyWithHttpInfo(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel)
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->CreateOrUpdateClusterProperty");

            // verify the required parameter 'setClusterPropertyRequestBodyModel' is set
            if (setClusterPropertyRequestBodyModel == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'setClusterPropertyRequestBodyModel' when calling ClusterPropertiesApi->CreateOrUpdateClusterProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = setClusterPropertyRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateOrUpdateClusterPropertyAsync(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await CreateOrUpdateClusterPropertyWithHttpInfoAsync(propertyName, setClusterPropertyRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBodyModel">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> CreateOrUpdateClusterPropertyWithHttpInfoAsync(string propertyName, SetClusterPropertyRequestBodyModel setClusterPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->CreateOrUpdateClusterProperty");

            // verify the required parameter 'setClusterPropertyRequestBodyModel' is set
            if (setClusterPropertyRequestBodyModel == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'setClusterPropertyRequestBodyModel' when calling ClusterPropertiesApi->CreateOrUpdateClusterProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = setClusterPropertyRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel CreateOrUpdateNestedClusterProperty(Dictionary<string, Object> requestBody)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = CreateOrUpdateNestedClusterPropertyWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> CreateOrUpdateNestedClusterPropertyWithHttpInfo(Dictionary<string, Object> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ClusterPropertiesApi->CreateOrUpdateNestedClusterProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SolrJerseyResponseModel>("/cluster/properties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateNestedClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> CreateOrUpdateNestedClusterPropertyAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await CreateOrUpdateNestedClusterPropertyWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> CreateOrUpdateNestedClusterPropertyWithHttpInfoAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ClusterPropertiesApi->CreateOrUpdateNestedClusterProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SolrJerseyResponseModel>("/cluster/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateNestedClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel DeleteClusterProperty(string propertyName)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = DeleteClusterPropertyWithHttpInfo(propertyName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> DeleteClusterPropertyWithHttpInfo(string propertyName)
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->DeleteClusterProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await DeleteClusterPropertyWithHttpInfoAsync(propertyName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> DeleteClusterPropertyWithHttpInfoAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->DeleteClusterProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel GetClusterProperty(string propertyName)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = GetClusterPropertyWithHttpInfo(propertyName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> GetClusterPropertyWithHttpInfo(string propertyName)
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->GetClusterProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> GetClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await GetClusterPropertyWithHttpInfoAsync(propertyName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> GetClusterPropertyWithHttpInfoAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propertyName' when calling ClusterPropertiesApi->GetClusterProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("propertyName", SolrClient.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SolrJerseyResponseModel>("/cluster/properties/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClusterProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListClusterPropertiesResponseModel</returns>
        public ListClusterPropertiesResponseModel ListClusterProperties()
        {
            SolrClient.Client.ApiResponse<ListClusterPropertiesResponseModel> localVarResponse = ListClusterPropertiesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListClusterPropertiesResponseModel</returns>
        public SolrClient.Client.ApiResponse<ListClusterPropertiesResponseModel> ListClusterPropertiesWithHttpInfo()
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ListClusterPropertiesResponseModel>("/cluster/properties", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListClusterProperties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListClusterPropertiesResponseModel</returns>
        public async System.Threading.Tasks.Task<ListClusterPropertiesResponseModel> ListClusterPropertiesAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<ListClusterPropertiesResponseModel> localVarResponse = await ListClusterPropertiesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListClusterPropertiesResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<ListClusterPropertiesResponseModel>> ListClusterPropertiesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListClusterPropertiesResponseModel>("/cluster/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListClusterProperties", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
