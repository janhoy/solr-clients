/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel BalanceShardUnique(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?));

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> BalanceShardUniqueWithHttpInfo(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?));
        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel CreateCollection(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?));

        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> CreateCollectionWithHttpInfo(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?));
        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel DeleteCollection(string collectionName, bool? followAliases = default(bool?), string? async = default(string?));

        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteCollectionWithHttpInfo(string collectionName, bool? followAliases = default(bool?), string? async = default(string?));
        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCollectionsResponseModel</returns>
        ListCollectionsResponseModel ListCollections();

        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCollectionsResponseModel</returns>
        ApiResponse<ListCollectionsResponseModel> ListCollectionsWithHttpInfo();
        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel ReloadCollection(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?));

        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> ReloadCollectionWithHttpInfo(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?));
        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel RenameCollection(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?));

        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> RenameCollectionWithHttpInfo(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> BalanceShardUniqueAsync(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> BalanceShardUniqueWithHttpInfoAsync(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> CreateCollectionAsync(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> CreateCollectionWithHttpInfoAsync(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteCollectionAsync(string collectionName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteCollectionWithHttpInfoAsync(string collectionName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionsResponseModel</returns>
        System.Threading.Tasks.Task<ListCollectionsResponseModel> ListCollectionsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCollectionsResponseModel>> ListCollectionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> ReloadCollectionAsync(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> ReloadCollectionWithHttpInfoAsync(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> RenameCollectionAsync(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> RenameCollectionWithHttpInfoAsync(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApi : ICollectionsApiSync, ICollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionsApi : IDisposable, ICollectionsApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CollectionsApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CollectionsApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CollectionsApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CollectionsApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel BalanceShardUnique(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = BalanceShardUniqueWithHttpInfo(collectionName, balanceShardUniqueRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> BalanceShardUniqueWithHttpInfo(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->BalanceShardUnique");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = balanceShardUniqueRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/balance-shard-unique", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceShardUnique", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> BalanceShardUniqueAsync(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await BalanceShardUniqueWithHttpInfoAsync(collectionName, balanceShardUniqueRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> BalanceShardUniqueWithHttpInfoAsync(string collectionName, BalanceShardUniqueRequestBodyModel? balanceShardUniqueRequestBodyModel = default(BalanceShardUniqueRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->BalanceShardUnique");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = balanceShardUniqueRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/balance-shard-unique", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceShardUnique", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel CreateCollection(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = CreateCollectionWithHttpInfo(createCollectionRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> CreateCollectionWithHttpInfo(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?))
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createCollectionRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> CreateCollectionAsync(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await CreateCollectionWithHttpInfoAsync(createCollectionRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> CreateCollectionWithHttpInfoAsync(CreateCollectionRequestBodyModel? createCollectionRequestBodyModel = default(CreateCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createCollectionRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel DeleteCollection(string collectionName, bool? followAliases = default(bool?), string? async = default(string?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = DeleteCollectionWithHttpInfo(collectionName, followAliases, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteCollectionWithHttpInfo(string collectionName, bool? followAliases = default(bool?), string? async = default(string?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->DeleteCollection");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteCollectionAsync(string collectionName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await DeleteCollectionWithHttpInfoAsync(collectionName, followAliases, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteCollectionWithHttpInfoAsync(string collectionName, bool? followAliases = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->DeleteCollection");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListCollectionsResponseModel</returns>
        public ListCollectionsResponseModel ListCollections()
        {
            SolrClient.Client.ApiResponse<ListCollectionsResponseModel> localVarResponse = ListCollectionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListCollectionsResponseModel</returns>
        public SolrClient.Client.ApiResponse<ListCollectionsResponseModel> ListCollectionsWithHttpInfo()
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCollectionsResponseModel>("/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionsResponseModel</returns>
        public async System.Threading.Tasks.Task<ListCollectionsResponseModel> ListCollectionsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<ListCollectionsResponseModel> localVarResponse = await ListCollectionsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionsResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<ListCollectionsResponseModel>> ListCollectionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCollectionsResponseModel>("/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel ReloadCollection(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = ReloadCollectionWithHttpInfo(collectionName, reloadCollectionRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> ReloadCollectionWithHttpInfo(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->ReloadCollection");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = reloadCollectionRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/reload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> ReloadCollectionAsync(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await ReloadCollectionWithHttpInfoAsync(collectionName, reloadCollectionRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> ReloadCollectionWithHttpInfoAsync(string collectionName, ReloadCollectionRequestBodyModel? reloadCollectionRequestBodyModel = default(ReloadCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->ReloadCollection");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = reloadCollectionRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/reload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel RenameCollection(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = RenameCollectionWithHttpInfo(collectionName, renameCollectionRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> RenameCollectionWithHttpInfo(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->RenameCollection");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = renameCollectionRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/rename", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> RenameCollectionAsync(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await RenameCollectionWithHttpInfoAsync(collectionName, renameCollectionRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> RenameCollectionWithHttpInfoAsync(string collectionName, RenameCollectionRequestBodyModel? renameCollectionRequestBodyModel = default(RenameCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling CollectionsApi->RenameCollection");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = renameCollectionRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
