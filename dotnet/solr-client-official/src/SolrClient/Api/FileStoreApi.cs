/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileStoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel DeleteFile(string path, bool? localDelete = default(bool?));

        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> DeleteFileWithHttpInfo(string path, bool? localDelete = default(bool?));
        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel GetFile(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?));

        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> GetFileWithHttpInfo(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?));
        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <returns>UploadToFileStoreResponseModel</returns>
        UploadToFileStoreResponseModel UploadFile(string filePath, Object body, Collection<string>? sig = default(Collection<string>?));

        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <returns>ApiResponse of UploadToFileStoreResponseModel</returns>
        ApiResponse<UploadToFileStoreResponseModel> UploadFileWithHttpInfo(string filePath, Object body, Collection<string>? sig = default(Collection<string>?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileStoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteFileAsync(string path, bool? localDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> DeleteFileWithHttpInfoAsync(string path, bool? localDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> GetFileAsync(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> GetFileWithHttpInfoAsync(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadToFileStoreResponseModel</returns>
        System.Threading.Tasks.Task<UploadToFileStoreResponseModel> UploadFileAsync(string filePath, Object body, Collection<string>? sig = default(Collection<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadToFileStoreResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadToFileStoreResponseModel>> UploadFileWithHttpInfoAsync(string filePath, Object body, Collection<string>? sig = default(Collection<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileStoreApi : IFileStoreApiSync, IFileStoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileStoreApi : IDisposable, IFileStoreApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FileStoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FileStoreApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FileStoreApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileStoreApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileStoreApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileStoreApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FileStoreApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel DeleteFile(string path, bool? localDelete = default(bool?))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = DeleteFileWithHttpInfo(path, localDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> DeleteFileWithHttpInfo(string path, bool? localDelete = default(bool?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'path' when calling FileStoreApi->DeleteFile");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", SolrClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (localDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "localDelete", localDelete));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SolrJerseyResponseModel>("/cluster/files{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteFileAsync(string path, bool? localDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await DeleteFileWithHttpInfoAsync(path, localDelete, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> DeleteFileWithHttpInfoAsync(string path, bool? localDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'path' when calling FileStoreApi->DeleteFile");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", SolrClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (localDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "localDelete", localDelete));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SolrJerseyResponseModel>("/cluster/files{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel GetFile(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = GetFileWithHttpInfo(path, sync, getFrom, meta);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> GetFileWithHttpInfo(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'path' when calling FileStoreApi->GetFile");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", SolrClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (sync != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "sync", sync));
            }
            if (getFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "getFrom", getFrom));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SolrJerseyResponseModel>("/node/files{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> GetFileAsync(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await GetFileWithHttpInfoAsync(path, sync, getFrom, meta, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> GetFileWithHttpInfoAsync(string path, bool? sync = default(bool?), string? getFrom = default(string?), bool? meta = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'path' when calling FileStoreApi->GetFile");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", SolrClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (sync != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "sync", sync));
            }
            if (getFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "getFrom", getFrom));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SolrJerseyResponseModel>("/node/files{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <returns>UploadToFileStoreResponseModel</returns>
        public UploadToFileStoreResponseModel UploadFile(string filePath, Object body, Collection<string>? sig = default(Collection<string>?))
        {
            SolrClient.Client.ApiResponse<UploadToFileStoreResponseModel> localVarResponse = UploadFileWithHttpInfo(filePath, body, sig);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <returns>ApiResponse of UploadToFileStoreResponseModel</returns>
        public SolrClient.Client.ApiResponse<UploadToFileStoreResponseModel> UploadFileWithHttpInfo(string filePath, Object body, Collection<string>? sig = default(Collection<string>?))
        {
            // verify the required parameter 'filePath' is set
            if (filePath == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'filePath' when calling FileStoreApi->UploadFile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'body' when calling FileStoreApi->UploadFile");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("filePath", SolrClient.Client.ClientUtils.ParameterToString(filePath)); // path parameter
            if (sig != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("multi", "sig", sig));
            }
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UploadToFileStoreResponseModel>("/cluster/files{filePath}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadToFileStoreResponseModel</returns>
        public async System.Threading.Tasks.Task<UploadToFileStoreResponseModel> UploadFileAsync(string filePath, Object body, Collection<string>? sig = default(Collection<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<UploadToFileStoreResponseModel> localVarResponse = await UploadFileWithHttpInfoAsync(filePath, body, sig, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadToFileStoreResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<UploadToFileStoreResponseModel>> UploadFileWithHttpInfoAsync(string filePath, Object body, Collection<string>? sig = default(Collection<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filePath' is set
            if (filePath == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'filePath' when calling FileStoreApi->UploadFile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'body' when calling FileStoreApi->UploadFile");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("filePath", SolrClient.Client.ClientUtils.ParameterToString(filePath)); // path parameter
            if (sig != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("multi", "sig", sig));
            }
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UploadToFileStoreResponseModel>("/cluster/files{filePath}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
