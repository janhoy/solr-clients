/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoggingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <returns>LogMessagesResponseModel</returns>
        LogMessagesResponseModel FetchLocalLogMessages(long? since = default(long?));

        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <returns>ApiResponse of LogMessagesResponseModel</returns>
        ApiResponse<LogMessagesResponseModel> FetchLocalLogMessagesWithHttpInfo(long? since = default(long?));
        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListLevelsResponseModel</returns>
        ListLevelsResponseModel ListAllLoggersAndLevels();

        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListLevelsResponseModel</returns>
        ApiResponse<ListLevelsResponseModel> ListAllLoggersAndLevelsWithHttpInfo();
        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <returns>LoggingResponseModel</returns>
        LoggingResponseModel ModifyLocalLogLevel(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?));

        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <returns>ApiResponse of LoggingResponseModel</returns>
        ApiResponse<LoggingResponseModel> ModifyLocalLogLevelWithHttpInfo(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?));
        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <returns>LoggingResponseModel</returns>
        LoggingResponseModel SetMessageThreshold(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?));

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of LoggingResponseModel</returns>
        ApiResponse<LoggingResponseModel> SetMessageThresholdWithHttpInfo(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoggingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogMessagesResponseModel</returns>
        System.Threading.Tasks.Task<LogMessagesResponseModel> FetchLocalLogMessagesAsync(long? since = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogMessagesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogMessagesResponseModel>> FetchLocalLogMessagesWithHttpInfoAsync(long? since = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLevelsResponseModel</returns>
        System.Threading.Tasks.Task<ListLevelsResponseModel> ListAllLoggersAndLevelsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLevelsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLevelsResponseModel>> ListAllLoggersAndLevelsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoggingResponseModel</returns>
        System.Threading.Tasks.Task<LoggingResponseModel> ModifyLocalLogLevelAsync(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoggingResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoggingResponseModel>> ModifyLocalLogLevelWithHttpInfoAsync(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoggingResponseModel</returns>
        System.Threading.Tasks.Task<LoggingResponseModel> SetMessageThresholdAsync(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoggingResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoggingResponseModel>> SetMessageThresholdWithHttpInfoAsync(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoggingApi : ILoggingApiSync, ILoggingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoggingApi : IDisposable, ILoggingApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LoggingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LoggingApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LoggingApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LoggingApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LoggingApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LoggingApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LoggingApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <returns>LogMessagesResponseModel</returns>
        public LogMessagesResponseModel FetchLocalLogMessages(long? since = default(long?))
        {
            SolrClient.Client.ApiResponse<LogMessagesResponseModel> localVarResponse = FetchLocalLogMessagesWithHttpInfo(since);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <returns>ApiResponse of LogMessagesResponseModel</returns>
        public SolrClient.Client.ApiResponse<LogMessagesResponseModel> FetchLocalLogMessagesWithHttpInfo(long? since = default(long?))
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LogMessagesResponseModel>("/node/logging/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchLocalLogMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogMessagesResponseModel</returns>
        public async System.Threading.Tasks.Task<LogMessagesResponseModel> FetchLocalLogMessagesAsync(long? since = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<LogMessagesResponseModel> localVarResponse = await FetchLocalLogMessagesWithHttpInfoAsync(since, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogMessagesResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<LogMessagesResponseModel>> FetchLocalLogMessagesWithHttpInfoAsync(long? since = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LogMessagesResponseModel>("/node/logging/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchLocalLogMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListLevelsResponseModel</returns>
        public ListLevelsResponseModel ListAllLoggersAndLevels()
        {
            SolrClient.Client.ApiResponse<ListLevelsResponseModel> localVarResponse = ListAllLoggersAndLevelsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListLevelsResponseModel</returns>
        public SolrClient.Client.ApiResponse<ListLevelsResponseModel> ListAllLoggersAndLevelsWithHttpInfo()
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLevelsResponseModel>("/node/logging/levels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllLoggersAndLevels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLevelsResponseModel</returns>
        public async System.Threading.Tasks.Task<ListLevelsResponseModel> ListAllLoggersAndLevelsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<ListLevelsResponseModel> localVarResponse = await ListAllLoggersAndLevelsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLevelsResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<ListLevelsResponseModel>> ListAllLoggersAndLevelsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLevelsResponseModel>("/node/logging/levels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllLoggersAndLevels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <returns>LoggingResponseModel</returns>
        public LoggingResponseModel ModifyLocalLogLevel(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?))
        {
            SolrClient.Client.ApiResponse<LoggingResponseModel> localVarResponse = ModifyLocalLogLevelWithHttpInfo(logLevelChangeModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <returns>ApiResponse of LoggingResponseModel</returns>
        public SolrClient.Client.ApiResponse<LoggingResponseModel> ModifyLocalLogLevelWithHttpInfo(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?))
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = logLevelChangeModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<LoggingResponseModel>("/node/logging/levels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyLocalLogLevel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoggingResponseModel</returns>
        public async System.Threading.Tasks.Task<LoggingResponseModel> ModifyLocalLogLevelAsync(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<LoggingResponseModel> localVarResponse = await ModifyLocalLogLevelWithHttpInfoAsync(logLevelChangeModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChangeModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoggingResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<LoggingResponseModel>> ModifyLocalLogLevelWithHttpInfoAsync(Collection<LogLevelChangeModel>? logLevelChangeModel = default(Collection<LogLevelChangeModel>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = logLevelChangeModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LoggingResponseModel>("/node/logging/levels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyLocalLogLevel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <returns>LoggingResponseModel</returns>
        public LoggingResponseModel SetMessageThreshold(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<LoggingResponseModel> localVarResponse = SetMessageThresholdWithHttpInfo(setThresholdRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of LoggingResponseModel</returns>
        public SolrClient.Client.ApiResponse<LoggingResponseModel> SetMessageThresholdWithHttpInfo(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?))
        {
            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setThresholdRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<LoggingResponseModel>("/node/logging/messages/threshold", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMessageThreshold", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoggingResponseModel</returns>
        public async System.Threading.Tasks.Task<LoggingResponseModel> SetMessageThresholdAsync(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<LoggingResponseModel> localVarResponse = await SetMessageThresholdWithHttpInfoAsync(setThresholdRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoggingResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<LoggingResponseModel>> SetMessageThresholdWithHttpInfoAsync(SetThresholdRequestBodyModel? setThresholdRequestBodyModel = default(SetThresholdRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setThresholdRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LoggingResponseModel>("/node/logging/messages/threshold", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMessageThreshold", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
