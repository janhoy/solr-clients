/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicaPropertiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a property to the specified replica
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel AddReplicaProperty(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel);

        /// <summary>
        /// Adds a property to the specified replica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> AddReplicaPropertyWithHttpInfo(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel);
        /// <summary>
        /// Delete an existing replica property
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        SolrJerseyResponseModel DeleteReplicaProperty(string collName, string shardName, string replicaName, string propName);

        /// <summary>
        /// Delete an existing replica property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        ApiResponse<SolrJerseyResponseModel> DeleteReplicaPropertyWithHttpInfo(string collName, string shardName, string replicaName, string propName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicaPropertiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a property to the specified replica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> AddReplicaPropertyAsync(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Adds a property to the specified replica
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> AddReplicaPropertyWithHttpInfoAsync(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing replica property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteReplicaPropertyAsync(string collName, string shardName, string replicaName, string propName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing replica property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrJerseyResponseModel>> DeleteReplicaPropertyWithHttpInfoAsync(string collName, string shardName, string replicaName, string propName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicaPropertiesApi : IReplicaPropertiesApiSync, IReplicaPropertiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplicaPropertiesApi : IDisposable, IReplicaPropertiesApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ReplicaPropertiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ReplicaPropertiesApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ReplicaPropertiesApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicaPropertiesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicaPropertiesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicaPropertiesApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicaPropertiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ReplicaPropertiesApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a property to the specified replica 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel AddReplicaProperty(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = AddReplicaPropertyWithHttpInfo(collName, shardName, replicaName, propName, addReplicaPropertyRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a property to the specified replica 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> AddReplicaPropertyWithHttpInfo(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel)
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'propName' is set
            if (propName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'addReplicaPropertyRequestBodyModel' is set
            if (addReplicaPropertyRequestBodyModel == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'addReplicaPropertyRequestBodyModel' when calling ReplicaPropertiesApi->AddReplicaProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", SolrClient.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            localVarRequestOptions.PathParameters.Add("propName", SolrClient.Client.ClientUtils.ParameterToString(propName)); // path parameter
            localVarRequestOptions.Data = addReplicaPropertyRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SolrJerseyResponseModel>("/collections/{collName}/shards/{shardName}/replicas/{replicaName}/properties/{propName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReplicaProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a property to the specified replica 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> AddReplicaPropertyAsync(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await AddReplicaPropertyWithHttpInfoAsync(collName, shardName, replicaName, propName, addReplicaPropertyRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a property to the specified replica 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to add.</param>
        /// <param name="addReplicaPropertyRequestBodyModel">The value of the replica property to create or update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> AddReplicaPropertyWithHttpInfoAsync(string collName, string shardName, string replicaName, string propName, AddReplicaPropertyRequestBodyModel addReplicaPropertyRequestBodyModel, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'propName' is set
            if (propName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propName' when calling ReplicaPropertiesApi->AddReplicaProperty");

            // verify the required parameter 'addReplicaPropertyRequestBodyModel' is set
            if (addReplicaPropertyRequestBodyModel == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'addReplicaPropertyRequestBodyModel' when calling ReplicaPropertiesApi->AddReplicaProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", SolrClient.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            localVarRequestOptions.PathParameters.Add("propName", SolrClient.Client.ClientUtils.ParameterToString(propName)); // path parameter
            localVarRequestOptions.Data = addReplicaPropertyRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SolrJerseyResponseModel>("/collections/{collName}/shards/{shardName}/replicas/{replicaName}/properties/{propName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReplicaProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing replica property 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <returns>SolrJerseyResponseModel</returns>
        public SolrJerseyResponseModel DeleteReplicaProperty(string collName, string shardName, string replicaName, string propName)
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = DeleteReplicaPropertyWithHttpInfo(collName, shardName, replicaName, propName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing replica property 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <returns>ApiResponse of SolrJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SolrJerseyResponseModel> DeleteReplicaPropertyWithHttpInfo(string collName, string shardName, string replicaName, string propName)
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'propName' is set
            if (propName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", SolrClient.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            localVarRequestOptions.PathParameters.Add("propName", SolrClient.Client.ClientUtils.ParameterToString(propName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SolrJerseyResponseModel>("/collections/{collName}/shards/{shardName}/replicas/{replicaName}/properties/{propName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicaProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing replica property 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SolrJerseyResponseModel> DeleteReplicaPropertyAsync(string collName, string shardName, string replicaName, string propName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SolrJerseyResponseModel> localVarResponse = await DeleteReplicaPropertyWithHttpInfoAsync(collName, shardName, replicaName, propName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing replica property 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection the replica belongs to.</param>
        /// <param name="shardName">The name of the shard the replica belongs to.</param>
        /// <param name="replicaName">The replica, e.g., &#x60;core_node1&#x60;.</param>
        /// <param name="propName">The name of the property to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SolrJerseyResponseModel>> DeleteReplicaPropertyWithHttpInfoAsync(string collName, string shardName, string replicaName, string propName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collName' is set
            if (collName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");

            // verify the required parameter 'propName' is set
            if (propName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'propName' when calling ReplicaPropertiesApi->DeleteReplicaProperty");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collName", SolrClient.Client.ClientUtils.ParameterToString(collName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            localVarRequestOptions.PathParameters.Add("propName", SolrClient.Client.ClientUtils.ParameterToString(propName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SolrJerseyResponseModel>("/collections/{collName}/shards/{shardName}/replicas/{replicaName}/properties/{propName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicaProperty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
