/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicasApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel CreateReplica(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?));

        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> CreateReplicaWithHttpInfo(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?));
        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel DeleteReplicaByName(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?));

        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicaByNameWithHttpInfo(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?));
        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel DeleteReplicasByCount(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?));

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountWithHttpInfo(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?));
        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        SubResponseAccumulatingJerseyResponseModel DeleteReplicasByCountAllShards(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?));

        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAllShardsWithHttpInfo(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicasApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> CreateReplicaAsync(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> CreateReplicaWithHttpInfoAsync(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicaByNameAsync(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicaByNameWithHttpInfoAsync(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAsync(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicasByCountWithHttpInfoAsync(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAllShardsAsync(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicasByCountAllShardsWithHttpInfoAsync(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicasApi : IReplicasApiSync, IReplicasApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplicasApi : IDisposable, IReplicasApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ReplicasApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ReplicasApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ReplicasApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicasApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicasApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicasApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ReplicasApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel CreateReplica(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = CreateReplicaWithHttpInfo(collectionName, shardName, createReplicaRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> CreateReplicaWithHttpInfo(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->CreateReplica");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->CreateReplica");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.Data = createReplicaRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplica", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> CreateReplicaAsync(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await CreateReplicaWithHttpInfoAsync(collectionName, shardName, createReplicaRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> CreateReplicaWithHttpInfoAsync(string collectionName, string shardName, CreateReplicaRequestBodyModel? createReplicaRequestBodyModel = default(CreateReplicaRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->CreateReplica");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->CreateReplica");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.Data = createReplicaRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplica", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel DeleteReplicaByName(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = DeleteReplicaByNameWithHttpInfo(collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicaByNameWithHttpInfo(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicaByName");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->DeleteReplicaByName");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicasApi->DeleteReplicaByName");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (deleteInstanceDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteInstanceDir", deleteInstanceDir));
            }
            if (deleteDataDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteDataDir", deleteDataDir));
            }
            if (deleteIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteIndex", deleteIndex));
            }
            if (onlyIfDown != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "onlyIfDown", onlyIfDown));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas/{replicaName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicaByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicaByNameAsync(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await DeleteReplicaByNameWithHttpInfoAsync(collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicaByNameWithHttpInfoAsync(string collectionName, string shardName, string replicaName, bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicaByName");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->DeleteReplicaByName");

            // verify the required parameter 'replicaName' is set
            if (replicaName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'replicaName' when calling ReplicasApi->DeleteReplicaByName");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("replicaName", SolrClient.Client.ClientUtils.ParameterToString(replicaName)); // path parameter
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (deleteInstanceDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteInstanceDir", deleteInstanceDir));
            }
            if (deleteDataDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteDataDir", deleteDataDir));
            }
            if (deleteIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteIndex", deleteIndex));
            }
            if (onlyIfDown != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "onlyIfDown", onlyIfDown));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas/{replicaName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicaByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel DeleteReplicasByCount(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = DeleteReplicasByCountWithHttpInfo(collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountWithHttpInfo(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicasByCount");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->DeleteReplicasByCount");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (deleteInstanceDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteInstanceDir", deleteInstanceDir));
            }
            if (deleteDataDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteDataDir", deleteDataDir));
            }
            if (deleteIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteIndex", deleteIndex));
            }
            if (onlyIfDown != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "onlyIfDown", onlyIfDown));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicasByCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAsync(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await DeleteReplicasByCountWithHttpInfoAsync(collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicasByCountWithHttpInfoAsync(string collectionName, string shardName, int? count = default(int?), bool? followAliases = default(bool?), bool? deleteInstanceDir = default(bool?), bool? deleteDataDir = default(bool?), bool? deleteIndex = default(bool?), bool? onlyIfDown = default(bool?), string? async = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicasByCount");

            // verify the required parameter 'shardName' is set
            if (shardName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'shardName' when calling ReplicasApi->DeleteReplicasByCount");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.PathParameters.Add("shardName", SolrClient.Client.ClientUtils.ParameterToString(shardName)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (followAliases != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "followAliases", followAliases));
            }
            if (deleteInstanceDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteInstanceDir", deleteInstanceDir));
            }
            if (deleteDataDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteDataDir", deleteDataDir));
            }
            if (deleteIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "deleteIndex", deleteIndex));
            }
            if (onlyIfDown != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "onlyIfDown", onlyIfDown));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/shards/{shardName}/replicas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicasByCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <returns>SubResponseAccumulatingJerseyResponseModel</returns>
        public SubResponseAccumulatingJerseyResponseModel DeleteReplicasByCountAllShards(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = DeleteReplicasByCountAllShardsWithHttpInfo(collectionName, scaleCollectionRequestBodyModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <returns>ApiResponse of SubResponseAccumulatingJerseyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAllShardsWithHttpInfo(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicasByCountAllShards");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = scaleCollectionRequestBodyModel;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/scale", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicasByCountAllShards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubResponseAccumulatingJerseyResponseModel</returns>
        public async System.Threading.Tasks.Task<SubResponseAccumulatingJerseyResponseModel> DeleteReplicasByCountAllShardsAsync(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel> localVarResponse = await DeleteReplicasByCountAllShardsWithHttpInfoAsync(collectionName, scaleCollectionRequestBodyModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBodyModel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubResponseAccumulatingJerseyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SubResponseAccumulatingJerseyResponseModel>> DeleteReplicasByCountAllShardsWithHttpInfoAsync(string collectionName, ScaleCollectionRequestBodyModel? scaleCollectionRequestBodyModel = default(ScaleCollectionRequestBodyModel?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'collectionName' when calling ReplicasApi->DeleteReplicasByCountAllShards");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionName", SolrClient.Client.ClientUtils.ParameterToString(collectionName)); // path parameter
            localVarRequestOptions.Data = scaleCollectionRequestBodyModel;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SubResponseAccumulatingJerseyResponseModel>("/collections/{collectionName}/scale", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicasByCountAllShards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
