/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SolrClient.Client;
using SolrClient.Model;

namespace SolrClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>SchemaGetDynamicFieldInfoResponseModel</returns>
        SchemaGetDynamicFieldInfoResponseModel GetDynamicFieldInfo(IndexTypeModel indexType, string indexName, string fieldName);

        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of SchemaGetDynamicFieldInfoResponseModel</returns>
        ApiResponse<SchemaGetDynamicFieldInfoResponseModel> GetDynamicFieldInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldName);
        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>SchemaGetFieldInfoResponseModel</returns>
        SchemaGetFieldInfoResponseModel GetFieldInfo(IndexTypeModel indexType, string indexName, string fieldName);

        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of SchemaGetFieldInfoResponseModel</returns>
        ApiResponse<SchemaGetFieldInfoResponseModel> GetFieldInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldName);
        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <returns>SchemaGetFieldTypeInfoResponseModel</returns>
        SchemaGetFieldTypeInfoResponseModel GetFieldTypeInfo(IndexTypeModel indexType, string indexName, string fieldTypeName);

        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <returns>ApiResponse of SchemaGetFieldTypeInfoResponseModel</returns>
        ApiResponse<SchemaGetFieldTypeInfoResponseModel> GetFieldTypeInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldTypeName);
        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaInfoResponseModel</returns>
        SchemaInfoResponseModel GetSchemaInfo(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaInfoResponseModel</returns>
        ApiResponse<SchemaInfoResponseModel> GetSchemaInfoWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaNameResponseModel</returns>
        SchemaNameResponseModel GetSchemaName(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaNameResponseModel</returns>
        ApiResponse<SchemaNameResponseModel> GetSchemaNameWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaSimilarityResponseModel</returns>
        SchemaSimilarityResponseModel GetSchemaSimilarity(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaSimilarityResponseModel</returns>
        ApiResponse<SchemaSimilarityResponseModel> GetSchemaSimilarityWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaUniqueKeyResponseModel</returns>
        SchemaUniqueKeyResponseModel GetSchemaUniqueKey(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaUniqueKeyResponseModel</returns>
        ApiResponse<SchemaUniqueKeyResponseModel> GetSchemaUniqueKeyWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaVersionResponseModel</returns>
        SchemaVersionResponseModel GetSchemaVersion(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaVersionResponseModel</returns>
        ApiResponse<SchemaVersionResponseModel> GetSchemaVersionWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <returns>SchemaZkVersionResponseModel</returns>
        SchemaZkVersionResponseModel GetSchemaZkVersion(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?));

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <returns>ApiResponse of SchemaZkVersionResponseModel</returns>
        ApiResponse<SchemaZkVersionResponseModel> GetSchemaZkVersionWithHttpInfo(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?));
        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListCopyFieldsResponseModel</returns>
        SchemaListCopyFieldsResponseModel ListCopyFields(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListCopyFieldsResponseModel</returns>
        ApiResponse<SchemaListCopyFieldsResponseModel> ListCopyFieldsWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListDynamicFieldsResponseModel</returns>
        SchemaListDynamicFieldsResponseModel ListDynamicFields(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListDynamicFieldsResponseModel</returns>
        ApiResponse<SchemaListDynamicFieldsResponseModel> ListDynamicFieldsWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListFieldTypesResponseModel</returns>
        SchemaListFieldTypesResponseModel ListSchemaFieldTypes(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListFieldTypesResponseModel</returns>
        ApiResponse<SchemaListFieldTypesResponseModel> ListSchemaFieldTypesWithHttpInfo(IndexTypeModel indexType, string indexName);
        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListFieldsResponseModel</returns>
        SchemaListFieldsResponseModel ListSchemaFields(IndexTypeModel indexType, string indexName);

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListFieldsResponseModel</returns>
        ApiResponse<SchemaListFieldsResponseModel> ListSchemaFieldsWithHttpInfo(IndexTypeModel indexType, string indexName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetDynamicFieldInfoResponseModel</returns>
        System.Threading.Tasks.Task<SchemaGetDynamicFieldInfoResponseModel> GetDynamicFieldInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetDynamicFieldInfoResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaGetDynamicFieldInfoResponseModel>> GetDynamicFieldInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetFieldInfoResponseModel</returns>
        System.Threading.Tasks.Task<SchemaGetFieldInfoResponseModel> GetFieldInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetFieldInfoResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaGetFieldInfoResponseModel>> GetFieldInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetFieldTypeInfoResponseModel</returns>
        System.Threading.Tasks.Task<SchemaGetFieldTypeInfoResponseModel> GetFieldTypeInfoAsync(IndexTypeModel indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetFieldTypeInfoResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaGetFieldTypeInfoResponseModel>> GetFieldTypeInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaInfoResponseModel</returns>
        System.Threading.Tasks.Task<SchemaInfoResponseModel> GetSchemaInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaInfoResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaInfoResponseModel>> GetSchemaInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaNameResponseModel</returns>
        System.Threading.Tasks.Task<SchemaNameResponseModel> GetSchemaNameAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaNameResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaNameResponseModel>> GetSchemaNameWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaSimilarityResponseModel</returns>
        System.Threading.Tasks.Task<SchemaSimilarityResponseModel> GetSchemaSimilarityAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaSimilarityResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaSimilarityResponseModel>> GetSchemaSimilarityWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaUniqueKeyResponseModel</returns>
        System.Threading.Tasks.Task<SchemaUniqueKeyResponseModel> GetSchemaUniqueKeyAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaUniqueKeyResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaUniqueKeyResponseModel>> GetSchemaUniqueKeyWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaVersionResponseModel</returns>
        System.Threading.Tasks.Task<SchemaVersionResponseModel> GetSchemaVersionAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaVersionResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaVersionResponseModel>> GetSchemaVersionWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaZkVersionResponseModel</returns>
        System.Threading.Tasks.Task<SchemaZkVersionResponseModel> GetSchemaZkVersionAsync(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaZkVersionResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaZkVersionResponseModel>> GetSchemaZkVersionWithHttpInfoAsync(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListCopyFieldsResponseModel</returns>
        System.Threading.Tasks.Task<SchemaListCopyFieldsResponseModel> ListCopyFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListCopyFieldsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaListCopyFieldsResponseModel>> ListCopyFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListDynamicFieldsResponseModel</returns>
        System.Threading.Tasks.Task<SchemaListDynamicFieldsResponseModel> ListDynamicFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListDynamicFieldsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaListDynamicFieldsResponseModel>> ListDynamicFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListFieldTypesResponseModel</returns>
        System.Threading.Tasks.Task<SchemaListFieldTypesResponseModel> ListSchemaFieldTypesAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListFieldTypesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaListFieldTypesResponseModel>> ListSchemaFieldTypesWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListFieldsResponseModel</returns>
        System.Threading.Tasks.Task<SchemaListFieldsResponseModel> ListSchemaFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListFieldsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaListFieldsResponseModel>> ListSchemaFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : ISchemaApiSync, ISchemaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : IDisposable, ISchemaApi
    {
        private SolrClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SchemaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SchemaApi(string basePath)
        {
            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SchemaApi(SolrClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SchemaApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SchemaApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                new SolrClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SchemaApi(HttpClient client, SolrClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SolrClient.Client.Configuration.MergeConfigurations(
                SolrClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SolrClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SchemaApi(SolrClient.Client.ISynchronousClient client, SolrClient.Client.IAsynchronousClient asyncClient, SolrClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SolrClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SolrClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SolrClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SolrClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SolrClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SolrClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>SchemaGetDynamicFieldInfoResponseModel</returns>
        public SchemaGetDynamicFieldInfoResponseModel GetDynamicFieldInfo(IndexTypeModel indexType, string indexName, string fieldName)
        {
            SolrClient.Client.ApiResponse<SchemaGetDynamicFieldInfoResponseModel> localVarResponse = GetDynamicFieldInfoWithHttpInfo(indexType, indexName, fieldName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of SchemaGetDynamicFieldInfoResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaGetDynamicFieldInfoResponseModel> GetDynamicFieldInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetDynamicFieldInfo");

            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldName' when calling SchemaApi->GetDynamicFieldInfo");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldName", SolrClient.Client.ClientUtils.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaGetDynamicFieldInfoResponseModel>("/{indexType}/{indexName}/schema/dynamicfields/{fieldName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicFieldInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetDynamicFieldInfoResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaGetDynamicFieldInfoResponseModel> GetDynamicFieldInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaGetDynamicFieldInfoResponseModel> localVarResponse = await GetDynamicFieldInfoWithHttpInfoAsync(indexType, indexName, fieldName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetDynamicFieldInfoResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaGetDynamicFieldInfoResponseModel>> GetDynamicFieldInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetDynamicFieldInfo");

            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldName' when calling SchemaApi->GetDynamicFieldInfo");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldName", SolrClient.Client.ClientUtils.ParameterToString(fieldName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaGetDynamicFieldInfoResponseModel>("/{indexType}/{indexName}/schema/dynamicfields/{fieldName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDynamicFieldInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>SchemaGetFieldInfoResponseModel</returns>
        public SchemaGetFieldInfoResponseModel GetFieldInfo(IndexTypeModel indexType, string indexName, string fieldName)
        {
            SolrClient.Client.ApiResponse<SchemaGetFieldInfoResponseModel> localVarResponse = GetFieldInfoWithHttpInfo(indexType, indexName, fieldName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of SchemaGetFieldInfoResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaGetFieldInfoResponseModel> GetFieldInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetFieldInfo");

            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldName' when calling SchemaApi->GetFieldInfo");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldName", SolrClient.Client.ClientUtils.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaGetFieldInfoResponseModel>("/{indexType}/{indexName}/schema/fields/{fieldName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetFieldInfoResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaGetFieldInfoResponseModel> GetFieldInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaGetFieldInfoResponseModel> localVarResponse = await GetFieldInfoWithHttpInfoAsync(indexType, indexName, fieldName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetFieldInfoResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaGetFieldInfoResponseModel>> GetFieldInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetFieldInfo");

            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldName' when calling SchemaApi->GetFieldInfo");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldName", SolrClient.Client.ClientUtils.ParameterToString(fieldName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaGetFieldInfoResponseModel>("/{indexType}/{indexName}/schema/fields/{fieldName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <returns>SchemaGetFieldTypeInfoResponseModel</returns>
        public SchemaGetFieldTypeInfoResponseModel GetFieldTypeInfo(IndexTypeModel indexType, string indexName, string fieldTypeName)
        {
            SolrClient.Client.ApiResponse<SchemaGetFieldTypeInfoResponseModel> localVarResponse = GetFieldTypeInfoWithHttpInfo(indexType, indexName, fieldTypeName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <returns>ApiResponse of SchemaGetFieldTypeInfoResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaGetFieldTypeInfoResponseModel> GetFieldTypeInfoWithHttpInfo(IndexTypeModel indexType, string indexName, string fieldTypeName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetFieldTypeInfo");

            // verify the required parameter 'fieldTypeName' is set
            if (fieldTypeName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldTypeName' when calling SchemaApi->GetFieldTypeInfo");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldTypeName", SolrClient.Client.ClientUtils.ParameterToString(fieldTypeName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaGetFieldTypeInfoResponseModel>("/{indexType}/{indexName}/schema/fieldtypes/{fieldTypeName}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTypeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaGetFieldTypeInfoResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaGetFieldTypeInfoResponseModel> GetFieldTypeInfoAsync(IndexTypeModel indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaGetFieldTypeInfoResponseModel> localVarResponse = await GetFieldTypeInfoWithHttpInfoAsync(indexType, indexName, fieldTypeName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaGetFieldTypeInfoResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaGetFieldTypeInfoResponseModel>> GetFieldTypeInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetFieldTypeInfo");

            // verify the required parameter 'fieldTypeName' is set
            if (fieldTypeName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'fieldTypeName' when calling SchemaApi->GetFieldTypeInfo");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            localVarRequestOptions.PathParameters.Add("fieldTypeName", SolrClient.Client.ClientUtils.ParameterToString(fieldTypeName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaGetFieldTypeInfoResponseModel>("/{indexType}/{indexName}/schema/fieldtypes/{fieldTypeName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTypeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaInfoResponseModel</returns>
        public SchemaInfoResponseModel GetSchemaInfo(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaInfoResponseModel> localVarResponse = GetSchemaInfoWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaInfoResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaInfoResponseModel> GetSchemaInfoWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaInfo");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaInfoResponseModel>("/{indexType}/{indexName}/schema", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaInfoResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaInfoResponseModel> GetSchemaInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaInfoResponseModel> localVarResponse = await GetSchemaInfoWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaInfoResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaInfoResponseModel>> GetSchemaInfoWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaInfo");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaInfoResponseModel>("/{indexType}/{indexName}/schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaNameResponseModel</returns>
        public SchemaNameResponseModel GetSchemaName(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaNameResponseModel> localVarResponse = GetSchemaNameWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaNameResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaNameResponseModel> GetSchemaNameWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaName");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaNameResponseModel>("/{indexType}/{indexName}/schema/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaNameResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaNameResponseModel> GetSchemaNameAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaNameResponseModel> localVarResponse = await GetSchemaNameWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaNameResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaNameResponseModel>> GetSchemaNameWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaName");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaNameResponseModel>("/{indexType}/{indexName}/schema/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaSimilarityResponseModel</returns>
        public SchemaSimilarityResponseModel GetSchemaSimilarity(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaSimilarityResponseModel> localVarResponse = GetSchemaSimilarityWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaSimilarityResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaSimilarityResponseModel> GetSchemaSimilarityWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaSimilarity");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaSimilarityResponseModel>("/{indexType}/{indexName}/schema/similarity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaSimilarity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaSimilarityResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaSimilarityResponseModel> GetSchemaSimilarityAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaSimilarityResponseModel> localVarResponse = await GetSchemaSimilarityWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaSimilarityResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaSimilarityResponseModel>> GetSchemaSimilarityWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaSimilarity");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaSimilarityResponseModel>("/{indexType}/{indexName}/schema/similarity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaSimilarity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaUniqueKeyResponseModel</returns>
        public SchemaUniqueKeyResponseModel GetSchemaUniqueKey(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaUniqueKeyResponseModel> localVarResponse = GetSchemaUniqueKeyWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaUniqueKeyResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaUniqueKeyResponseModel> GetSchemaUniqueKeyWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaUniqueKey");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaUniqueKeyResponseModel>("/{indexType}/{indexName}/schema/uniquekey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaUniqueKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaUniqueKeyResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaUniqueKeyResponseModel> GetSchemaUniqueKeyAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaUniqueKeyResponseModel> localVarResponse = await GetSchemaUniqueKeyWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaUniqueKeyResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaUniqueKeyResponseModel>> GetSchemaUniqueKeyWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaUniqueKey");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaUniqueKeyResponseModel>("/{indexType}/{indexName}/schema/uniquekey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaUniqueKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaVersionResponseModel</returns>
        public SchemaVersionResponseModel GetSchemaVersion(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaVersionResponseModel> localVarResponse = GetSchemaVersionWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaVersionResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaVersionResponseModel> GetSchemaVersionWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaVersion");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaVersionResponseModel>("/{indexType}/{indexName}/schema/version", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaVersionResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaVersionResponseModel> GetSchemaVersionAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaVersionResponseModel> localVarResponse = await GetSchemaVersionWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaVersionResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaVersionResponseModel>> GetSchemaVersionWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaVersion");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaVersionResponseModel>("/{indexType}/{indexName}/schema/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <returns>SchemaZkVersionResponseModel</returns>
        public SchemaZkVersionResponseModel GetSchemaZkVersion(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?))
        {
            SolrClient.Client.ApiResponse<SchemaZkVersionResponseModel> localVarResponse = GetSchemaZkVersionWithHttpInfo(indexType, indexName, refreshIfBelowVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <returns>ApiResponse of SchemaZkVersionResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaZkVersionResponseModel> GetSchemaZkVersionWithHttpInfo(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaZkVersion");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            if (refreshIfBelowVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "refreshIfBelowVersion", refreshIfBelowVersion));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaZkVersionResponseModel>("/{indexType}/{indexName}/schema/zkversion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaZkVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaZkVersionResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaZkVersionResponseModel> GetSchemaZkVersionAsync(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaZkVersionResponseModel> localVarResponse = await GetSchemaZkVersionWithHttpInfoAsync(indexType, indexName, refreshIfBelowVersion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaZkVersionResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaZkVersionResponseModel>> GetSchemaZkVersionWithHttpInfoAsync(IndexTypeModel indexType, string indexName, int? refreshIfBelowVersion = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->GetSchemaZkVersion");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter
            if (refreshIfBelowVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SolrClient.Client.ClientUtils.ParameterToMultiMap("", "refreshIfBelowVersion", refreshIfBelowVersion));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaZkVersionResponseModel>("/{indexType}/{indexName}/schema/zkversion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaZkVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListCopyFieldsResponseModel</returns>
        public SchemaListCopyFieldsResponseModel ListCopyFields(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaListCopyFieldsResponseModel> localVarResponse = ListCopyFieldsWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListCopyFieldsResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaListCopyFieldsResponseModel> ListCopyFieldsWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListCopyFields");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaListCopyFieldsResponseModel>("/{indexType}/{indexName}/schema/copyfields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCopyFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListCopyFieldsResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaListCopyFieldsResponseModel> ListCopyFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaListCopyFieldsResponseModel> localVarResponse = await ListCopyFieldsWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListCopyFieldsResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaListCopyFieldsResponseModel>> ListCopyFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListCopyFields");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaListCopyFieldsResponseModel>("/{indexType}/{indexName}/schema/copyfields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCopyFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListDynamicFieldsResponseModel</returns>
        public SchemaListDynamicFieldsResponseModel ListDynamicFields(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaListDynamicFieldsResponseModel> localVarResponse = ListDynamicFieldsWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListDynamicFieldsResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaListDynamicFieldsResponseModel> ListDynamicFieldsWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListDynamicFields");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaListDynamicFieldsResponseModel>("/{indexType}/{indexName}/schema/dynamicfields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDynamicFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListDynamicFieldsResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaListDynamicFieldsResponseModel> ListDynamicFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaListDynamicFieldsResponseModel> localVarResponse = await ListDynamicFieldsWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListDynamicFieldsResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaListDynamicFieldsResponseModel>> ListDynamicFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListDynamicFields");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaListDynamicFieldsResponseModel>("/{indexType}/{indexName}/schema/dynamicfields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDynamicFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListFieldTypesResponseModel</returns>
        public SchemaListFieldTypesResponseModel ListSchemaFieldTypes(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaListFieldTypesResponseModel> localVarResponse = ListSchemaFieldTypesWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListFieldTypesResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaListFieldTypesResponseModel> ListSchemaFieldTypesWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListSchemaFieldTypes");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaListFieldTypesResponseModel>("/{indexType}/{indexName}/schema/fieldtypes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFieldTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListFieldTypesResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaListFieldTypesResponseModel> ListSchemaFieldTypesAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaListFieldTypesResponseModel> localVarResponse = await ListSchemaFieldTypesWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListFieldTypesResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaListFieldTypesResponseModel>> ListSchemaFieldTypesWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListSchemaFieldTypes");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaListFieldTypesResponseModel>("/{indexType}/{indexName}/schema/fieldtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFieldTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>SchemaListFieldsResponseModel</returns>
        public SchemaListFieldsResponseModel ListSchemaFields(IndexTypeModel indexType, string indexName)
        {
            SolrClient.Client.ApiResponse<SchemaListFieldsResponseModel> localVarResponse = ListSchemaFieldsWithHttpInfo(indexType, indexName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <returns>ApiResponse of SchemaListFieldsResponseModel</returns>
        public SolrClient.Client.ApiResponse<SchemaListFieldsResponseModel> ListSchemaFieldsWithHttpInfo(IndexTypeModel indexType, string indexName)
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListSchemaFields");

            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SchemaListFieldsResponseModel>("/{indexType}/{indexName}/schema/fields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaListFieldsResponseModel</returns>
        public async System.Threading.Tasks.Task<SchemaListFieldsResponseModel> ListSchemaFieldsAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            SolrClient.Client.ApiResponse<SchemaListFieldsResponseModel> localVarResponse = await ListSchemaFieldsWithHttpInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="SolrClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaListFieldsResponseModel)</returns>
        public async System.Threading.Tasks.Task<SolrClient.Client.ApiResponse<SchemaListFieldsResponseModel>> ListSchemaFieldsWithHttpInfoAsync(IndexTypeModel indexType, string indexName, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'indexName' is set
            if (indexName == null)
                throw new SolrClient.Client.ApiException(400, "Missing required parameter 'indexName' when calling SchemaApi->ListSchemaFields");


            SolrClient.Client.RequestOptions localVarRequestOptions = new SolrClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = SolrClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SolrClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("indexType", SolrClient.Client.ClientUtils.ParameterToString(indexType)); // path parameter
            localVarRequestOptions.PathParameters.Add("indexName", SolrClient.Client.ClientUtils.ParameterToString(indexName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaListFieldsResponseModel>("/{indexType}/{indexName}/schema/fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
