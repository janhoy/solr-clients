/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = SolrClient.Client.FileParameter;
using OpenAPIDateConverter = SolrClient.Client.OpenAPIDateConverter;

namespace SolrClient.Model
{
    /// <summary>
    /// CollectionBackupDetailsModel
    /// </summary>
    [DataContract(Name = "CollectionBackupDetails")]
    public partial class CollectionBackupDetailsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupDetailsModel" /> class.
        /// </summary>
        /// <param name="backupId">backupId.</param>
        /// <param name="indexVersion">indexVersion.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="indexFileCount">indexFileCount.</param>
        /// <param name="indexSizeMB">indexSizeMB.</param>
        /// <param name="shardBackupIds">shardBackupIds.</param>
        /// <param name="collectionAlias">collectionAlias.</param>
        /// <param name="extraProperties">extraProperties.</param>
        /// <param name="collectionConfigName">collectionConfigName.</param>
        public CollectionBackupDetailsModel(int backupId = default(int), string indexVersion = default(string), string startTime = default(string), string endTime = default(string), int indexFileCount = default(int), double indexSizeMB = default(double), Dictionary<string, string> shardBackupIds = default(Dictionary<string, string>), string collectionAlias = default(string), Dictionary<string, string> extraProperties = default(Dictionary<string, string>), string collectionConfigName = default(string))
        {
            this.BackupId = backupId;
            this.IndexVersion = indexVersion;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.IndexFileCount = indexFileCount;
            this.IndexSizeMB = indexSizeMB;
            this.ShardBackupIds = shardBackupIds;
            this.CollectionAlias = collectionAlias;
            this.ExtraProperties = extraProperties;
            this.CollectionConfigName = collectionConfigName;
        }

        /// <summary>
        /// Gets or Sets BackupId
        /// </summary>
        [DataMember(Name = "backupId", EmitDefaultValue = false)]
        public int BackupId { get; set; }

        /// <summary>
        /// Gets or Sets IndexVersion
        /// </summary>
        [DataMember(Name = "indexVersion", EmitDefaultValue = false)]
        public string IndexVersion { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets IndexFileCount
        /// </summary>
        [DataMember(Name = "indexFileCount", EmitDefaultValue = false)]
        public int IndexFileCount { get; set; }

        /// <summary>
        /// Gets or Sets IndexSizeMB
        /// </summary>
        [DataMember(Name = "indexSizeMB", EmitDefaultValue = false)]
        public double IndexSizeMB { get; set; }

        /// <summary>
        /// Gets or Sets ShardBackupIds
        /// </summary>
        [DataMember(Name = "shardBackupIds", EmitDefaultValue = false)]
        public Dictionary<string, string> ShardBackupIds { get; set; }

        /// <summary>
        /// Gets or Sets CollectionAlias
        /// </summary>
        [DataMember(Name = "collectionAlias", EmitDefaultValue = false)]
        public string CollectionAlias { get; set; }

        /// <summary>
        /// Gets or Sets ExtraProperties
        /// </summary>
        [DataMember(Name = "extraProperties", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtraProperties { get; set; }

        /// <summary>
        /// Gets or Sets CollectionConfigName
        /// </summary>
        [DataMember(Name = "collection.configName", EmitDefaultValue = false)]
        public string CollectionConfigName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CollectionBackupDetailsModel {\n");
            sb.Append("  BackupId: ").Append(BackupId).Append("\n");
            sb.Append("  IndexVersion: ").Append(IndexVersion).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  IndexFileCount: ").Append(IndexFileCount).Append("\n");
            sb.Append("  IndexSizeMB: ").Append(IndexSizeMB).Append("\n");
            sb.Append("  ShardBackupIds: ").Append(ShardBackupIds).Append("\n");
            sb.Append("  CollectionAlias: ").Append(CollectionAlias).Append("\n");
            sb.Append("  ExtraProperties: ").Append(ExtraProperties).Append("\n");
            sb.Append("  CollectionConfigName: ").Append(CollectionConfigName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
