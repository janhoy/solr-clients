/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = SolrClient.Client.FileParameter;
using OpenAPIDateConverter = SolrClient.Client.OpenAPIDateConverter;

namespace SolrClient.Model
{
    /// <summary>
    /// CreateCoreSnapshotResponseModel
    /// </summary>
    [DataContract(Name = "CreateCoreSnapshotResponse")]
    public partial class CreateCoreSnapshotResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCoreSnapshotResponseModel" /> class.
        /// </summary>
        /// <param name="core">The name of the core..</param>
        /// <param name="indexDirPath">The path to the directory containing the index files..</param>
        /// <param name="generation">The generation value for the created snapshot..</param>
        /// <param name="files">The list of index filenames contained within the created snapshot..</param>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="error">error.</param>
        /// <param name="commitName">The name of the created snapshot..</param>
        public CreateCoreSnapshotResponseModel(string core = default(string), string indexDirPath = default(string), long generation = default(long), Collection<string> files = default(Collection<string>), ResponseHeaderModel responseHeader = default(ResponseHeaderModel), ErrorInfoModel error = default(ErrorInfoModel), string commitName = default(string))
        {
            this.Core = core;
            this.IndexDirPath = indexDirPath;
            this.Generation = generation;
            this.Files = files;
            this.ResponseHeader = responseHeader;
            this.Error = error;
            this.CommitName = commitName;
        }

        /// <summary>
        /// The name of the core.
        /// </summary>
        /// <value>The name of the core.</value>
        [DataMember(Name = "core", EmitDefaultValue = false)]
        public string Core { get; set; }

        /// <summary>
        /// The path to the directory containing the index files.
        /// </summary>
        /// <value>The path to the directory containing the index files.</value>
        [DataMember(Name = "indexDirPath", EmitDefaultValue = false)]
        public string IndexDirPath { get; set; }

        /// <summary>
        /// The generation value for the created snapshot.
        /// </summary>
        /// <value>The generation value for the created snapshot.</value>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public long Generation { get; set; }

        /// <summary>
        /// The list of index filenames contained within the created snapshot.
        /// </summary>
        /// <value>The list of index filenames contained within the created snapshot.</value>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        public Collection<string> Files { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name = "responseHeader", EmitDefaultValue = false)]
        public ResponseHeaderModel ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public ErrorInfoModel Error { get; set; }

        /// <summary>
        /// The name of the created snapshot.
        /// </summary>
        /// <value>The name of the created snapshot.</value>
        [DataMember(Name = "commitName", EmitDefaultValue = false)]
        public string CommitName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCoreSnapshotResponseModel {\n");
            sb.Append("  Core: ").Append(Core).Append("\n");
            sb.Append("  IndexDirPath: ").Append(IndexDirPath).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  CommitName: ").Append(CommitName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
