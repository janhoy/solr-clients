/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = SolrClient.Client.FileParameter;
using OpenAPIDateConverter = SolrClient.Client.OpenAPIDateConverter;

namespace SolrClient.Model
{
    /// <summary>
    /// CreateReplicaRequestBodyModel
    /// </summary>
    [DataContract(Name = "CreateReplicaRequestBody")]
    public partial class CreateReplicaRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReplicaRequestBodyModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="instanceDir">instanceDir.</param>
        /// <param name="dataDir">dataDir.</param>
        /// <param name="ulogDir">ulogDir.</param>
        /// <param name="route">route.</param>
        /// <param name="nrtReplicas">nrtReplicas.</param>
        /// <param name="tlogReplicas">tlogReplicas.</param>
        /// <param name="pullReplicas">pullReplicas.</param>
        /// <param name="waitForFinalState">waitForFinalState.</param>
        /// <param name="followAliases">followAliases.</param>
        /// <param name="async">async.</param>
        /// <param name="node">node.</param>
        /// <param name="skipNodeAssignment">skipNodeAssignment.</param>
        /// <param name="properties">properties.</param>
        /// <param name="nodeSet">nodeSet.</param>
        public CreateReplicaRequestBodyModel(string name = default(string), string type = default(string), string instanceDir = default(string), string dataDir = default(string), string ulogDir = default(string), string route = default(string), int nrtReplicas = default(int), int tlogReplicas = default(int), int pullReplicas = default(int), bool waitForFinalState = default(bool), bool followAliases = default(bool), string async = default(string), string node = default(string), bool skipNodeAssignment = default(bool), Dictionary<string, string> properties = default(Dictionary<string, string>), Collection<string> nodeSet = default(Collection<string>))
        {
            this.Name = name;
            this.Type = type;
            this.InstanceDir = instanceDir;
            this.DataDir = dataDir;
            this.UlogDir = ulogDir;
            this.Route = route;
            this.NrtReplicas = nrtReplicas;
            this.TlogReplicas = tlogReplicas;
            this.PullReplicas = pullReplicas;
            this.WaitForFinalState = waitForFinalState;
            this.FollowAliases = followAliases;
            this.Async = async;
            this.Node = node;
            this.SkipNodeAssignment = skipNodeAssignment;
            this.Properties = properties;
            this.NodeSet = nodeSet;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets InstanceDir
        /// </summary>
        [DataMember(Name = "instanceDir", EmitDefaultValue = false)]
        public string InstanceDir { get; set; }

        /// <summary>
        /// Gets or Sets DataDir
        /// </summary>
        [DataMember(Name = "dataDir", EmitDefaultValue = false)]
        public string DataDir { get; set; }

        /// <summary>
        /// Gets or Sets UlogDir
        /// </summary>
        [DataMember(Name = "ulogDir", EmitDefaultValue = false)]
        public string UlogDir { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name = "route", EmitDefaultValue = false)]
        public string Route { get; set; }

        /// <summary>
        /// Gets or Sets NrtReplicas
        /// </summary>
        [DataMember(Name = "nrtReplicas", EmitDefaultValue = false)]
        public int NrtReplicas { get; set; }

        /// <summary>
        /// Gets or Sets TlogReplicas
        /// </summary>
        [DataMember(Name = "tlogReplicas", EmitDefaultValue = false)]
        public int TlogReplicas { get; set; }

        /// <summary>
        /// Gets or Sets PullReplicas
        /// </summary>
        [DataMember(Name = "pullReplicas", EmitDefaultValue = false)]
        public int PullReplicas { get; set; }

        /// <summary>
        /// Gets or Sets WaitForFinalState
        /// </summary>
        [DataMember(Name = "waitForFinalState", EmitDefaultValue = true)]
        public bool WaitForFinalState { get; set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [DataMember(Name = "followAliases", EmitDefaultValue = true)]
        public bool FollowAliases { get; set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [DataMember(Name = "async", EmitDefaultValue = false)]
        public string Async { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", EmitDefaultValue = false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets SkipNodeAssignment
        /// </summary>
        [DataMember(Name = "skipNodeAssignment", EmitDefaultValue = true)]
        public bool SkipNodeAssignment { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets NodeSet
        /// </summary>
        [DataMember(Name = "nodeSet", EmitDefaultValue = false)]
        public Collection<string> NodeSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateReplicaRequestBodyModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InstanceDir: ").Append(InstanceDir).Append("\n");
            sb.Append("  DataDir: ").Append(DataDir).Append("\n");
            sb.Append("  UlogDir: ").Append(UlogDir).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  NrtReplicas: ").Append(NrtReplicas).Append("\n");
            sb.Append("  TlogReplicas: ").Append(TlogReplicas).Append("\n");
            sb.Append("  PullReplicas: ").Append(PullReplicas).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  SkipNodeAssignment: ").Append(SkipNodeAssignment).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  NodeSet: ").Append(NodeSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
