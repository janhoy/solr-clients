/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = SolrClient.Client.FileParameter;
using OpenAPIDateConverter = SolrClient.Client.OpenAPIDateConverter;

namespace SolrClient.Model
{
    /// <summary>
    /// ReplicationBackupRequestBodyModel
    /// </summary>
    [DataContract(Name = "ReplicationBackupRequestBody")]
    public partial class ReplicationBackupRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationBackupRequestBodyModel" /> class.
        /// </summary>
        /// <param name="location">The path where the backup will be created.</param>
        /// <param name="name">The backup will be created in a directory called snapshot.&lt;name&gt;.</param>
        /// <param name="numberToKeep">The number of backups to keep..</param>
        /// <param name="repository">The name of the repository to be used for e backup..</param>
        /// <param name="commitName">The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command..</param>
        public ReplicationBackupRequestBodyModel(string location = default(string), string name = default(string), int numberToKeep = default(int), string repository = default(string), string commitName = default(string))
        {
            this.Location = location;
            this.Name = name;
            this.NumberToKeep = numberToKeep;
            this.Repository = repository;
            this.CommitName = commitName;
        }

        /// <summary>
        /// The path where the backup will be created
        /// </summary>
        /// <value>The path where the backup will be created</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// The backup will be created in a directory called snapshot.&lt;name&gt;
        /// </summary>
        /// <value>The backup will be created in a directory called snapshot.&lt;name&gt;</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The number of backups to keep.
        /// </summary>
        /// <value>The number of backups to keep.</value>
        [DataMember(Name = "numberToKeep", EmitDefaultValue = false)]
        public int NumberToKeep { get; set; }

        /// <summary>
        /// The name of the repository to be used for e backup.
        /// </summary>
        /// <value>The name of the repository to be used for e backup.</value>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public string Repository { get; set; }

        /// <summary>
        /// The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.
        /// </summary>
        /// <value>The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.</value>
        [DataMember(Name = "commitName", EmitDefaultValue = false)]
        public string CommitName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplicationBackupRequestBodyModel {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberToKeep: ").Append(NumberToKeep).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  CommitName: ").Append(CommitName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
