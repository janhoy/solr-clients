/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = SolrClient.Client.FileParameter;
using OpenAPIDateConverter = SolrClient.Client.OpenAPIDateConverter;

namespace SolrClient.Model
{
    /// <summary>
    /// UpdateAliasPropertiesRequestBodyModel
    /// </summary>
    [DataContract(Name = "UpdateAliasPropertiesRequestBody")]
    public partial class UpdateAliasPropertiesRequestBodyModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAliasPropertiesRequestBodyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAliasPropertiesRequestBodyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAliasPropertiesRequestBodyModel" /> class.
        /// </summary>
        /// <param name="properties">Properties and values to be updated on alias. (required).</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously..</param>
        public UpdateAliasPropertiesRequestBodyModel(Dictionary<string, Object> properties = default(Dictionary<string, Object>), string async = default(string))
        {
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for UpdateAliasPropertiesRequestBodyModel and cannot be null");
            }
            this.Properties = properties;
            this.Async = async;
        }

        /// <summary>
        /// Properties and values to be updated on alias.
        /// </summary>
        /// <value>Properties and values to be updated on alias.</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [DataMember(Name = "async", EmitDefaultValue = false)]
        public string Async { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAliasPropertiesRequestBodyModel {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
