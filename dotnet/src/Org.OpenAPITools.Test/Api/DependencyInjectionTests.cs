/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var aliasPropertiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAliasPropertiesApi>();
            Assert.True(aliasPropertiesApi.HttpClient.BaseAddress != null);

            var aliasesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAliasesApi>();
            Assert.True(aliasesApi.HttpClient.BaseAddress != null);

            var clusterApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClusterApi>();
            Assert.True(clusterApi.HttpClient.BaseAddress != null);

            var clusterPropertiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClusterPropertiesApi>();
            Assert.True(clusterPropertiesApi.HttpClient.BaseAddress != null);

            var collectionBackupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICollectionBackupsApi>();
            Assert.True(collectionBackupsApi.HttpClient.BaseAddress != null);

            var collectionPropertiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICollectionPropertiesApi>();
            Assert.True(collectionPropertiesApi.HttpClient.BaseAddress != null);

            var collectionSnapshotsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICollectionSnapshotsApi>();
            Assert.True(collectionSnapshotsApi.HttpClient.BaseAddress != null);

            var collectionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICollectionsApi>();
            Assert.True(collectionsApi.HttpClient.BaseAddress != null);

            var configsetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConfigsetsApi>();
            Assert.True(configsetsApi.HttpClient.BaseAddress != null);

            var coreBackupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICoreBackupsApi>();
            Assert.True(coreBackupsApi.HttpClient.BaseAddress != null);

            var coreReplicationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICoreReplicationApi>();
            Assert.True(coreReplicationApi.HttpClient.BaseAddress != null);

            var coreSnapshotsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICoreSnapshotsApi>();
            Assert.True(coreSnapshotsApi.HttpClient.BaseAddress != null);

            var coresApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICoresApi>();
            Assert.True(coresApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var fileStoreApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFileStoreApi>();
            Assert.True(fileStoreApi.HttpClient.BaseAddress != null);

            var loggingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILoggingApi>();
            Assert.True(loggingApi.HttpClient.BaseAddress != null);

            var nodeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<INodeApi>();
            Assert.True(nodeApi.HttpClient.BaseAddress != null);

            var queryingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IQueryingApi>();
            Assert.True(queryingApi.HttpClient.BaseAddress != null);

            var replicaPropertiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReplicaPropertiesApi>();
            Assert.True(replicaPropertiesApi.HttpClient.BaseAddress != null);

            var replicasApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReplicasApi>();
            Assert.True(replicasApi.HttpClient.BaseAddress != null);

            var replicationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReplicationApi>();
            Assert.True(replicationApi.HttpClient.BaseAddress != null);

            var replicationBackupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReplicationBackupsApi>();
            Assert.True(replicationBackupsApi.HttpClient.BaseAddress != null);

            var schemaApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISchemaApi>();
            Assert.True(schemaApi.HttpClient.BaseAddress != null);

            var shardsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IShardsApi>();
            Assert.True(shardsApi.HttpClient.BaseAddress != null);

            var zookeeperReadApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IZookeeperReadApi>();
            Assert.True(zookeeperReadApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var aliasPropertiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAliasPropertiesApi>();
            Assert.True(aliasPropertiesApi.HttpClient.BaseAddress != null);

            var aliasesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAliasesApi>();
            Assert.True(aliasesApi.HttpClient.BaseAddress != null);

            var clusterApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClusterApi>();
            Assert.True(clusterApi.HttpClient.BaseAddress != null);

            var clusterPropertiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClusterPropertiesApi>();
            Assert.True(clusterPropertiesApi.HttpClient.BaseAddress != null);

            var collectionBackupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICollectionBackupsApi>();
            Assert.True(collectionBackupsApi.HttpClient.BaseAddress != null);

            var collectionPropertiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICollectionPropertiesApi>();
            Assert.True(collectionPropertiesApi.HttpClient.BaseAddress != null);

            var collectionSnapshotsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICollectionSnapshotsApi>();
            Assert.True(collectionSnapshotsApi.HttpClient.BaseAddress != null);

            var collectionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICollectionsApi>();
            Assert.True(collectionsApi.HttpClient.BaseAddress != null);

            var configsetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConfigsetsApi>();
            Assert.True(configsetsApi.HttpClient.BaseAddress != null);

            var coreBackupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICoreBackupsApi>();
            Assert.True(coreBackupsApi.HttpClient.BaseAddress != null);

            var coreReplicationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICoreReplicationApi>();
            Assert.True(coreReplicationApi.HttpClient.BaseAddress != null);

            var coreSnapshotsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICoreSnapshotsApi>();
            Assert.True(coreSnapshotsApi.HttpClient.BaseAddress != null);

            var coresApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICoresApi>();
            Assert.True(coresApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var fileStoreApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFileStoreApi>();
            Assert.True(fileStoreApi.HttpClient.BaseAddress != null);

            var loggingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILoggingApi>();
            Assert.True(loggingApi.HttpClient.BaseAddress != null);

            var nodeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<INodeApi>();
            Assert.True(nodeApi.HttpClient.BaseAddress != null);

            var queryingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IQueryingApi>();
            Assert.True(queryingApi.HttpClient.BaseAddress != null);

            var replicaPropertiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReplicaPropertiesApi>();
            Assert.True(replicaPropertiesApi.HttpClient.BaseAddress != null);

            var replicasApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReplicasApi>();
            Assert.True(replicasApi.HttpClient.BaseAddress != null);

            var replicationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReplicationApi>();
            Assert.True(replicationApi.HttpClient.BaseAddress != null);

            var replicationBackupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReplicationBackupsApi>();
            Assert.True(replicationBackupsApi.HttpClient.BaseAddress != null);

            var schemaApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISchemaApi>();
            Assert.True(schemaApi.HttpClient.BaseAddress != null);

            var shardsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IShardsApi>();
            Assert.True(shardsApi.HttpClient.BaseAddress != null);

            var zookeeperReadApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IZookeeperReadApi>();
            Assert.True(zookeeperReadApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var aliasPropertiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAliasPropertiesApi>();
            Assert.True(aliasPropertiesApi.HttpClient.BaseAddress != null);
            
            var aliasesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAliasesApi>();
            Assert.True(aliasesApi.HttpClient.BaseAddress != null);
            
            var clusterApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClusterApi>();
            Assert.True(clusterApi.HttpClient.BaseAddress != null);
            
            var clusterPropertiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClusterPropertiesApi>();
            Assert.True(clusterPropertiesApi.HttpClient.BaseAddress != null);
            
            var collectionBackupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICollectionBackupsApi>();
            Assert.True(collectionBackupsApi.HttpClient.BaseAddress != null);
            
            var collectionPropertiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICollectionPropertiesApi>();
            Assert.True(collectionPropertiesApi.HttpClient.BaseAddress != null);
            
            var collectionSnapshotsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICollectionSnapshotsApi>();
            Assert.True(collectionSnapshotsApi.HttpClient.BaseAddress != null);
            
            var collectionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICollectionsApi>();
            Assert.True(collectionsApi.HttpClient.BaseAddress != null);
            
            var configsetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConfigsetsApi>();
            Assert.True(configsetsApi.HttpClient.BaseAddress != null);
            
            var coreBackupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICoreBackupsApi>();
            Assert.True(coreBackupsApi.HttpClient.BaseAddress != null);
            
            var coreReplicationApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICoreReplicationApi>();
            Assert.True(coreReplicationApi.HttpClient.BaseAddress != null);
            
            var coreSnapshotsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICoreSnapshotsApi>();
            Assert.True(coreSnapshotsApi.HttpClient.BaseAddress != null);
            
            var coresApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICoresApi>();
            Assert.True(coresApi.HttpClient.BaseAddress != null);
            
            var defaultApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
            
            var fileStoreApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFileStoreApi>();
            Assert.True(fileStoreApi.HttpClient.BaseAddress != null);
            
            var loggingApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILoggingApi>();
            Assert.True(loggingApi.HttpClient.BaseAddress != null);
            
            var nodeApi = _hostUsingAddWithAClient.Services.GetRequiredService<INodeApi>();
            Assert.True(nodeApi.HttpClient.BaseAddress != null);
            
            var queryingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IQueryingApi>();
            Assert.True(queryingApi.HttpClient.BaseAddress != null);
            
            var replicaPropertiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReplicaPropertiesApi>();
            Assert.True(replicaPropertiesApi.HttpClient.BaseAddress != null);
            
            var replicasApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReplicasApi>();
            Assert.True(replicasApi.HttpClient.BaseAddress != null);
            
            var replicationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReplicationApi>();
            Assert.True(replicationApi.HttpClient.BaseAddress != null);
            
            var replicationBackupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReplicationBackupsApi>();
            Assert.True(replicationBackupsApi.HttpClient.BaseAddress != null);
            
            var schemaApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISchemaApi>();
            Assert.True(schemaApi.HttpClient.BaseAddress != null);
            
            var shardsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IShardsApi>();
            Assert.True(shardsApi.HttpClient.BaseAddress != null);
            
            var zookeeperReadApi = _hostUsingAddWithAClient.Services.GetRequiredService<IZookeeperReadApi>();
            Assert.True(zookeeperReadApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var aliasPropertiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAliasPropertiesApi>();
            Assert.True(aliasPropertiesApi.HttpClient.BaseAddress != null);

            var aliasesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAliasesApi>();
            Assert.True(aliasesApi.HttpClient.BaseAddress != null);

            var clusterApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClusterApi>();
            Assert.True(clusterApi.HttpClient.BaseAddress != null);

            var clusterPropertiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClusterPropertiesApi>();
            Assert.True(clusterPropertiesApi.HttpClient.BaseAddress != null);

            var collectionBackupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICollectionBackupsApi>();
            Assert.True(collectionBackupsApi.HttpClient.BaseAddress != null);

            var collectionPropertiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICollectionPropertiesApi>();
            Assert.True(collectionPropertiesApi.HttpClient.BaseAddress != null);

            var collectionSnapshotsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICollectionSnapshotsApi>();
            Assert.True(collectionSnapshotsApi.HttpClient.BaseAddress != null);

            var collectionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICollectionsApi>();
            Assert.True(collectionsApi.HttpClient.BaseAddress != null);

            var configsetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConfigsetsApi>();
            Assert.True(configsetsApi.HttpClient.BaseAddress != null);

            var coreBackupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICoreBackupsApi>();
            Assert.True(coreBackupsApi.HttpClient.BaseAddress != null);

            var coreReplicationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICoreReplicationApi>();
            Assert.True(coreReplicationApi.HttpClient.BaseAddress != null);

            var coreSnapshotsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICoreSnapshotsApi>();
            Assert.True(coreSnapshotsApi.HttpClient.BaseAddress != null);

            var coresApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICoresApi>();
            Assert.True(coresApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var fileStoreApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFileStoreApi>();
            Assert.True(fileStoreApi.HttpClient.BaseAddress != null);

            var loggingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILoggingApi>();
            Assert.True(loggingApi.HttpClient.BaseAddress != null);

            var nodeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<INodeApi>();
            Assert.True(nodeApi.HttpClient.BaseAddress != null);

            var queryingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IQueryingApi>();
            Assert.True(queryingApi.HttpClient.BaseAddress != null);

            var replicaPropertiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReplicaPropertiesApi>();
            Assert.True(replicaPropertiesApi.HttpClient.BaseAddress != null);

            var replicasApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReplicasApi>();
            Assert.True(replicasApi.HttpClient.BaseAddress != null);

            var replicationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReplicationApi>();
            Assert.True(replicationApi.HttpClient.BaseAddress != null);

            var replicationBackupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReplicationBackupsApi>();
            Assert.True(replicationBackupsApi.HttpClient.BaseAddress != null);

            var schemaApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISchemaApi>();
            Assert.True(schemaApi.HttpClient.BaseAddress != null);

            var shardsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IShardsApi>();
            Assert.True(shardsApi.HttpClient.BaseAddress != null);

            var zookeeperReadApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IZookeeperReadApi>();
            Assert.True(zookeeperReadApi.HttpClient.BaseAddress != null);
        }
    }
}
