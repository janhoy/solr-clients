/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ReplicasApi
    /// </summary>
    public sealed class ReplicasApiTests : ApiTestsBase
    {
        private readonly IReplicasApi _instance;

        public ReplicasApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IReplicasApi>();
        }

        /// <summary>
        /// Test CreateReplica
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateReplicaAsyncTest()
        {
            string collectionName = default!;
            string shardName = default!;
            Client.Option<CreateReplicaRequestBody> createReplicaRequestBody = default!;
            var response = await _instance.CreateReplicaAsync(collectionName, shardName, createReplicaRequestBody);
            var model = response.Default();
            Assert.IsType<SubResponseAccumulatingJerseyResponse>(model);
        }

        /// <summary>
        /// Test DeleteReplicaByName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReplicaByNameAsyncTest()
        {
            string collectionName = default!;
            string shardName = default!;
            string replicaName = default!;
            Client.Option<bool> followAliases = default!;
            Client.Option<bool> deleteInstanceDir = default!;
            Client.Option<bool> deleteDataDir = default!;
            Client.Option<bool> deleteIndex = default!;
            Client.Option<bool> onlyIfDown = default!;
            Client.Option<string> async = default!;
            var response = await _instance.DeleteReplicaByNameAsync(collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            var model = response.Default();
            Assert.IsType<SubResponseAccumulatingJerseyResponse>(model);
        }

        /// <summary>
        /// Test DeleteReplicasByCount
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReplicasByCountAsyncTest()
        {
            string collectionName = default!;
            string shardName = default!;
            Client.Option<int> count = default!;
            Client.Option<bool> followAliases = default!;
            Client.Option<bool> deleteInstanceDir = default!;
            Client.Option<bool> deleteDataDir = default!;
            Client.Option<bool> deleteIndex = default!;
            Client.Option<bool> onlyIfDown = default!;
            Client.Option<string> async = default!;
            var response = await _instance.DeleteReplicasByCountAsync(collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            var model = response.Default();
            Assert.IsType<SubResponseAccumulatingJerseyResponse>(model);
        }

        /// <summary>
        /// Test DeleteReplicasByCountAllShards
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReplicasByCountAllShardsAsyncTest()
        {
            string collectionName = default!;
            Client.Option<ScaleCollectionRequestBody> scaleCollectionRequestBody = default!;
            var response = await _instance.DeleteReplicasByCountAllShardsAsync(collectionName, scaleCollectionRequestBody);
            var model = response.Default();
            Assert.IsType<SubResponseAccumulatingJerseyResponse>(model);
        }
    }
}
