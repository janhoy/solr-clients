/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SchemaApi
    /// </summary>
    public sealed class SchemaApiTests : ApiTestsBase
    {
        private readonly ISchemaApi _instance;

        public SchemaApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISchemaApi>();
        }

        /// <summary>
        /// Test GetDynamicFieldInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDynamicFieldInfoAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            string fieldName = default!;
            var response = await _instance.GetDynamicFieldInfoAsync(indexType, indexName, fieldName);
            var model = response.Default();
            Assert.IsType<SchemaGetDynamicFieldInfoResponse>(model);
        }

        /// <summary>
        /// Test GetFieldInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFieldInfoAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            string fieldName = default!;
            var response = await _instance.GetFieldInfoAsync(indexType, indexName, fieldName);
            var model = response.Default();
            Assert.IsType<SchemaGetFieldInfoResponse>(model);
        }

        /// <summary>
        /// Test GetFieldTypeInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFieldTypeInfoAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            string fieldTypeName = default!;
            var response = await _instance.GetFieldTypeInfoAsync(indexType, indexName, fieldTypeName);
            var model = response.Default();
            Assert.IsType<SchemaGetFieldTypeInfoResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaInfoAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.GetSchemaInfoAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaInfoResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaNameAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.GetSchemaNameAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaNameResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaSimilarity
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaSimilarityAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.GetSchemaSimilarityAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaSimilarityResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaUniqueKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaUniqueKeyAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.GetSchemaUniqueKeyAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaUniqueKeyResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaVersion
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaVersionAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.GetSchemaVersionAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaVersionResponse>(model);
        }

        /// <summary>
        /// Test GetSchemaZkVersion
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSchemaZkVersionAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            Client.Option<int> refreshIfBelowVersion = default!;
            var response = await _instance.GetSchemaZkVersionAsync(indexType, indexName, refreshIfBelowVersion);
            var model = response.Default();
            Assert.IsType<SchemaZkVersionResponse>(model);
        }

        /// <summary>
        /// Test ListCopyFields
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListCopyFieldsAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.ListCopyFieldsAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaListCopyFieldsResponse>(model);
        }

        /// <summary>
        /// Test ListDynamicFields
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListDynamicFieldsAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.ListDynamicFieldsAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaListDynamicFieldsResponse>(model);
        }

        /// <summary>
        /// Test ListSchemaFieldTypes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListSchemaFieldTypesAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.ListSchemaFieldTypesAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaListFieldTypesResponse>(model);
        }

        /// <summary>
        /// Test ListSchemaFields
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListSchemaFieldsAsyncTest()
        {
            IndexType indexType = default!;
            string indexName = default!;
            var response = await _instance.ListSchemaFieldsAsync(indexType, indexName);
            var model = response.Default();
            Assert.IsType<SchemaListFieldsResponse>(model);
        }
    }
}
