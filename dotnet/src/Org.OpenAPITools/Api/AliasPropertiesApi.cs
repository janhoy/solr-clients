// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAliasPropertiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AliasPropertiesApiEvents Events { get; }

        /// <summary>
        /// Update a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="updateAliasPropertyRequestBody">Property value that needs to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateAliasPropertyApiResponse"/>&gt;</returns>
        Task<ICreateOrUpdateAliasPropertyApiResponse> CreateOrUpdateAliasPropertyAsync(string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="updateAliasPropertyRequestBody">Property value that needs to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateAliasPropertyApiResponse"/>?&gt;</returns>
        Task<ICreateOrUpdateAliasPropertyApiResponse?> CreateOrUpdateAliasPropertyOrDefaultAsync(string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasPropertyApiResponse"/>&gt;</returns>
        Task<IDeleteAliasPropertyApiResponse> DeleteAliasPropertyAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasPropertyApiResponse"/>?&gt;</returns>
        Task<IDeleteAliasPropertyApiResponse?> DeleteAliasPropertyOrDefaultAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasPropertyApiResponse"/>&gt;</returns>
        Task<IGetAliasPropertyApiResponse> GetAliasPropertyAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific property for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasPropertyApiResponse"/>?&gt;</returns>
        Task<IGetAliasPropertyApiResponse?> GetAliasPropertyOrDefaultAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get properties for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAliasPropertiesApiResponse"/>&gt;</returns>
        Task<IGetAllAliasPropertiesApiResponse> GetAllAliasPropertiesAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get properties for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAliasPropertiesApiResponse"/>?&gt;</returns>
        Task<IGetAllAliasPropertiesApiResponse?> GetAllAliasPropertiesOrDefaultAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update properties for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="updateAliasPropertiesRequestBody">Properties that need to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAliasPropertiesApiResponse"/>&gt;</returns>
        Task<IUpdateAliasPropertiesApiResponse> UpdateAliasPropertiesAsync(string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update properties for a collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="updateAliasPropertiesRequestBody">Properties that need to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAliasPropertiesApiResponse"/>?&gt;</returns>
        Task<IUpdateAliasPropertiesApiResponse?> UpdateAliasPropertiesOrDefaultAsync(string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOrUpdateAliasPropertyApiResponse"/>
    /// </summary>
    public interface ICreateOrUpdateAliasPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAliasPropertyApiResponse"/>
    /// </summary>
    public interface IDeleteAliasPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetAliasPropertyApiResponse"/>
    /// </summary>
    public interface IGetAliasPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.GetAliasPropertyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllAliasPropertiesApiResponse"/>
    /// </summary>
    public interface IGetAllAliasPropertiesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.GetAllAliasPropertiesResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAliasPropertiesApiResponse"/>
    /// </summary>
    public interface IUpdateAliasPropertiesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AliasPropertiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrUpdateAliasProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrUpdateAliasProperty;

        internal void ExecuteOnCreateOrUpdateAliasProperty(AliasPropertiesApi.CreateOrUpdateAliasPropertyApiResponse apiResponse)
        {
            OnCreateOrUpdateAliasProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrUpdateAliasProperty(Exception exception)
        {
            OnErrorCreateOrUpdateAliasProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAliasProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAliasProperty;

        internal void ExecuteOnDeleteAliasProperty(AliasPropertiesApi.DeleteAliasPropertyApiResponse apiResponse)
        {
            OnDeleteAliasProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAliasProperty(Exception exception)
        {
            OnErrorDeleteAliasProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAliasProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAliasProperty;

        internal void ExecuteOnGetAliasProperty(AliasPropertiesApi.GetAliasPropertyApiResponse apiResponse)
        {
            OnGetAliasProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAliasProperty(Exception exception)
        {
            OnErrorGetAliasProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllAliasProperties;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllAliasProperties;

        internal void ExecuteOnGetAllAliasProperties(AliasPropertiesApi.GetAllAliasPropertiesApiResponse apiResponse)
        {
            OnGetAllAliasProperties?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllAliasProperties(Exception exception)
        {
            OnErrorGetAllAliasProperties?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAliasProperties;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAliasProperties;

        internal void ExecuteOnUpdateAliasProperties(AliasPropertiesApi.UpdateAliasPropertiesApiResponse apiResponse)
        {
            OnUpdateAliasProperties?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAliasProperties(Exception exception)
        {
            OnErrorUpdateAliasProperties?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AliasPropertiesApi : IAliasPropertiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AliasPropertiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AliasPropertiesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasPropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasPropertiesApi(ILogger<AliasPropertiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AliasPropertiesApiEvents aliasPropertiesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AliasPropertiesApi>();
            HttpClient = httpClient;
            Events = aliasPropertiesApiEvents;
        }

        partial void FormatCreateOrUpdateAliasProperty(ref string aliasName, ref string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <param name="updateAliasPropertyRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateOrUpdateAliasProperty(string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));

            if (propName == null)
                throw new ArgumentNullException(nameof(propName));

            if (updateAliasPropertyRequestBody == null)
                throw new ArgumentNullException(nameof(updateAliasPropertyRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <param name="updateAliasPropertyRequestBody"></param>
        private void AfterCreateOrUpdateAliasPropertyDefaultImplementation(ICreateOrUpdateAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrUpdateAliasProperty(ref suppressDefaultLog, apiResponseLocalVar, aliasName, propName, updateAliasPropertyRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <param name="updateAliasPropertyRequestBody"></param>
        partial void AfterCreateOrUpdateAliasProperty(ref bool suppressDefaultLog, ICreateOrUpdateAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <param name="updateAliasPropertyRequestBody"></param>
        private void OnErrorCreateOrUpdateAliasPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrUpdateAliasProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName, propName, updateAliasPropertyRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <param name="updateAliasPropertyRequestBody"></param>
        partial void OnErrorCreateOrUpdateAliasProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody);

        /// <summary>
        /// Update a specific property for a collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="updateAliasPropertyRequestBody">Property value that needs to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateAliasPropertyApiResponse?> CreateOrUpdateAliasPropertyOrDefaultAsync(string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrUpdateAliasPropertyAsync(aliasName, propName, updateAliasPropertyRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a specific property for a collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="updateAliasPropertyRequestBody">Property value that needs to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateAliasPropertyApiResponse> CreateOrUpdateAliasPropertyAsync(string aliasName, string propName, UpdateAliasPropertyRequestBody updateAliasPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrUpdateAliasProperty(aliasName, propName, updateAliasPropertyRequestBody);

                FormatCreateOrUpdateAliasProperty(ref aliasName, ref propName, updateAliasPropertyRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}/properties/{propName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropName%7D", Uri.EscapeDataString(propName.ToString()));

                    httpRequestMessageLocalVar.Content = (updateAliasPropertyRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateAliasPropertyRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOrUpdateAliasPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrUpdateAliasPropertyApiResponse>();

                        CreateOrUpdateAliasPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}/properties/{propName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOrUpdateAliasPropertyDefaultImplementation(apiResponseLocalVar, aliasName, propName, updateAliasPropertyRequestBody);

                        Events.ExecuteOnCreateOrUpdateAliasProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrUpdateAliasPropertyDefaultImplementation(e, "/aliases/{aliasName}/properties/{propName}", uriBuilderLocalVar.Path, aliasName, propName, updateAliasPropertyRequestBody);
                Events.ExecuteOnErrorCreateOrUpdateAliasProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrUpdateAliasPropertyApiResponse"/>
        /// </summary>
        public partial class CreateOrUpdateAliasPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateOrUpdateAliasPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrUpdateAliasPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrUpdateAliasPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrUpdateAliasPropertyApiResponse(ILogger<CreateOrUpdateAliasPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAliasProperty(ref string aliasName, ref string propName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <returns></returns>
        private void ValidateDeleteAliasProperty(string aliasName, string propName)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));

            if (propName == null)
                throw new ArgumentNullException(nameof(propName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        private void AfterDeleteAliasPropertyDefaultImplementation(IDeleteAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAliasProperty(ref suppressDefaultLog, apiResponseLocalVar, aliasName, propName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        partial void AfterDeleteAliasProperty(ref bool suppressDefaultLog, IDeleteAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        private void OnErrorDeleteAliasPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAliasProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName, propName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        partial void OnErrorDeleteAliasProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName);

        /// <summary>
        /// Delete a specific property for a collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteAliasPropertyApiResponse?> DeleteAliasPropertyOrDefaultAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAliasPropertyAsync(aliasName, propName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific property for a collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteAliasPropertyApiResponse> DeleteAliasPropertyAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAliasProperty(aliasName, propName);

                FormatDeleteAliasProperty(ref aliasName, ref propName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}/properties/{propName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropName%7D", Uri.EscapeDataString(propName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAliasPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAliasPropertyApiResponse>();

                        DeleteAliasPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}/properties/{propName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAliasPropertyDefaultImplementation(apiResponseLocalVar, aliasName, propName);

                        Events.ExecuteOnDeleteAliasProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAliasPropertyDefaultImplementation(e, "/aliases/{aliasName}/properties/{propName}", uriBuilderLocalVar.Path, aliasName, propName);
                Events.ExecuteOnErrorDeleteAliasProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAliasPropertyApiResponse"/>
        /// </summary>
        public partial class DeleteAliasPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAliasPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAliasPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAliasPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAliasPropertyApiResponse(ILogger<DeleteAliasPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAliasProperty(ref string aliasName, ref string propName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        /// <returns></returns>
        private void ValidateGetAliasProperty(string aliasName, string propName)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));

            if (propName == null)
                throw new ArgumentNullException(nameof(propName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        private void AfterGetAliasPropertyDefaultImplementation(IGetAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName)
        {
            bool suppressDefaultLog = false;
            AfterGetAliasProperty(ref suppressDefaultLog, apiResponseLocalVar, aliasName, propName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        partial void AfterGetAliasProperty(ref bool suppressDefaultLog, IGetAliasPropertyApiResponse apiResponseLocalVar, string aliasName, string propName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        private void OnErrorGetAliasPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAliasProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName, propName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="propName"></param>
        partial void OnErrorGetAliasProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, string propName);

        /// <summary>
        /// Get a specific property for a collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<IGetAliasPropertyApiResponse?> GetAliasPropertyOrDefaultAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAliasPropertyAsync(aliasName, propName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a specific property for a collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="propName">Property Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasPropertyApiResponse"/>&gt;</returns>
        public async Task<IGetAliasPropertyApiResponse> GetAliasPropertyAsync(string aliasName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAliasProperty(aliasName, propName);

                FormatGetAliasProperty(ref aliasName, ref propName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}/properties/{propName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropName%7D", Uri.EscapeDataString(propName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAliasPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAliasPropertyApiResponse>();

                        GetAliasPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}/properties/{propName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAliasPropertyDefaultImplementation(apiResponseLocalVar, aliasName, propName);

                        Events.ExecuteOnGetAliasProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAliasPropertyDefaultImplementation(e, "/aliases/{aliasName}/properties/{propName}", uriBuilderLocalVar.Path, aliasName, propName);
                Events.ExecuteOnErrorGetAliasProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAliasPropertyApiResponse"/>
        /// </summary>
        public partial class GetAliasPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAliasPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAliasPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAliasPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAliasPropertyApiResponse(ILogger<GetAliasPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GetAliasPropertyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GetAliasPropertyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.GetAliasPropertyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllAliasProperties(ref string aliasName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <returns></returns>
        private void ValidateGetAllAliasProperties(string aliasName)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        private void AfterGetAllAliasPropertiesDefaultImplementation(IGetAllAliasPropertiesApiResponse apiResponseLocalVar, string aliasName)
        {
            bool suppressDefaultLog = false;
            AfterGetAllAliasProperties(ref suppressDefaultLog, apiResponseLocalVar, aliasName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        partial void AfterGetAllAliasProperties(ref bool suppressDefaultLog, IGetAllAliasPropertiesApiResponse apiResponseLocalVar, string aliasName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        private void OnErrorGetAllAliasPropertiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllAliasProperties(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        partial void OnErrorGetAllAliasProperties(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName);

        /// <summary>
        /// Get properties for a collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAliasPropertiesApiResponse"/>&gt;</returns>
        public async Task<IGetAllAliasPropertiesApiResponse?> GetAllAliasPropertiesOrDefaultAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllAliasPropertiesAsync(aliasName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get properties for a collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAliasPropertiesApiResponse"/>&gt;</returns>
        public async Task<IGetAllAliasPropertiesApiResponse> GetAllAliasPropertiesAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllAliasProperties(aliasName);

                FormatGetAllAliasProperties(ref aliasName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}/properties";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllAliasPropertiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllAliasPropertiesApiResponse>();

                        GetAllAliasPropertiesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}/properties", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllAliasPropertiesDefaultImplementation(apiResponseLocalVar, aliasName);

                        Events.ExecuteOnGetAllAliasProperties(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllAliasPropertiesDefaultImplementation(e, "/aliases/{aliasName}/properties", uriBuilderLocalVar.Path, aliasName);
                Events.ExecuteOnErrorGetAllAliasProperties(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllAliasPropertiesApiResponse"/>
        /// </summary>
        public partial class GetAllAliasPropertiesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllAliasPropertiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllAliasPropertiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllAliasPropertiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllAliasPropertiesApiResponse(ILogger<GetAllAliasPropertiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GetAllAliasPropertiesResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GetAllAliasPropertiesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.GetAllAliasPropertiesResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAliasProperties(ref string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="updateAliasPropertiesRequestBody"></param>
        /// <returns></returns>
        private void ValidateUpdateAliasProperties(string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));

            if (updateAliasPropertiesRequestBody == null)
                throw new ArgumentNullException(nameof(updateAliasPropertiesRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="updateAliasPropertiesRequestBody"></param>
        private void AfterUpdateAliasPropertiesDefaultImplementation(IUpdateAliasPropertiesApiResponse apiResponseLocalVar, string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAliasProperties(ref suppressDefaultLog, apiResponseLocalVar, aliasName, updateAliasPropertiesRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="updateAliasPropertiesRequestBody"></param>
        partial void AfterUpdateAliasProperties(ref bool suppressDefaultLog, IUpdateAliasPropertiesApiResponse apiResponseLocalVar, string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="updateAliasPropertiesRequestBody"></param>
        private void OnErrorUpdateAliasPropertiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAliasProperties(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName, updateAliasPropertiesRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="updateAliasPropertiesRequestBody"></param>
        partial void OnErrorUpdateAliasProperties(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody);

        /// <summary>
        /// Update properties for a collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="updateAliasPropertiesRequestBody">Properties that need to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAliasPropertiesApiResponse"/>&gt;</returns>
        public async Task<IUpdateAliasPropertiesApiResponse?> UpdateAliasPropertiesOrDefaultAsync(string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAliasPropertiesAsync(aliasName, updateAliasPropertiesRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update properties for a collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias Name</param>
        /// <param name="updateAliasPropertiesRequestBody">Properties that need to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAliasPropertiesApiResponse"/>&gt;</returns>
        public async Task<IUpdateAliasPropertiesApiResponse> UpdateAliasPropertiesAsync(string aliasName, UpdateAliasPropertiesRequestBody updateAliasPropertiesRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAliasProperties(aliasName, updateAliasPropertiesRequestBody);

                FormatUpdateAliasProperties(ref aliasName, updateAliasPropertiesRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}/properties";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));

                    httpRequestMessageLocalVar.Content = (updateAliasPropertiesRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateAliasPropertiesRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateAliasPropertiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAliasPropertiesApiResponse>();

                        UpdateAliasPropertiesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}/properties", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAliasPropertiesDefaultImplementation(apiResponseLocalVar, aliasName, updateAliasPropertiesRequestBody);

                        Events.ExecuteOnUpdateAliasProperties(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAliasPropertiesDefaultImplementation(e, "/aliases/{aliasName}/properties", uriBuilderLocalVar.Path, aliasName, updateAliasPropertiesRequestBody);
                Events.ExecuteOnErrorUpdateAliasProperties(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAliasPropertiesApiResponse"/>
        /// </summary>
        public partial class UpdateAliasPropertiesApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAliasPropertiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAliasPropertiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAliasPropertiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAliasPropertiesApiResponse(ILogger<UpdateAliasPropertiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
