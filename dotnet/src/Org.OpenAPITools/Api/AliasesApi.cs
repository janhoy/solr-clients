// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAliasesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AliasesApiEvents Events { get; }

        /// <summary>
        /// Create a traditional or &#39;routed&#39; alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAliasApiResponse"/>&gt;</returns>
        Task<ICreateAliasApiResponse> CreateAliasAsync(Option<CreateAliasRequestBody> createAliasRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a traditional or &#39;routed&#39; alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createAliasRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAliasApiResponse"/>?&gt;</returns>
        Task<ICreateAliasApiResponse?> CreateAliasOrDefaultAsync(Option<CreateAliasRequestBody> createAliasRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an alias by its name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">The name of the alias to delete</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasApiResponse"/>&gt;</returns>
        Task<IDeleteAliasApiResponse> DeleteAliasAsync(string aliasName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an alias by its name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">The name of the alias to delete</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasApiResponse"/>?&gt;</returns>
        Task<IDeleteAliasApiResponse?> DeleteAliasOrDefaultAsync(string aliasName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details for a specific collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasByNameApiResponse"/>&gt;</returns>
        Task<IGetAliasByNameApiResponse> GetAliasByNameAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details for a specific collection alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="aliasName">Alias name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasByNameApiResponse"/>?&gt;</returns>
        Task<IGetAliasByNameApiResponse?> GetAliasByNameOrDefaultAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the existing collection aliases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasesApiResponse"/>&gt;</returns>
        Task<IGetAliasesApiResponse> GetAliasesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the existing collection aliases.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasesApiResponse"/>?&gt;</returns>
        Task<IGetAliasesApiResponse?> GetAliasesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateAliasApiResponse"/>
    /// </summary>
    public interface ICreateAliasApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAliasApiResponse"/>
    /// </summary>
    public interface IDeleteAliasApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetAliasByNameApiResponse"/>
    /// </summary>
    public interface IGetAliasByNameApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.GetAliasByNameResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetAliasesApiResponse"/>
    /// </summary>
    public interface IGetAliasesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListAliasesResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AliasesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateAlias;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateAlias;

        internal void ExecuteOnCreateAlias(AliasesApi.CreateAliasApiResponse apiResponse)
        {
            OnCreateAlias?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAlias(Exception exception)
        {
            OnErrorCreateAlias?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAlias;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAlias;

        internal void ExecuteOnDeleteAlias(AliasesApi.DeleteAliasApiResponse apiResponse)
        {
            OnDeleteAlias?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAlias(Exception exception)
        {
            OnErrorDeleteAlias?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAliasByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAliasByName;

        internal void ExecuteOnGetAliasByName(AliasesApi.GetAliasByNameApiResponse apiResponse)
        {
            OnGetAliasByName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAliasByName(Exception exception)
        {
            OnErrorGetAliasByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAliases;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAliases;

        internal void ExecuteOnGetAliases(AliasesApi.GetAliasesApiResponse apiResponse)
        {
            OnGetAliases?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAliases(Exception exception)
        {
            OnErrorGetAliases?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AliasesApi : IAliasesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AliasesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AliasesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasesApi(ILogger<AliasesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AliasesApiEvents aliasesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AliasesApi>();
            HttpClient = httpClient;
            Events = aliasesApiEvents;
        }

        partial void FormatCreateAlias(Option<CreateAliasRequestBody> createAliasRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createAliasRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateAlias(Option<CreateAliasRequestBody> createAliasRequestBody)
        {
            if (createAliasRequestBody.IsSet && createAliasRequestBody.Value == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createAliasRequestBody"></param>
        private void AfterCreateAliasDefaultImplementation(ICreateAliasApiResponse apiResponseLocalVar, Option<CreateAliasRequestBody> createAliasRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateAlias(ref suppressDefaultLog, apiResponseLocalVar, createAliasRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createAliasRequestBody"></param>
        partial void AfterCreateAlias(ref bool suppressDefaultLog, ICreateAliasApiResponse apiResponseLocalVar, Option<CreateAliasRequestBody> createAliasRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createAliasRequestBody"></param>
        private void OnErrorCreateAliasDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateAliasRequestBody> createAliasRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAlias(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createAliasRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createAliasRequestBody"></param>
        partial void OnErrorCreateAlias(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateAliasRequestBody> createAliasRequestBody);

        /// <summary>
        /// Create a traditional or &#39;routed&#39; alias 
        /// </summary>
        /// <param name="createAliasRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAliasApiResponse"/>&gt;</returns>
        public async Task<ICreateAliasApiResponse?> CreateAliasOrDefaultAsync(Option<CreateAliasRequestBody> createAliasRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAliasAsync(createAliasRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a traditional or &#39;routed&#39; alias 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAliasApiResponse"/>&gt;</returns>
        public async Task<ICreateAliasApiResponse> CreateAliasAsync(Option<CreateAliasRequestBody> createAliasRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAlias(createAliasRequestBody);

                FormatCreateAlias(createAliasRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases";

                    if (createAliasRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (createAliasRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createAliasRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAliasApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAliasApiResponse>();

                        CreateAliasApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAliasDefaultImplementation(apiResponseLocalVar, createAliasRequestBody);

                        Events.ExecuteOnCreateAlias(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAliasDefaultImplementation(e, "/aliases", uriBuilderLocalVar.Path, createAliasRequestBody);
                Events.ExecuteOnErrorCreateAlias(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAliasApiResponse"/>
        /// </summary>
        public partial class CreateAliasApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateAliasApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAliasApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAliasApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAliasApiResponse(ILogger<CreateAliasApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAlias(ref string aliasName, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteAlias(string aliasName, Option<string> async)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="async"></param>
        private void AfterDeleteAliasDefaultImplementation(IDeleteAliasApiResponse apiResponseLocalVar, string aliasName, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAlias(ref suppressDefaultLog, apiResponseLocalVar, aliasName, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="async"></param>
        partial void AfterDeleteAlias(ref bool suppressDefaultLog, IDeleteAliasApiResponse apiResponseLocalVar, string aliasName, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteAliasDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAlias(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteAlias(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName, Option<string> async);

        /// <summary>
        /// Deletes an alias by its name 
        /// </summary>
        /// <param name="aliasName">The name of the alias to delete</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasApiResponse"/>&gt;</returns>
        public async Task<IDeleteAliasApiResponse?> DeleteAliasOrDefaultAsync(string aliasName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAliasAsync(aliasName, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an alias by its name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">The name of the alias to delete</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAliasApiResponse"/>&gt;</returns>
        public async Task<IDeleteAliasApiResponse> DeleteAliasAsync(string aliasName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAlias(aliasName, async);

                FormatDeleteAlias(ref aliasName, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAliasApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAliasApiResponse>();

                        DeleteAliasApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAliasDefaultImplementation(apiResponseLocalVar, aliasName, async);

                        Events.ExecuteOnDeleteAlias(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAliasDefaultImplementation(e, "/aliases/{aliasName}", uriBuilderLocalVar.Path, aliasName, async);
                Events.ExecuteOnErrorDeleteAlias(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAliasApiResponse"/>
        /// </summary>
        public partial class DeleteAliasApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAliasApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAliasApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAliasApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAliasApiResponse(ILogger<DeleteAliasApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAliasByName(ref string aliasName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aliasName"></param>
        /// <returns></returns>
        private void ValidateGetAliasByName(string aliasName)
        {
            if (aliasName == null)
                throw new ArgumentNullException(nameof(aliasName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        private void AfterGetAliasByNameDefaultImplementation(IGetAliasByNameApiResponse apiResponseLocalVar, string aliasName)
        {
            bool suppressDefaultLog = false;
            AfterGetAliasByName(ref suppressDefaultLog, apiResponseLocalVar, aliasName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="aliasName"></param>
        partial void AfterGetAliasByName(ref bool suppressDefaultLog, IGetAliasByNameApiResponse apiResponseLocalVar, string aliasName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        private void OnErrorGetAliasByNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAliasByName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, aliasName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="aliasName"></param>
        partial void OnErrorGetAliasByName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string aliasName);

        /// <summary>
        /// Get details for a specific collection alias. 
        /// </summary>
        /// <param name="aliasName">Alias name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasByNameApiResponse"/>&gt;</returns>
        public async Task<IGetAliasByNameApiResponse?> GetAliasByNameOrDefaultAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAliasByNameAsync(aliasName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get details for a specific collection alias. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasName">Alias name.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasByNameApiResponse"/>&gt;</returns>
        public async Task<IGetAliasByNameApiResponse> GetAliasByNameAsync(string aliasName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAliasByName(aliasName);

                FormatGetAliasByName(ref aliasName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases/{aliasName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaliasName%7D", Uri.EscapeDataString(aliasName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAliasByNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAliasByNameApiResponse>();

                        GetAliasByNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases/{aliasName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAliasByNameDefaultImplementation(apiResponseLocalVar, aliasName);

                        Events.ExecuteOnGetAliasByName(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAliasByNameDefaultImplementation(e, "/aliases/{aliasName}", uriBuilderLocalVar.Path, aliasName);
                Events.ExecuteOnErrorGetAliasByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAliasByNameApiResponse"/>
        /// </summary>
        public partial class GetAliasByNameApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAliasByNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAliasByNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAliasByNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAliasByNameApiResponse(ILogger<GetAliasByNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GetAliasByNameResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GetAliasByNameResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.GetAliasByNameResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAliasesDefaultImplementation(IGetAliasesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAliases(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAliases(ref bool suppressDefaultLog, IGetAliasesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAliasesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAliases(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAliases(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List the existing collection aliases. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasesApiResponse"/>&gt;</returns>
        public async Task<IGetAliasesApiResponse?> GetAliasesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAliasesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List the existing collection aliases. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAliasesApiResponse"/>&gt;</returns>
        public async Task<IGetAliasesApiResponse> GetAliasesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/aliases";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAliasesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAliasesApiResponse>();

                        GetAliasesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/aliases", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAliasesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAliases(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAliasesDefaultImplementation(e, "/aliases", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAliases(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAliasesApiResponse"/>
        /// </summary>
        public partial class GetAliasesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAliasesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAliasesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAliasesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAliasesApiResponse(ILogger<GetAliasesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListAliasesResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListAliasesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListAliasesResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
