// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IClusterApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ClusterApiEvents Events { get; }

        /// <summary>
        /// Balance Replicas across the given set of Nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="balanceReplicasRequestBody">Contains user provided parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceReplicasApiResponse"/>&gt;</returns>
        Task<IBalanceReplicasApiResponse> BalanceReplicasAsync(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Balance Replicas across the given set of Nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="balanceReplicasRequestBody">Contains user provided parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceReplicasApiResponse"/>?&gt;</returns>
        Task<IBalanceReplicasApiResponse?> BalanceReplicasOrDefaultAsync(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Migrate Replicas from a given set of nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrateReplicasRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigrateReplicasApiResponse"/>&gt;</returns>
        Task<IMigrateReplicasApiResponse> MigrateReplicasAsync(MigrateReplicasRequestBody migrateReplicasRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Migrate Replicas from a given set of nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="migrateReplicasRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigrateReplicasApiResponse"/>?&gt;</returns>
        Task<IMigrateReplicasApiResponse?> MigrateReplicasOrDefaultAsync(MigrateReplicasRequestBody migrateReplicasRequestBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IBalanceReplicasApiResponse"/>
    /// </summary>
    public interface IBalanceReplicasApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IMigrateReplicasApiResponse"/>
    /// </summary>
    public interface IMigrateReplicasApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ClusterApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnBalanceReplicas;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorBalanceReplicas;

        internal void ExecuteOnBalanceReplicas(ClusterApi.BalanceReplicasApiResponse apiResponse)
        {
            OnBalanceReplicas?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBalanceReplicas(Exception exception)
        {
            OnErrorBalanceReplicas?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMigrateReplicas;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMigrateReplicas;

        internal void ExecuteOnMigrateReplicas(ClusterApi.MigrateReplicasApiResponse apiResponse)
        {
            OnMigrateReplicas?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMigrateReplicas(Exception exception)
        {
            OnErrorMigrateReplicas?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ClusterApi : IClusterApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ClusterApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ClusterApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterApi(ILogger<ClusterApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ClusterApiEvents clusterApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ClusterApi>();
            HttpClient = httpClient;
            Events = clusterApiEvents;
        }

        partial void FormatBalanceReplicas(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="balanceReplicasRequestBody"></param>
        /// <returns></returns>
        private void ValidateBalanceReplicas(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody)
        {
            if (balanceReplicasRequestBody.IsSet && balanceReplicasRequestBody.Value == null)
                throw new ArgumentNullException(nameof(balanceReplicasRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        private void AfterBalanceReplicasDefaultImplementation(IBalanceReplicasApiResponse apiResponseLocalVar, Option<BalanceReplicasRequestBody> balanceReplicasRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterBalanceReplicas(ref suppressDefaultLog, apiResponseLocalVar, balanceReplicasRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        partial void AfterBalanceReplicas(ref bool suppressDefaultLog, IBalanceReplicasApiResponse apiResponseLocalVar, Option<BalanceReplicasRequestBody> balanceReplicasRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        private void OnErrorBalanceReplicasDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<BalanceReplicasRequestBody> balanceReplicasRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBalanceReplicas(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, balanceReplicasRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        partial void OnErrorBalanceReplicas(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<BalanceReplicasRequestBody> balanceReplicasRequestBody);

        /// <summary>
        /// Balance Replicas across the given set of Nodes. 
        /// </summary>
        /// <param name="balanceReplicasRequestBody">Contains user provided parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceReplicasApiResponse"/>&gt;</returns>
        public async Task<IBalanceReplicasApiResponse?> BalanceReplicasOrDefaultAsync(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BalanceReplicasAsync(balanceReplicasRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Balance Replicas across the given set of Nodes. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="balanceReplicasRequestBody">Contains user provided parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceReplicasApiResponse"/>&gt;</returns>
        public async Task<IBalanceReplicasApiResponse> BalanceReplicasAsync(Option<BalanceReplicasRequestBody> balanceReplicasRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBalanceReplicas(balanceReplicasRequestBody);

                FormatBalanceReplicas(balanceReplicasRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/replicas/balance";

                    if (balanceReplicasRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (balanceReplicasRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(balanceReplicasRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<BalanceReplicasApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BalanceReplicasApiResponse>();

                        BalanceReplicasApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/replicas/balance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBalanceReplicasDefaultImplementation(apiResponseLocalVar, balanceReplicasRequestBody);

                        Events.ExecuteOnBalanceReplicas(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBalanceReplicasDefaultImplementation(e, "/cluster/replicas/balance", uriBuilderLocalVar.Path, balanceReplicasRequestBody);
                Events.ExecuteOnErrorBalanceReplicas(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BalanceReplicasApiResponse"/>
        /// </summary>
        public partial class BalanceReplicasApiResponse : Org.OpenAPITools.Client.ApiResponse, IBalanceReplicasApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BalanceReplicasApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BalanceReplicasApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BalanceReplicasApiResponse(ILogger<BalanceReplicasApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMigrateReplicas(MigrateReplicasRequestBody migrateReplicasRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="migrateReplicasRequestBody"></param>
        /// <returns></returns>
        private void ValidateMigrateReplicas(MigrateReplicasRequestBody migrateReplicasRequestBody)
        {
            if (migrateReplicasRequestBody == null)
                throw new ArgumentNullException(nameof(migrateReplicasRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        private void AfterMigrateReplicasDefaultImplementation(IMigrateReplicasApiResponse apiResponseLocalVar, MigrateReplicasRequestBody migrateReplicasRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterMigrateReplicas(ref suppressDefaultLog, apiResponseLocalVar, migrateReplicasRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        partial void AfterMigrateReplicas(ref bool suppressDefaultLog, IMigrateReplicasApiResponse apiResponseLocalVar, MigrateReplicasRequestBody migrateReplicasRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        private void OnErrorMigrateReplicasDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MigrateReplicasRequestBody migrateReplicasRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMigrateReplicas(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, migrateReplicasRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        partial void OnErrorMigrateReplicas(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MigrateReplicasRequestBody migrateReplicasRequestBody);

        /// <summary>
        /// Migrate Replicas from a given set of nodes. 
        /// </summary>
        /// <param name="migrateReplicasRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigrateReplicasApiResponse"/>&gt;</returns>
        public async Task<IMigrateReplicasApiResponse?> MigrateReplicasOrDefaultAsync(MigrateReplicasRequestBody migrateReplicasRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MigrateReplicasAsync(migrateReplicasRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Migrate Replicas from a given set of nodes. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="migrateReplicasRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMigrateReplicasApiResponse"/>&gt;</returns>
        public async Task<IMigrateReplicasApiResponse> MigrateReplicasAsync(MigrateReplicasRequestBody migrateReplicasRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMigrateReplicas(migrateReplicasRequestBody);

                FormatMigrateReplicas(migrateReplicasRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/replicas/migrate";

                    httpRequestMessageLocalVar.Content = (migrateReplicasRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(migrateReplicasRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MigrateReplicasApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MigrateReplicasApiResponse>();

                        MigrateReplicasApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/replicas/migrate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMigrateReplicasDefaultImplementation(apiResponseLocalVar, migrateReplicasRequestBody);

                        Events.ExecuteOnMigrateReplicas(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMigrateReplicasDefaultImplementation(e, "/cluster/replicas/migrate", uriBuilderLocalVar.Path, migrateReplicasRequestBody);
                Events.ExecuteOnErrorMigrateReplicas(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MigrateReplicasApiResponse"/>
        /// </summary>
        public partial class MigrateReplicasApiResponse : Org.OpenAPITools.Client.ApiResponse, IMigrateReplicasApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MigrateReplicasApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MigrateReplicasApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MigrateReplicasApiResponse(ILogger<MigrateReplicasApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
