// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IClusterPropertiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ClusterPropertiesApiEvents Events { get; }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBody">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateClusterPropertyApiResponse"/>&gt;</returns>
        Task<ICreateOrUpdateClusterPropertyApiResponse> CreateOrUpdateClusterPropertyAsync(string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBody">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateClusterPropertyApiResponse"/>?&gt;</returns>
        Task<ICreateOrUpdateClusterPropertyApiResponse?> CreateOrUpdateClusterPropertyOrDefaultAsync(string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateNestedClusterPropertyApiResponse"/>&gt;</returns>
        Task<ICreateOrUpdateNestedClusterPropertyApiResponse> CreateOrUpdateNestedClusterPropertyAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set nested cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateNestedClusterPropertyApiResponse"/>?&gt;</returns>
        Task<ICreateOrUpdateNestedClusterPropertyApiResponse?> CreateOrUpdateNestedClusterPropertyOrDefaultAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteClusterPropertyApiResponse"/>&gt;</returns>
        Task<IDeleteClusterPropertyApiResponse> DeleteClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteClusterPropertyApiResponse"/>?&gt;</returns>
        Task<IDeleteClusterPropertyApiResponse?> DeleteClusterPropertyOrDefaultAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClusterPropertyApiResponse"/>&gt;</returns>
        Task<IGetClusterPropertyApiResponse> GetClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a cluster property in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClusterPropertyApiResponse"/>?&gt;</returns>
        Task<IGetClusterPropertyApiResponse?> GetClusterPropertyOrDefaultAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListClusterPropertiesApiResponse"/>&gt;</returns>
        Task<IListClusterPropertiesApiResponse> ListClusterPropertiesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all cluster properties in this Solr cluster.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListClusterPropertiesApiResponse"/>?&gt;</returns>
        Task<IListClusterPropertiesApiResponse?> ListClusterPropertiesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOrUpdateClusterPropertyApiResponse"/>
    /// </summary>
    public interface ICreateOrUpdateClusterPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOrUpdateNestedClusterPropertyApiResponse"/>
    /// </summary>
    public interface ICreateOrUpdateNestedClusterPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteClusterPropertyApiResponse"/>
    /// </summary>
    public interface IDeleteClusterPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetClusterPropertyApiResponse"/>
    /// </summary>
    public interface IGetClusterPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListClusterPropertiesApiResponse"/>
    /// </summary>
    public interface IListClusterPropertiesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListClusterPropertiesResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ClusterPropertiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrUpdateClusterProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrUpdateClusterProperty;

        internal void ExecuteOnCreateOrUpdateClusterProperty(ClusterPropertiesApi.CreateOrUpdateClusterPropertyApiResponse apiResponse)
        {
            OnCreateOrUpdateClusterProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrUpdateClusterProperty(Exception exception)
        {
            OnErrorCreateOrUpdateClusterProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrUpdateNestedClusterProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrUpdateNestedClusterProperty;

        internal void ExecuteOnCreateOrUpdateNestedClusterProperty(ClusterPropertiesApi.CreateOrUpdateNestedClusterPropertyApiResponse apiResponse)
        {
            OnCreateOrUpdateNestedClusterProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrUpdateNestedClusterProperty(Exception exception)
        {
            OnErrorCreateOrUpdateNestedClusterProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteClusterProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteClusterProperty;

        internal void ExecuteOnDeleteClusterProperty(ClusterPropertiesApi.DeleteClusterPropertyApiResponse apiResponse)
        {
            OnDeleteClusterProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteClusterProperty(Exception exception)
        {
            OnErrorDeleteClusterProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetClusterProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetClusterProperty;

        internal void ExecuteOnGetClusterProperty(ClusterPropertiesApi.GetClusterPropertyApiResponse apiResponse)
        {
            OnGetClusterProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetClusterProperty(Exception exception)
        {
            OnErrorGetClusterProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListClusterProperties;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListClusterProperties;

        internal void ExecuteOnListClusterProperties(ClusterPropertiesApi.ListClusterPropertiesApiResponse apiResponse)
        {
            OnListClusterProperties?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListClusterProperties(Exception exception)
        {
            OnErrorListClusterProperties?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ClusterPropertiesApi : IClusterPropertiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ClusterPropertiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ClusterPropertiesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterPropertiesApi(ILogger<ClusterPropertiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ClusterPropertiesApiEvents clusterPropertiesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ClusterPropertiesApi>();
            HttpClient = httpClient;
            Events = clusterPropertiesApiEvents;
        }

        partial void FormatCreateOrUpdateClusterProperty(ref string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="propertyName"></param>
        /// <param name="setClusterPropertyRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateOrUpdateClusterProperty(string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody)
        {
            if (propertyName == null)
                throw new ArgumentNullException(nameof(propertyName));

            if (setClusterPropertyRequestBody == null)
                throw new ArgumentNullException(nameof(setClusterPropertyRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        /// <param name="setClusterPropertyRequestBody"></param>
        private void AfterCreateOrUpdateClusterPropertyDefaultImplementation(ICreateOrUpdateClusterPropertyApiResponse apiResponseLocalVar, string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrUpdateClusterProperty(ref suppressDefaultLog, apiResponseLocalVar, propertyName, setClusterPropertyRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        /// <param name="setClusterPropertyRequestBody"></param>
        partial void AfterCreateOrUpdateClusterProperty(ref bool suppressDefaultLog, ICreateOrUpdateClusterPropertyApiResponse apiResponseLocalVar, string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        /// <param name="setClusterPropertyRequestBody"></param>
        private void OnErrorCreateOrUpdateClusterPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrUpdateClusterProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, propertyName, setClusterPropertyRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        /// <param name="setClusterPropertyRequestBody"></param>
        partial void OnErrorCreateOrUpdateClusterProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody);

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBody">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateClusterPropertyApiResponse?> CreateOrUpdateClusterPropertyOrDefaultAsync(string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrUpdateClusterPropertyAsync(propertyName, setClusterPropertyRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set a single new or existing cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being set.</param>
        /// <param name="setClusterPropertyRequestBody">Value to set for the property</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateClusterPropertyApiResponse> CreateOrUpdateClusterPropertyAsync(string propertyName, SetClusterPropertyRequestBody setClusterPropertyRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrUpdateClusterProperty(propertyName, setClusterPropertyRequestBody);

                FormatCreateOrUpdateClusterProperty(ref propertyName, setClusterPropertyRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/properties/{propertyName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropertyName%7D", Uri.EscapeDataString(propertyName.ToString()));

                    httpRequestMessageLocalVar.Content = (setClusterPropertyRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setClusterPropertyRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOrUpdateClusterPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrUpdateClusterPropertyApiResponse>();

                        CreateOrUpdateClusterPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/properties/{propertyName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOrUpdateClusterPropertyDefaultImplementation(apiResponseLocalVar, propertyName, setClusterPropertyRequestBody);

                        Events.ExecuteOnCreateOrUpdateClusterProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrUpdateClusterPropertyDefaultImplementation(e, "/cluster/properties/{propertyName}", uriBuilderLocalVar.Path, propertyName, setClusterPropertyRequestBody);
                Events.ExecuteOnErrorCreateOrUpdateClusterProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrUpdateClusterPropertyApiResponse"/>
        /// </summary>
        public partial class CreateOrUpdateClusterPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateOrUpdateClusterPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrUpdateClusterPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrUpdateClusterPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrUpdateClusterPropertyApiResponse(ILogger<CreateOrUpdateClusterPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOrUpdateNestedClusterProperty(Dictionary<string, Object> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateCreateOrUpdateNestedClusterProperty(Dictionary<string, Object> requestBody)
        {
            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        private void AfterCreateOrUpdateNestedClusterPropertyDefaultImplementation(ICreateOrUpdateNestedClusterPropertyApiResponse apiResponseLocalVar, Dictionary<string, Object> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrUpdateNestedClusterProperty(ref suppressDefaultLog, apiResponseLocalVar, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        partial void AfterCreateOrUpdateNestedClusterProperty(ref bool suppressDefaultLog, ICreateOrUpdateNestedClusterPropertyApiResponse apiResponseLocalVar, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestBody"></param>
        private void OnErrorCreateOrUpdateNestedClusterPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Dictionary<string, Object> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrUpdateNestedClusterProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorCreateOrUpdateNestedClusterProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Dictionary<string, Object> requestBody);

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateNestedClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateNestedClusterPropertyApiResponse?> CreateOrUpdateNestedClusterPropertyOrDefaultAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrUpdateNestedClusterPropertyAsync(requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set nested cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Property/ies to be set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateNestedClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateNestedClusterPropertyApiResponse> CreateOrUpdateNestedClusterPropertyAsync(Dictionary<string, Object> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrUpdateNestedClusterProperty(requestBody);

                FormatCreateOrUpdateNestedClusterProperty(requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/properties";

                    httpRequestMessageLocalVar.Content = (requestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOrUpdateNestedClusterPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrUpdateNestedClusterPropertyApiResponse>();

                        CreateOrUpdateNestedClusterPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/properties", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOrUpdateNestedClusterPropertyDefaultImplementation(apiResponseLocalVar, requestBody);

                        Events.ExecuteOnCreateOrUpdateNestedClusterProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrUpdateNestedClusterPropertyDefaultImplementation(e, "/cluster/properties", uriBuilderLocalVar.Path, requestBody);
                Events.ExecuteOnErrorCreateOrUpdateNestedClusterProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrUpdateNestedClusterPropertyApiResponse"/>
        /// </summary>
        public partial class CreateOrUpdateNestedClusterPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateOrUpdateNestedClusterPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrUpdateNestedClusterPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrUpdateNestedClusterPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrUpdateNestedClusterPropertyApiResponse(ILogger<CreateOrUpdateNestedClusterPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteClusterProperty(ref string propertyName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        private void ValidateDeleteClusterProperty(string propertyName)
        {
            if (propertyName == null)
                throw new ArgumentNullException(nameof(propertyName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        private void AfterDeleteClusterPropertyDefaultImplementation(IDeleteClusterPropertyApiResponse apiResponseLocalVar, string propertyName)
        {
            bool suppressDefaultLog = false;
            AfterDeleteClusterProperty(ref suppressDefaultLog, apiResponseLocalVar, propertyName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        partial void AfterDeleteClusterProperty(ref bool suppressDefaultLog, IDeleteClusterPropertyApiResponse apiResponseLocalVar, string propertyName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        private void OnErrorDeleteClusterPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteClusterProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, propertyName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        partial void OnErrorDeleteClusterProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName);

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteClusterPropertyApiResponse?> DeleteClusterPropertyOrDefaultAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteClusterPropertyAsync(propertyName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteClusterPropertyApiResponse> DeleteClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteClusterProperty(propertyName);

                FormatDeleteClusterProperty(ref propertyName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/properties/{propertyName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropertyName%7D", Uri.EscapeDataString(propertyName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteClusterPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteClusterPropertyApiResponse>();

                        DeleteClusterPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/properties/{propertyName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteClusterPropertyDefaultImplementation(apiResponseLocalVar, propertyName);

                        Events.ExecuteOnDeleteClusterProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteClusterPropertyDefaultImplementation(e, "/cluster/properties/{propertyName}", uriBuilderLocalVar.Path, propertyName);
                Events.ExecuteOnErrorDeleteClusterProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteClusterPropertyApiResponse"/>
        /// </summary>
        public partial class DeleteClusterPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteClusterPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteClusterPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteClusterPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteClusterPropertyApiResponse(ILogger<DeleteClusterPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetClusterProperty(ref string propertyName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        private void ValidateGetClusterProperty(string propertyName)
        {
            if (propertyName == null)
                throw new ArgumentNullException(nameof(propertyName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        private void AfterGetClusterPropertyDefaultImplementation(IGetClusterPropertyApiResponse apiResponseLocalVar, string propertyName)
        {
            bool suppressDefaultLog = false;
            AfterGetClusterProperty(ref suppressDefaultLog, apiResponseLocalVar, propertyName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="propertyName"></param>
        partial void AfterGetClusterProperty(ref bool suppressDefaultLog, IGetClusterPropertyApiResponse apiResponseLocalVar, string propertyName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        private void OnErrorGetClusterPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetClusterProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, propertyName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="propertyName"></param>
        partial void OnErrorGetClusterProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string propertyName);

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<IGetClusterPropertyApiResponse?> GetClusterPropertyOrDefaultAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetClusterPropertyAsync(propertyName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a cluster property in this Solr cluster. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyName">The name of the property being retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClusterPropertyApiResponse"/>&gt;</returns>
        public async Task<IGetClusterPropertyApiResponse> GetClusterPropertyAsync(string propertyName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetClusterProperty(propertyName);

                FormatGetClusterProperty(ref propertyName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/properties/{propertyName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropertyName%7D", Uri.EscapeDataString(propertyName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetClusterPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetClusterPropertyApiResponse>();

                        GetClusterPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/properties/{propertyName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetClusterPropertyDefaultImplementation(apiResponseLocalVar, propertyName);

                        Events.ExecuteOnGetClusterProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetClusterPropertyDefaultImplementation(e, "/cluster/properties/{propertyName}", uriBuilderLocalVar.Path, propertyName);
                Events.ExecuteOnErrorGetClusterProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetClusterPropertyApiResponse"/>
        /// </summary>
        public partial class GetClusterPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetClusterPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetClusterPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetClusterPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetClusterPropertyApiResponse(ILogger<GetClusterPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterListClusterPropertiesDefaultImplementation(IListClusterPropertiesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterListClusterProperties(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterListClusterProperties(ref bool suppressDefaultLog, IListClusterPropertiesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorListClusterPropertiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListClusterProperties(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorListClusterProperties(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListClusterPropertiesApiResponse"/>&gt;</returns>
        public async Task<IListClusterPropertiesApiResponse?> ListClusterPropertiesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListClusterPropertiesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all cluster properties in this Solr cluster. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListClusterPropertiesApiResponse"/>&gt;</returns>
        public async Task<IListClusterPropertiesApiResponse> ListClusterPropertiesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/properties";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListClusterPropertiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListClusterPropertiesApiResponse>();

                        ListClusterPropertiesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/properties", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListClusterPropertiesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnListClusterProperties(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListClusterPropertiesDefaultImplementation(e, "/cluster/properties", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorListClusterProperties(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListClusterPropertiesApiResponse"/>
        /// </summary>
        public partial class ListClusterPropertiesApiResponse : Org.OpenAPITools.Client.ApiResponse, IListClusterPropertiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListClusterPropertiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListClusterPropertiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListClusterPropertiesApiResponse(ILogger<ListClusterPropertiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListClusterPropertiesResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListClusterPropertiesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListClusterPropertiesResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
