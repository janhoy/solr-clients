// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICollectionBackupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CollectionBackupsApiEvents Events { get; }

        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionBackupApiResponse"/>&gt;</returns>
        Task<ICreateCollectionBackupApiResponse> CreateCollectionBackupAsync(string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new backup point for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionBackupApiResponse"/>?&gt;</returns>
        Task<ICreateCollectionBackupApiResponse?> CreateCollectionBackupOrDefaultAsync(string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMultipleBackupsByRecencyApiResponse"/>&gt;</returns>
        Task<IDeleteMultipleBackupsByRecencyApiResponse> DeleteMultipleBackupsByRecencyAsync(string backupName, Option<int> retainLatest = default, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all incremental backup points older than the most recent N
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMultipleBackupsByRecencyApiResponse"/>?&gt;</returns>
        Task<IDeleteMultipleBackupsByRecencyApiResponse?> DeleteMultipleBackupsByRecencyOrDefaultAsync(string backupName, Option<int> retainLatest = default, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSingleBackupByIdApiResponse"/>&gt;</returns>
        Task<IDeleteSingleBackupByIdApiResponse> DeleteSingleBackupByIdAsync(string backupName, string backupId, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete incremental backup point by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSingleBackupByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteSingleBackupByIdApiResponse?> DeleteSingleBackupByIdOrDefaultAsync(string backupName, string backupId, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGarbageCollectUnusedBackupFilesApiResponse"/>&gt;</returns>
        Task<IGarbageCollectUnusedBackupFilesApiResponse> GarbageCollectUnusedBackupFilesAsync(string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Garbage collect orphaned incremental backup files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGarbageCollectUnusedBackupFilesApiResponse"/>?&gt;</returns>
        Task<IGarbageCollectUnusedBackupFilesApiResponse?> GarbageCollectUnusedBackupFilesOrDefaultAsync(string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBackupsAtLocationApiResponse"/>&gt;</returns>
        Task<IListBackupsAtLocationApiResponse> ListBackupsAtLocationAsync(string backupName, Option<string> location = default, Option<string> repository = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List existing incremental backups at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBackupsAtLocationApiResponse"/>?&gt;</returns>
        Task<IListBackupsAtLocationApiResponse?> ListBackupsAtLocationOrDefaultAsync(string backupName, Option<string> location = default, Option<string> repository = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCollectionApiResponse"/>&gt;</returns>
        Task<IRestoreCollectionApiResponse> RestoreCollectionAsync(string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCollectionApiResponse"/>?&gt;</returns>
        Task<IRestoreCollectionApiResponse?> RestoreCollectionOrDefaultAsync(string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateCollectionBackupApiResponse"/>
    /// </summary>
    public interface ICreateCollectionBackupApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMultipleBackupsByRecencyApiResponse"/>
    /// </summary>
    public interface IDeleteMultipleBackupsByRecencyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.BackupDeletionResponseBody?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSingleBackupByIdApiResponse"/>
    /// </summary>
    public interface IDeleteSingleBackupByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.BackupDeletionResponseBody?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGarbageCollectUnusedBackupFilesApiResponse"/>
    /// </summary>
    public interface IGarbageCollectUnusedBackupFilesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.PurgeUnusedResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListBackupsAtLocationApiResponse"/>
    /// </summary>
    public interface IListBackupsAtLocationApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListCollectionBackupsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IRestoreCollectionApiResponse"/>
    /// </summary>
    public interface IRestoreCollectionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CollectionBackupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateCollectionBackup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateCollectionBackup;

        internal void ExecuteOnCreateCollectionBackup(CollectionBackupsApi.CreateCollectionBackupApiResponse apiResponse)
        {
            OnCreateCollectionBackup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateCollectionBackup(Exception exception)
        {
            OnErrorCreateCollectionBackup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMultipleBackupsByRecency;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMultipleBackupsByRecency;

        internal void ExecuteOnDeleteMultipleBackupsByRecency(CollectionBackupsApi.DeleteMultipleBackupsByRecencyApiResponse apiResponse)
        {
            OnDeleteMultipleBackupsByRecency?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMultipleBackupsByRecency(Exception exception)
        {
            OnErrorDeleteMultipleBackupsByRecency?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSingleBackupById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSingleBackupById;

        internal void ExecuteOnDeleteSingleBackupById(CollectionBackupsApi.DeleteSingleBackupByIdApiResponse apiResponse)
        {
            OnDeleteSingleBackupById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSingleBackupById(Exception exception)
        {
            OnErrorDeleteSingleBackupById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGarbageCollectUnusedBackupFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGarbageCollectUnusedBackupFiles;

        internal void ExecuteOnGarbageCollectUnusedBackupFiles(CollectionBackupsApi.GarbageCollectUnusedBackupFilesApiResponse apiResponse)
        {
            OnGarbageCollectUnusedBackupFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGarbageCollectUnusedBackupFiles(Exception exception)
        {
            OnErrorGarbageCollectUnusedBackupFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListBackupsAtLocation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListBackupsAtLocation;

        internal void ExecuteOnListBackupsAtLocation(CollectionBackupsApi.ListBackupsAtLocationApiResponse apiResponse)
        {
            OnListBackupsAtLocation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListBackupsAtLocation(Exception exception)
        {
            OnErrorListBackupsAtLocation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRestoreCollection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRestoreCollection;

        internal void ExecuteOnRestoreCollection(CollectionBackupsApi.RestoreCollectionApiResponse apiResponse)
        {
            OnRestoreCollection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRestoreCollection(Exception exception)
        {
            OnErrorRestoreCollection?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CollectionBackupsApi : ICollectionBackupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CollectionBackupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CollectionBackupsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionBackupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionBackupsApi(ILogger<CollectionBackupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CollectionBackupsApiEvents collectionBackupsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CollectionBackupsApi>();
            HttpClient = httpClient;
            Events = collectionBackupsApiEvents;
        }

        partial void FormatCreateCollectionBackup(ref string collectionName, ref string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateCollectionBackup(string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (createCollectionBackupRequestBody.IsSet && createCollectionBackupRequestBody.Value == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        private void AfterCreateCollectionBackupDefaultImplementation(ICreateCollectionBackupApiResponse apiResponseLocalVar, string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateCollectionBackup(ref suppressDefaultLog, apiResponseLocalVar, collectionName, backupName, createCollectionBackupRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        partial void AfterCreateCollectionBackup(ref bool suppressDefaultLog, ICreateCollectionBackupApiResponse apiResponseLocalVar, string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        private void OnErrorCreateCollectionBackupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateCollectionBackup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, backupName, createCollectionBackupRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        partial void OnErrorCreateCollectionBackup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody);

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionBackupApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionBackupApiResponse?> CreateCollectionBackupOrDefaultAsync(string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateCollectionBackupAsync(collectionName, backupName, createCollectionBackupRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new backup point for a collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="backupName"></param>
        /// <param name="createCollectionBackupRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionBackupApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionBackupApiResponse> CreateCollectionBackupAsync(string collectionName, string backupName, Option<CreateCollectionBackupRequestBody> createCollectionBackupRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateCollectionBackup(collectionName, backupName, createCollectionBackupRequestBody);

                FormatCreateCollectionBackup(ref collectionName, ref backupName, createCollectionBackupRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/backups/{backupName}/versions";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));

                    if (createCollectionBackupRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (createCollectionBackupRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCollectionBackupRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateCollectionBackupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateCollectionBackupApiResponse>();

                        CreateCollectionBackupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/backups/{backupName}/versions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateCollectionBackupDefaultImplementation(apiResponseLocalVar, collectionName, backupName, createCollectionBackupRequestBody);

                        Events.ExecuteOnCreateCollectionBackup(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateCollectionBackupDefaultImplementation(e, "/collections/{collectionName}/backups/{backupName}/versions", uriBuilderLocalVar.Path, collectionName, backupName, createCollectionBackupRequestBody);
                Events.ExecuteOnErrorCreateCollectionBackup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateCollectionBackupApiResponse"/>
        /// </summary>
        public partial class CreateCollectionBackupApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateCollectionBackupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateCollectionBackupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateCollectionBackupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateCollectionBackupApiResponse(ILogger<CreateCollectionBackupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteMultipleBackupsByRecency(ref string backupName, ref Option<int> retainLatest, ref Option<string> location, ref Option<string> repository, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteMultipleBackupsByRecency(string backupName, Option<string> location, Option<string> repository, Option<string> async)
        {
            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location));

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        private void AfterDeleteMultipleBackupsByRecencyDefaultImplementation(IDeleteMultipleBackupsByRecencyApiResponse apiResponseLocalVar, string backupName, Option<int> retainLatest, Option<string> location, Option<string> repository, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMultipleBackupsByRecency(ref suppressDefaultLog, apiResponseLocalVar, backupName, retainLatest, location, repository, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        partial void AfterDeleteMultipleBackupsByRecency(ref bool suppressDefaultLog, IDeleteMultipleBackupsByRecencyApiResponse apiResponseLocalVar, string backupName, Option<int> retainLatest, Option<string> location, Option<string> repository, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteMultipleBackupsByRecencyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<int> retainLatest, Option<string> location, Option<string> repository, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMultipleBackupsByRecency(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backupName, retainLatest, location, repository, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteMultipleBackupsByRecency(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<int> retainLatest, Option<string> location, Option<string> repository, Option<string> async);

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMultipleBackupsByRecencyApiResponse"/>&gt;</returns>
        public async Task<IDeleteMultipleBackupsByRecencyApiResponse?> DeleteMultipleBackupsByRecencyOrDefaultAsync(string backupName, Option<int> retainLatest = default, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMultipleBackupsByRecencyAsync(backupName, retainLatest, location, repository, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all incremental backup points older than the most recent N 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="retainLatest"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMultipleBackupsByRecencyApiResponse"/>&gt;</returns>
        public async Task<IDeleteMultipleBackupsByRecencyApiResponse> DeleteMultipleBackupsByRecencyAsync(string backupName, Option<int> retainLatest = default, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMultipleBackupsByRecency(backupName, location, repository, async);

                FormatDeleteMultipleBackupsByRecency(ref backupName, ref retainLatest, ref location, ref repository, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/backups/{backupName}/versions";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (retainLatest.IsSet)
                        parseQueryStringLocalVar["retainLatest"] = ClientUtils.ParameterToString(retainLatest.Value);

                    if (location.IsSet)
                        parseQueryStringLocalVar["location"] = ClientUtils.ParameterToString(location.Value);

                    if (repository.IsSet)
                        parseQueryStringLocalVar["repository"] = ClientUtils.ParameterToString(repository.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMultipleBackupsByRecencyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMultipleBackupsByRecencyApiResponse>();

                        DeleteMultipleBackupsByRecencyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/backups/{backupName}/versions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMultipleBackupsByRecencyDefaultImplementation(apiResponseLocalVar, backupName, retainLatest, location, repository, async);

                        Events.ExecuteOnDeleteMultipleBackupsByRecency(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMultipleBackupsByRecencyDefaultImplementation(e, "/backups/{backupName}/versions", uriBuilderLocalVar.Path, backupName, retainLatest, location, repository, async);
                Events.ExecuteOnErrorDeleteMultipleBackupsByRecency(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMultipleBackupsByRecencyApiResponse"/>
        /// </summary>
        public partial class DeleteMultipleBackupsByRecencyApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteMultipleBackupsByRecencyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMultipleBackupsByRecencyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMultipleBackupsByRecencyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMultipleBackupsByRecencyApiResponse(ILogger<DeleteMultipleBackupsByRecencyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BackupDeletionResponseBody? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BackupDeletionResponseBody>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.BackupDeletionResponseBody? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSingleBackupById(ref string backupName, ref string backupId, ref Option<string> location, ref Option<string> repository, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteSingleBackupById(string backupName, string backupId, Option<string> location, Option<string> repository, Option<string> async)
        {
            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (backupId == null)
                throw new ArgumentNullException(nameof(backupId));

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location));

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        private void AfterDeleteSingleBackupByIdDefaultImplementation(IDeleteSingleBackupByIdApiResponse apiResponseLocalVar, string backupName, string backupId, Option<string> location, Option<string> repository, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSingleBackupById(ref suppressDefaultLog, apiResponseLocalVar, backupName, backupId, location, repository, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        partial void AfterDeleteSingleBackupById(ref bool suppressDefaultLog, IDeleteSingleBackupByIdApiResponse apiResponseLocalVar, string backupName, string backupId, Option<string> location, Option<string> repository, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteSingleBackupByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, string backupId, Option<string> location, Option<string> repository, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSingleBackupById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backupName, backupId, location, repository, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteSingleBackupById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, string backupId, Option<string> location, Option<string> repository, Option<string> async);

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSingleBackupByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSingleBackupByIdApiResponse?> DeleteSingleBackupByIdOrDefaultAsync(string backupName, string backupId, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSingleBackupByIdAsync(backupName, backupId, location, repository, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete incremental backup point by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="backupId"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSingleBackupByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteSingleBackupByIdApiResponse> DeleteSingleBackupByIdAsync(string backupName, string backupId, Option<string> location = default, Option<string> repository = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSingleBackupById(backupName, backupId, location, repository, async);

                FormatDeleteSingleBackupById(ref backupName, ref backupId, ref location, ref repository, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/backups/{backupName}/versions/{backupId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupId%7D", Uri.EscapeDataString(backupId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (location.IsSet)
                        parseQueryStringLocalVar["location"] = ClientUtils.ParameterToString(location.Value);

                    if (repository.IsSet)
                        parseQueryStringLocalVar["repository"] = ClientUtils.ParameterToString(repository.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSingleBackupByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSingleBackupByIdApiResponse>();

                        DeleteSingleBackupByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/backups/{backupName}/versions/{backupId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSingleBackupByIdDefaultImplementation(apiResponseLocalVar, backupName, backupId, location, repository, async);

                        Events.ExecuteOnDeleteSingleBackupById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSingleBackupByIdDefaultImplementation(e, "/backups/{backupName}/versions/{backupId}", uriBuilderLocalVar.Path, backupName, backupId, location, repository, async);
                Events.ExecuteOnErrorDeleteSingleBackupById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSingleBackupByIdApiResponse"/>
        /// </summary>
        public partial class DeleteSingleBackupByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteSingleBackupByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSingleBackupByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSingleBackupByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSingleBackupByIdApiResponse(ILogger<DeleteSingleBackupByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BackupDeletionResponseBody? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BackupDeletionResponseBody>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.BackupDeletionResponseBody? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGarbageCollectUnusedBackupFiles(ref string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody"></param>
        /// <returns></returns>
        private void ValidateGarbageCollectUnusedBackupFiles(string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody)
        {
            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (purgeUnusedFilesRequestBody.IsSet && purgeUnusedFilesRequestBody.Value == null)
                throw new ArgumentNullException(nameof(purgeUnusedFilesRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody"></param>
        private void AfterGarbageCollectUnusedBackupFilesDefaultImplementation(IGarbageCollectUnusedBackupFilesApiResponse apiResponseLocalVar, string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterGarbageCollectUnusedBackupFiles(ref suppressDefaultLog, apiResponseLocalVar, backupName, purgeUnusedFilesRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody"></param>
        partial void AfterGarbageCollectUnusedBackupFiles(ref bool suppressDefaultLog, IGarbageCollectUnusedBackupFilesApiResponse apiResponseLocalVar, string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody"></param>
        private void OnErrorGarbageCollectUnusedBackupFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGarbageCollectUnusedBackupFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backupName, purgeUnusedFilesRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody"></param>
        partial void OnErrorGarbageCollectUnusedBackupFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody);

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGarbageCollectUnusedBackupFilesApiResponse"/>&gt;</returns>
        public async Task<IGarbageCollectUnusedBackupFilesApiResponse?> GarbageCollectUnusedBackupFilesOrDefaultAsync(string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GarbageCollectUnusedBackupFilesAsync(backupName, purgeUnusedFilesRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Garbage collect orphaned incremental backup files 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="purgeUnusedFilesRequestBody">Request body parameters for the orphaned file cleanup (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGarbageCollectUnusedBackupFilesApiResponse"/>&gt;</returns>
        public async Task<IGarbageCollectUnusedBackupFilesApiResponse> GarbageCollectUnusedBackupFilesAsync(string backupName, Option<PurgeUnusedFilesRequestBody> purgeUnusedFilesRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGarbageCollectUnusedBackupFiles(backupName, purgeUnusedFilesRequestBody);

                FormatGarbageCollectUnusedBackupFiles(ref backupName, purgeUnusedFilesRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/backups/{backupName}/purgeUnused";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));

                    if (purgeUnusedFilesRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (purgeUnusedFilesRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(purgeUnusedFilesRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GarbageCollectUnusedBackupFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GarbageCollectUnusedBackupFilesApiResponse>();

                        GarbageCollectUnusedBackupFilesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/backups/{backupName}/purgeUnused", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGarbageCollectUnusedBackupFilesDefaultImplementation(apiResponseLocalVar, backupName, purgeUnusedFilesRequestBody);

                        Events.ExecuteOnGarbageCollectUnusedBackupFiles(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGarbageCollectUnusedBackupFilesDefaultImplementation(e, "/backups/{backupName}/purgeUnused", uriBuilderLocalVar.Path, backupName, purgeUnusedFilesRequestBody);
                Events.ExecuteOnErrorGarbageCollectUnusedBackupFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GarbageCollectUnusedBackupFilesApiResponse"/>
        /// </summary>
        public partial class GarbageCollectUnusedBackupFilesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGarbageCollectUnusedBackupFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GarbageCollectUnusedBackupFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GarbageCollectUnusedBackupFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GarbageCollectUnusedBackupFilesApiResponse(ILogger<GarbageCollectUnusedBackupFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PurgeUnusedResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PurgeUnusedResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.PurgeUnusedResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListBackupsAtLocation(ref string backupName, ref Option<string> location, ref Option<string> repository);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        /// <returns></returns>
        private void ValidateListBackupsAtLocation(string backupName, Option<string> location, Option<string> repository)
        {
            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location));

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        private void AfterListBackupsAtLocationDefaultImplementation(IListBackupsAtLocationApiResponse apiResponseLocalVar, string backupName, Option<string> location, Option<string> repository)
        {
            bool suppressDefaultLog = false;
            AfterListBackupsAtLocation(ref suppressDefaultLog, apiResponseLocalVar, backupName, location, repository);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        partial void AfterListBackupsAtLocation(ref bool suppressDefaultLog, IListBackupsAtLocationApiResponse apiResponseLocalVar, string backupName, Option<string> location, Option<string> repository);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        private void OnErrorListBackupsAtLocationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<string> location, Option<string> repository)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListBackupsAtLocation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backupName, location, repository);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="location"></param>
        /// <param name="repository"></param>
        partial void OnErrorListBackupsAtLocation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<string> location, Option<string> repository);

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBackupsAtLocationApiResponse"/>&gt;</returns>
        public async Task<IListBackupsAtLocationApiResponse?> ListBackupsAtLocationOrDefaultAsync(string backupName, Option<string> location = default, Option<string> repository = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListBackupsAtLocationAsync(backupName, location, repository, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List existing incremental backups at the specified location. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="location"> (optional)</param>
        /// <param name="repository"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBackupsAtLocationApiResponse"/>&gt;</returns>
        public async Task<IListBackupsAtLocationApiResponse> ListBackupsAtLocationAsync(string backupName, Option<string> location = default, Option<string> repository = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListBackupsAtLocation(backupName, location, repository);

                FormatListBackupsAtLocation(ref backupName, ref location, ref repository);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/backups/{backupName}/versions";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (location.IsSet)
                        parseQueryStringLocalVar["location"] = ClientUtils.ParameterToString(location.Value);

                    if (repository.IsSet)
                        parseQueryStringLocalVar["repository"] = ClientUtils.ParameterToString(repository.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListBackupsAtLocationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListBackupsAtLocationApiResponse>();

                        ListBackupsAtLocationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/backups/{backupName}/versions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListBackupsAtLocationDefaultImplementation(apiResponseLocalVar, backupName, location, repository);

                        Events.ExecuteOnListBackupsAtLocation(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListBackupsAtLocationDefaultImplementation(e, "/backups/{backupName}/versions", uriBuilderLocalVar.Path, backupName, location, repository);
                Events.ExecuteOnErrorListBackupsAtLocation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListBackupsAtLocationApiResponse"/>
        /// </summary>
        public partial class ListBackupsAtLocationApiResponse : Org.OpenAPITools.Client.ApiResponse, IListBackupsAtLocationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListBackupsAtLocationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListBackupsAtLocationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBackupsAtLocationApiResponse(ILogger<ListBackupsAtLocationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListCollectionBackupsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListCollectionBackupsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListCollectionBackupsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRestoreCollection(ref string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        /// <returns></returns>
        private void ValidateRestoreCollection(string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody)
        {
            if (backupName == null)
                throw new ArgumentNullException(nameof(backupName));

            if (restoreCollectionRequestBody.IsSet && restoreCollectionRequestBody.Value == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        private void AfterRestoreCollectionDefaultImplementation(IRestoreCollectionApiResponse apiResponseLocalVar, string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRestoreCollection(ref suppressDefaultLog, apiResponseLocalVar, backupName, restoreCollectionRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        partial void AfterRestoreCollection(ref bool suppressDefaultLog, IRestoreCollectionApiResponse apiResponseLocalVar, string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        private void OnErrorRestoreCollectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRestoreCollection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backupName, restoreCollectionRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        partial void OnErrorRestoreCollection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody);

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCollectionApiResponse"/>&gt;</returns>
        public async Task<IRestoreCollectionApiResponse?> RestoreCollectionOrDefaultAsync(string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RestoreCollectionAsync(backupName, restoreCollectionRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Restores an existing backup point to a (potentially new) collection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backupName"></param>
        /// <param name="restoreCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCollectionApiResponse"/>&gt;</returns>
        public async Task<IRestoreCollectionApiResponse> RestoreCollectionAsync(string backupName, Option<RestoreCollectionRequestBody> restoreCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRestoreCollection(backupName, restoreCollectionRequestBody);

                FormatRestoreCollection(ref backupName, restoreCollectionRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/backups/{backupName}/restore";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbackupName%7D", Uri.EscapeDataString(backupName.ToString()));

                    if (restoreCollectionRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (restoreCollectionRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(restoreCollectionRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RestoreCollectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RestoreCollectionApiResponse>();

                        RestoreCollectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/backups/{backupName}/restore", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRestoreCollectionDefaultImplementation(apiResponseLocalVar, backupName, restoreCollectionRequestBody);

                        Events.ExecuteOnRestoreCollection(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRestoreCollectionDefaultImplementation(e, "/backups/{backupName}/restore", uriBuilderLocalVar.Path, backupName, restoreCollectionRequestBody);
                Events.ExecuteOnErrorRestoreCollection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RestoreCollectionApiResponse"/>
        /// </summary>
        public partial class RestoreCollectionApiResponse : Org.OpenAPITools.Client.ApiResponse, IRestoreCollectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RestoreCollectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RestoreCollectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RestoreCollectionApiResponse(ILogger<RestoreCollectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
