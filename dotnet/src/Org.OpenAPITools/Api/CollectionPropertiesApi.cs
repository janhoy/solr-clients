// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICollectionPropertiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CollectionPropertiesApiEvents Events { get; }

        /// <summary>
        /// Create or update a collection property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateCollectionPropertyApiResponse"/>&gt;</returns>
        Task<ICreateOrUpdateCollectionPropertyApiResponse> CreateOrUpdateCollectionPropertyAsync(string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create or update a collection property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateCollectionPropertyApiResponse"/>?&gt;</returns>
        Task<ICreateOrUpdateCollectionPropertyApiResponse?> CreateOrUpdateCollectionPropertyOrDefaultAsync(string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the specified collection property from the collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionPropertyApiResponse"/>&gt;</returns>
        Task<IDeleteCollectionPropertyApiResponse> DeleteCollectionPropertyAsync(string collName, string propName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the specified collection property from the collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionPropertyApiResponse"/>?&gt;</returns>
        Task<IDeleteCollectionPropertyApiResponse?> DeleteCollectionPropertyOrDefaultAsync(string collName, string propName, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOrUpdateCollectionPropertyApiResponse"/>
    /// </summary>
    public interface ICreateOrUpdateCollectionPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteCollectionPropertyApiResponse"/>
    /// </summary>
    public interface IDeleteCollectionPropertyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CollectionPropertiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrUpdateCollectionProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrUpdateCollectionProperty;

        internal void ExecuteOnCreateOrUpdateCollectionProperty(CollectionPropertiesApi.CreateOrUpdateCollectionPropertyApiResponse apiResponse)
        {
            OnCreateOrUpdateCollectionProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrUpdateCollectionProperty(Exception exception)
        {
            OnErrorCreateOrUpdateCollectionProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCollectionProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCollectionProperty;

        internal void ExecuteOnDeleteCollectionProperty(CollectionPropertiesApi.DeleteCollectionPropertyApiResponse apiResponse)
        {
            OnDeleteCollectionProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCollectionProperty(Exception exception)
        {
            OnErrorDeleteCollectionProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CollectionPropertiesApi : ICollectionPropertiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CollectionPropertiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CollectionPropertiesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionPropertiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionPropertiesApi(ILogger<CollectionPropertiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CollectionPropertiesApiEvents collectionPropertiesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CollectionPropertiesApi>();
            HttpClient = httpClient;
            Events = collectionPropertiesApiEvents;
        }

        partial void FormatCreateOrUpdateCollectionProperty(ref string collName, ref string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateOrUpdateCollectionProperty(string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));

            if (propName == null)
                throw new ArgumentNullException(nameof(propName));

            if (updateCollectionPropertyRequestBody.IsSet && updateCollectionPropertyRequestBody.Value == null)
                throw new ArgumentNullException(nameof(updateCollectionPropertyRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"></param>
        private void AfterCreateOrUpdateCollectionPropertyDefaultImplementation(ICreateOrUpdateCollectionPropertyApiResponse apiResponseLocalVar, string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrUpdateCollectionProperty(ref suppressDefaultLog, apiResponseLocalVar, collName, propName, updateCollectionPropertyRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"></param>
        partial void AfterCreateOrUpdateCollectionProperty(ref bool suppressDefaultLog, ICreateOrUpdateCollectionPropertyApiResponse apiResponseLocalVar, string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"></param>
        private void OnErrorCreateOrUpdateCollectionPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrUpdateCollectionProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName, propName, updateCollectionPropertyRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"></param>
        partial void OnErrorCreateOrUpdateCollectionProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody);

        /// <summary>
        /// Create or update a collection property 
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateCollectionPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateCollectionPropertyApiResponse?> CreateOrUpdateCollectionPropertyOrDefaultAsync(string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrUpdateCollectionPropertyAsync(collName, propName, updateCollectionPropertyRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create or update a collection property 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="updateCollectionPropertyRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrUpdateCollectionPropertyApiResponse"/>&gt;</returns>
        public async Task<ICreateOrUpdateCollectionPropertyApiResponse> CreateOrUpdateCollectionPropertyAsync(string collName, string propName, Option<UpdateCollectionPropertyRequestBody> updateCollectionPropertyRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrUpdateCollectionProperty(collName, propName, updateCollectionPropertyRequestBody);

                FormatCreateOrUpdateCollectionProperty(ref collName, ref propName, updateCollectionPropertyRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/properties/{propName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropName%7D", Uri.EscapeDataString(propName.ToString()));

                    if (updateCollectionPropertyRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (updateCollectionPropertyRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateCollectionPropertyRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOrUpdateCollectionPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrUpdateCollectionPropertyApiResponse>();

                        CreateOrUpdateCollectionPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/properties/{propName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOrUpdateCollectionPropertyDefaultImplementation(apiResponseLocalVar, collName, propName, updateCollectionPropertyRequestBody);

                        Events.ExecuteOnCreateOrUpdateCollectionProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrUpdateCollectionPropertyDefaultImplementation(e, "/collections/{collName}/properties/{propName}", uriBuilderLocalVar.Path, collName, propName, updateCollectionPropertyRequestBody);
                Events.ExecuteOnErrorCreateOrUpdateCollectionProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrUpdateCollectionPropertyApiResponse"/>
        /// </summary>
        public partial class CreateOrUpdateCollectionPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateOrUpdateCollectionPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrUpdateCollectionPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrUpdateCollectionPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrUpdateCollectionPropertyApiResponse(ILogger<CreateOrUpdateCollectionPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteCollectionProperty(ref string collName, ref string propName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <returns></returns>
        private void ValidateDeleteCollectionProperty(string collName, string propName)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));

            if (propName == null)
                throw new ArgumentNullException(nameof(propName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        private void AfterDeleteCollectionPropertyDefaultImplementation(IDeleteCollectionPropertyApiResponse apiResponseLocalVar, string collName, string propName)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCollectionProperty(ref suppressDefaultLog, apiResponseLocalVar, collName, propName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        partial void AfterDeleteCollectionProperty(ref bool suppressDefaultLog, IDeleteCollectionPropertyApiResponse apiResponseLocalVar, string collName, string propName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        private void OnErrorDeleteCollectionPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string propName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCollectionProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName, propName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        partial void OnErrorDeleteCollectionProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string propName);

        /// <summary>
        /// Delete the specified collection property from the collection 
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionPropertyApiResponse?> DeleteCollectionPropertyOrDefaultAsync(string collName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCollectionPropertyAsync(collName, propName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete the specified collection property from the collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="propName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionPropertyApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionPropertyApiResponse> DeleteCollectionPropertyAsync(string collName, string propName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCollectionProperty(collName, propName);

                FormatDeleteCollectionProperty(ref collName, ref propName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/properties/{propName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpropName%7D", Uri.EscapeDataString(propName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteCollectionPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCollectionPropertyApiResponse>();

                        DeleteCollectionPropertyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/properties/{propName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCollectionPropertyDefaultImplementation(apiResponseLocalVar, collName, propName);

                        Events.ExecuteOnDeleteCollectionProperty(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCollectionPropertyDefaultImplementation(e, "/collections/{collName}/properties/{propName}", uriBuilderLocalVar.Path, collName, propName);
                Events.ExecuteOnErrorDeleteCollectionProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCollectionPropertyApiResponse"/>
        /// </summary>
        public partial class DeleteCollectionPropertyApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteCollectionPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCollectionPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCollectionPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCollectionPropertyApiResponse(ILogger<DeleteCollectionPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
