// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICollectionSnapshotsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CollectionSnapshotsApiEvents Events { get; }

        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionSnapshotApiResponse"/>&gt;</returns>
        Task<ICreateCollectionSnapshotApiResponse> CreateCollectionSnapshotAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new snapshot of the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionSnapshotApiResponse"/>?&gt;</returns>
        Task<ICreateCollectionSnapshotApiResponse?> CreateCollectionSnapshotOrDefaultAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionSnapshotApiResponse"/>&gt;</returns>
        Task<IDeleteCollectionSnapshotApiResponse> DeleteCollectionSnapshotAsync(string collName, string snapshotName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing collection-snapshot by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionSnapshotApiResponse"/>?&gt;</returns>
        Task<IDeleteCollectionSnapshotApiResponse?> DeleteCollectionSnapshotOrDefaultAsync(string collName, string snapshotName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshotsApiResponse"/>&gt;</returns>
        Task<IListSnapshotsApiResponse> ListSnapshotsAsync(string collName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the snapshots available for a specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshotsApiResponse"/>?&gt;</returns>
        Task<IListSnapshotsApiResponse?> ListSnapshotsOrDefaultAsync(string collName, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateCollectionSnapshotApiResponse"/>
    /// </summary>
    public interface ICreateCollectionSnapshotApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.CreateCollectionSnapshotResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteCollectionSnapshotApiResponse"/>
    /// </summary>
    public interface IDeleteCollectionSnapshotApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.DeleteCollectionSnapshotResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListSnapshotsApiResponse"/>
    /// </summary>
    public interface IListSnapshotsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListCollectionSnapshotsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CollectionSnapshotsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateCollectionSnapshot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateCollectionSnapshot;

        internal void ExecuteOnCreateCollectionSnapshot(CollectionSnapshotsApi.CreateCollectionSnapshotApiResponse apiResponse)
        {
            OnCreateCollectionSnapshot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateCollectionSnapshot(Exception exception)
        {
            OnErrorCreateCollectionSnapshot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCollectionSnapshot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCollectionSnapshot;

        internal void ExecuteOnDeleteCollectionSnapshot(CollectionSnapshotsApi.DeleteCollectionSnapshotApiResponse apiResponse)
        {
            OnDeleteCollectionSnapshot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCollectionSnapshot(Exception exception)
        {
            OnErrorDeleteCollectionSnapshot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListSnapshots;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListSnapshots;

        internal void ExecuteOnListSnapshots(CollectionSnapshotsApi.ListSnapshotsApiResponse apiResponse)
        {
            OnListSnapshots?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSnapshots(Exception exception)
        {
            OnErrorListSnapshots?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CollectionSnapshotsApi : ICollectionSnapshotsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CollectionSnapshotsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CollectionSnapshotsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionSnapshotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionSnapshotsApi(ILogger<CollectionSnapshotsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CollectionSnapshotsApiEvents collectionSnapshotsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CollectionSnapshotsApi>();
            HttpClient = httpClient;
            Events = collectionSnapshotsApiEvents;
        }

        partial void FormatCreateCollectionSnapshot(ref string collName, ref string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateCollectionSnapshot(string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));

            if (snapshotName == null)
                throw new ArgumentNullException(nameof(snapshotName));

            if (createCollectionSnapshotRequestBody == null)
                throw new ArgumentNullException(nameof(createCollectionSnapshotRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        private void AfterCreateCollectionSnapshotDefaultImplementation(ICreateCollectionSnapshotApiResponse apiResponseLocalVar, string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateCollectionSnapshot(ref suppressDefaultLog, apiResponseLocalVar, collName, snapshotName, createCollectionSnapshotRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        partial void AfterCreateCollectionSnapshot(ref bool suppressDefaultLog, ICreateCollectionSnapshotApiResponse apiResponseLocalVar, string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        private void OnErrorCreateCollectionSnapshotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateCollectionSnapshot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName, snapshotName, createCollectionSnapshotRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        partial void OnErrorCreateCollectionSnapshot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody);

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionSnapshotApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionSnapshotApiResponse?> CreateCollectionSnapshotOrDefaultAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateCollectionSnapshotAsync(collName, snapshotName, createCollectionSnapshotRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new snapshot of the specified collection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be created.</param>
        /// <param name="createCollectionSnapshotRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionSnapshotApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionSnapshotApiResponse> CreateCollectionSnapshotAsync(string collName, string snapshotName, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateCollectionSnapshot(collName, snapshotName, createCollectionSnapshotRequestBody);

                FormatCreateCollectionSnapshot(ref collName, ref snapshotName, createCollectionSnapshotRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/snapshots/{snapshotName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsnapshotName%7D", Uri.EscapeDataString(snapshotName.ToString()));

                    httpRequestMessageLocalVar.Content = (createCollectionSnapshotRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCollectionSnapshotRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateCollectionSnapshotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateCollectionSnapshotApiResponse>();

                        CreateCollectionSnapshotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/snapshots/{snapshotName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateCollectionSnapshotDefaultImplementation(apiResponseLocalVar, collName, snapshotName, createCollectionSnapshotRequestBody);

                        Events.ExecuteOnCreateCollectionSnapshot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateCollectionSnapshotDefaultImplementation(e, "/collections/{collName}/snapshots/{snapshotName}", uriBuilderLocalVar.Path, collName, snapshotName, createCollectionSnapshotRequestBody);
                Events.ExecuteOnErrorCreateCollectionSnapshot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateCollectionSnapshotApiResponse"/>
        /// </summary>
        public partial class CreateCollectionSnapshotApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateCollectionSnapshotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateCollectionSnapshotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateCollectionSnapshotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateCollectionSnapshotApiResponse(ILogger<CreateCollectionSnapshotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateCollectionSnapshotResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateCollectionSnapshotResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateCollectionSnapshotResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteCollectionSnapshot(ref string collName, ref string snapshotName, ref Option<bool> followAliases, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteCollectionSnapshot(string collName, string snapshotName, Option<string> async)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));

            if (snapshotName == null)
                throw new ArgumentNullException(nameof(snapshotName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void AfterDeleteCollectionSnapshotDefaultImplementation(IDeleteCollectionSnapshotApiResponse apiResponseLocalVar, string collName, string snapshotName, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCollectionSnapshot(ref suppressDefaultLog, apiResponseLocalVar, collName, snapshotName, followAliases, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void AfterDeleteCollectionSnapshot(ref bool suppressDefaultLog, IDeleteCollectionSnapshotApiResponse apiResponseLocalVar, string collName, string snapshotName, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteCollectionSnapshotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string snapshotName, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCollectionSnapshot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName, snapshotName, followAliases, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteCollectionSnapshot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string snapshotName, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionSnapshotApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionSnapshotApiResponse?> DeleteCollectionSnapshotOrDefaultAsync(string collName, string snapshotName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCollectionSnapshotAsync(collName, snapshotName, followAliases, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an existing collection-snapshot by name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="snapshotName">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias. (optional, default to false)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionSnapshotApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionSnapshotApiResponse> DeleteCollectionSnapshotAsync(string collName, string snapshotName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCollectionSnapshot(collName, snapshotName, async);

                FormatDeleteCollectionSnapshot(ref collName, ref snapshotName, ref followAliases, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/snapshots/{snapshotName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsnapshotName%7D", Uri.EscapeDataString(snapshotName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (followAliases.IsSet)
                        parseQueryStringLocalVar["followAliases"] = ClientUtils.ParameterToString(followAliases.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteCollectionSnapshotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCollectionSnapshotApiResponse>();

                        DeleteCollectionSnapshotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/snapshots/{snapshotName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCollectionSnapshotDefaultImplementation(apiResponseLocalVar, collName, snapshotName, followAliases, async);

                        Events.ExecuteOnDeleteCollectionSnapshot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCollectionSnapshotDefaultImplementation(e, "/collections/{collName}/snapshots/{snapshotName}", uriBuilderLocalVar.Path, collName, snapshotName, followAliases, async);
                Events.ExecuteOnErrorDeleteCollectionSnapshot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCollectionSnapshotApiResponse"/>
        /// </summary>
        public partial class DeleteCollectionSnapshotApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteCollectionSnapshotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCollectionSnapshotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCollectionSnapshotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCollectionSnapshotApiResponse(ILogger<DeleteCollectionSnapshotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DeleteCollectionSnapshotResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DeleteCollectionSnapshotResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.DeleteCollectionSnapshotResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSnapshots(ref string collName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <returns></returns>
        private void ValidateListSnapshots(string collName)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        private void AfterListSnapshotsDefaultImplementation(IListSnapshotsApiResponse apiResponseLocalVar, string collName)
        {
            bool suppressDefaultLog = false;
            AfterListSnapshots(ref suppressDefaultLog, apiResponseLocalVar, collName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        partial void AfterListSnapshots(ref bool suppressDefaultLog, IListSnapshotsApiResponse apiResponseLocalVar, string collName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        private void OnErrorListSnapshotsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSnapshots(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        partial void OnErrorListSnapshots(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName);

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshotsApiResponse"/>&gt;</returns>
        public async Task<IListSnapshotsApiResponse?> ListSnapshotsOrDefaultAsync(string collName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSnapshotsAsync(collName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List the snapshots available for a specified collection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName">The name of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshotsApiResponse"/>&gt;</returns>
        public async Task<IListSnapshotsApiResponse> ListSnapshotsAsync(string collName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSnapshots(collName);

                FormatListSnapshots(ref collName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/snapshots";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListSnapshotsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSnapshotsApiResponse>();

                        ListSnapshotsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/snapshots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListSnapshotsDefaultImplementation(apiResponseLocalVar, collName);

                        Events.ExecuteOnListSnapshots(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSnapshotsDefaultImplementation(e, "/collections/{collName}/snapshots", uriBuilderLocalVar.Path, collName);
                Events.ExecuteOnErrorListSnapshots(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSnapshotsApiResponse"/>
        /// </summary>
        public partial class ListSnapshotsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListSnapshotsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSnapshotsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSnapshotsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSnapshotsApiResponse(ILogger<ListSnapshotsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListCollectionSnapshotsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListCollectionSnapshotsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListCollectionSnapshotsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
