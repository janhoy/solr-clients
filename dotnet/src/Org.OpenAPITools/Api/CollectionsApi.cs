// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICollectionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CollectionsApiEvents Events { get; }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceShardUniqueApiResponse"/>&gt;</returns>
        Task<IBalanceShardUniqueApiResponse> BalanceShardUniqueAsync(string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceShardUniqueApiResponse"/>?&gt;</returns>
        Task<IBalanceShardUniqueApiResponse?> BalanceShardUniqueOrDefaultAsync(string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionApiResponse"/>&gt;</returns>
        Task<ICreateCollectionApiResponse> CreateCollectionAsync(Option<CreateCollectionRequestBody> createCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new SolrCloud collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionApiResponse"/>?&gt;</returns>
        Task<ICreateCollectionApiResponse?> CreateCollectionOrDefaultAsync(Option<CreateCollectionRequestBody> createCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionApiResponse"/>&gt;</returns>
        Task<IDeleteCollectionApiResponse> DeleteCollectionAsync(string collectionName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a collection from SolrCloud
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionApiResponse"/>?&gt;</returns>
        Task<IDeleteCollectionApiResponse?> DeleteCollectionOrDefaultAsync(string collectionName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCollectionsApiResponse"/>&gt;</returns>
        Task<IListCollectionsApiResponse> ListCollectionsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all collections in this Solr cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCollectionsApiResponse"/>?&gt;</returns>
        Task<IListCollectionsApiResponse?> ListCollectionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCollectionApiResponse"/>&gt;</returns>
        Task<IReloadCollectionApiResponse> ReloadCollectionAsync(string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reload all cores in the specified collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCollectionApiResponse"/>?&gt;</returns>
        Task<IReloadCollectionApiResponse?> ReloadCollectionOrDefaultAsync(string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCollectionApiResponse"/>&gt;</returns>
        Task<IRenameCollectionApiResponse> RenameCollectionAsync(string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rename a SolrCloud collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCollectionApiResponse"/>?&gt;</returns>
        Task<IRenameCollectionApiResponse?> RenameCollectionOrDefaultAsync(string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IBalanceShardUniqueApiResponse"/>
    /// </summary>
    public interface IBalanceShardUniqueApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateCollectionApiResponse"/>
    /// </summary>
    public interface ICreateCollectionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteCollectionApiResponse"/>
    /// </summary>
    public interface IDeleteCollectionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListCollectionsApiResponse"/>
    /// </summary>
    public interface IListCollectionsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListCollectionsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IReloadCollectionApiResponse"/>
    /// </summary>
    public interface IReloadCollectionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IRenameCollectionApiResponse"/>
    /// </summary>
    public interface IRenameCollectionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CollectionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnBalanceShardUnique;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorBalanceShardUnique;

        internal void ExecuteOnBalanceShardUnique(CollectionsApi.BalanceShardUniqueApiResponse apiResponse)
        {
            OnBalanceShardUnique?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBalanceShardUnique(Exception exception)
        {
            OnErrorBalanceShardUnique?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateCollection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateCollection;

        internal void ExecuteOnCreateCollection(CollectionsApi.CreateCollectionApiResponse apiResponse)
        {
            OnCreateCollection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateCollection(Exception exception)
        {
            OnErrorCreateCollection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCollection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCollection;

        internal void ExecuteOnDeleteCollection(CollectionsApi.DeleteCollectionApiResponse apiResponse)
        {
            OnDeleteCollection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCollection(Exception exception)
        {
            OnErrorDeleteCollection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListCollections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListCollections;

        internal void ExecuteOnListCollections(CollectionsApi.ListCollectionsApiResponse apiResponse)
        {
            OnListCollections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListCollections(Exception exception)
        {
            OnErrorListCollections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReloadCollection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReloadCollection;

        internal void ExecuteOnReloadCollection(CollectionsApi.ReloadCollectionApiResponse apiResponse)
        {
            OnReloadCollection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReloadCollection(Exception exception)
        {
            OnErrorReloadCollection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRenameCollection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRenameCollection;

        internal void ExecuteOnRenameCollection(CollectionsApi.RenameCollectionApiResponse apiResponse)
        {
            OnRenameCollection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRenameCollection(Exception exception)
        {
            OnErrorRenameCollection?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CollectionsApi : ICollectionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CollectionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CollectionsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(ILogger<CollectionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CollectionsApiEvents collectionsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CollectionsApi>();
            HttpClient = httpClient;
            Events = collectionsApiEvents;
        }

        partial void FormatBalanceShardUnique(ref string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"></param>
        /// <returns></returns>
        private void ValidateBalanceShardUnique(string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (balanceShardUniqueRequestBody.IsSet && balanceShardUniqueRequestBody.Value == null)
                throw new ArgumentNullException(nameof(balanceShardUniqueRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"></param>
        private void AfterBalanceShardUniqueDefaultImplementation(IBalanceShardUniqueApiResponse apiResponseLocalVar, string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterBalanceShardUnique(ref suppressDefaultLog, apiResponseLocalVar, collectionName, balanceShardUniqueRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"></param>
        partial void AfterBalanceShardUnique(ref bool suppressDefaultLog, IBalanceShardUniqueApiResponse apiResponseLocalVar, string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"></param>
        private void OnErrorBalanceShardUniqueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBalanceShardUnique(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, balanceShardUniqueRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"></param>
        partial void OnErrorBalanceShardUnique(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody);

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceShardUniqueApiResponse"/>&gt;</returns>
        public async Task<IBalanceShardUniqueApiResponse?> BalanceShardUniqueOrDefaultAsync(string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BalanceShardUniqueAsync(collectionName, balanceShardUniqueRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Ensure a specified per-shard property is distributed evenly amongst physical nodes comprising a collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="balanceShardUniqueRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBalanceShardUniqueApiResponse"/>&gt;</returns>
        public async Task<IBalanceShardUniqueApiResponse> BalanceShardUniqueAsync(string collectionName, Option<BalanceShardUniqueRequestBody> balanceShardUniqueRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBalanceShardUnique(collectionName, balanceShardUniqueRequestBody);

                FormatBalanceShardUnique(ref collectionName, balanceShardUniqueRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/balance-shard-unique";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    if (balanceShardUniqueRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (balanceShardUniqueRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(balanceShardUniqueRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<BalanceShardUniqueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BalanceShardUniqueApiResponse>();

                        BalanceShardUniqueApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/balance-shard-unique", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBalanceShardUniqueDefaultImplementation(apiResponseLocalVar, collectionName, balanceShardUniqueRequestBody);

                        Events.ExecuteOnBalanceShardUnique(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBalanceShardUniqueDefaultImplementation(e, "/collections/{collectionName}/balance-shard-unique", uriBuilderLocalVar.Path, collectionName, balanceShardUniqueRequestBody);
                Events.ExecuteOnErrorBalanceShardUnique(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BalanceShardUniqueApiResponse"/>
        /// </summary>
        public partial class BalanceShardUniqueApiResponse : Org.OpenAPITools.Client.ApiResponse, IBalanceShardUniqueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BalanceShardUniqueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BalanceShardUniqueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BalanceShardUniqueApiResponse(ILogger<BalanceShardUniqueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateCollection(Option<CreateCollectionRequestBody> createCollectionRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createCollectionRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateCollection(Option<CreateCollectionRequestBody> createCollectionRequestBody)
        {
            if (createCollectionRequestBody.IsSet && createCollectionRequestBody.Value == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCollectionRequestBody"></param>
        private void AfterCreateCollectionDefaultImplementation(ICreateCollectionApiResponse apiResponseLocalVar, Option<CreateCollectionRequestBody> createCollectionRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateCollection(ref suppressDefaultLog, apiResponseLocalVar, createCollectionRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createCollectionRequestBody"></param>
        partial void AfterCreateCollection(ref bool suppressDefaultLog, ICreateCollectionApiResponse apiResponseLocalVar, Option<CreateCollectionRequestBody> createCollectionRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCollectionRequestBody"></param>
        private void OnErrorCreateCollectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateCollectionRequestBody> createCollectionRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateCollection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createCollectionRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createCollectionRequestBody"></param>
        partial void OnErrorCreateCollection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateCollectionRequestBody> createCollectionRequestBody);

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <param name="createCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionApiResponse?> CreateCollectionOrDefaultAsync(Option<CreateCollectionRequestBody> createCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateCollectionAsync(createCollectionRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new SolrCloud collection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateCollectionApiResponse"/>&gt;</returns>
        public async Task<ICreateCollectionApiResponse> CreateCollectionAsync(Option<CreateCollectionRequestBody> createCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateCollection(createCollectionRequestBody);

                FormatCreateCollection(createCollectionRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections";

                    if (createCollectionRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (createCollectionRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createCollectionRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateCollectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateCollectionApiResponse>();

                        CreateCollectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateCollectionDefaultImplementation(apiResponseLocalVar, createCollectionRequestBody);

                        Events.ExecuteOnCreateCollection(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateCollectionDefaultImplementation(e, "/collections", uriBuilderLocalVar.Path, createCollectionRequestBody);
                Events.ExecuteOnErrorCreateCollection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateCollectionApiResponse"/>
        /// </summary>
        public partial class CreateCollectionApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateCollectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateCollectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateCollectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateCollectionApiResponse(ILogger<CreateCollectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteCollection(ref string collectionName, ref Option<bool> followAliases, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteCollection(string collectionName, Option<string> async)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void AfterDeleteCollectionDefaultImplementation(IDeleteCollectionApiResponse apiResponseLocalVar, string collectionName, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCollection(ref suppressDefaultLog, apiResponseLocalVar, collectionName, followAliases, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void AfterDeleteCollection(ref bool suppressDefaultLog, IDeleteCollectionApiResponse apiResponseLocalVar, string collectionName, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteCollectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCollection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, followAliases, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteCollection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionApiResponse?> DeleteCollectionOrDefaultAsync(string collectionName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCollectionAsync(collectionName, followAliases, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a collection from SolrCloud 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">The name of the collection to be deleted.</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async">An ID to track the request asynchronously (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCollectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteCollectionApiResponse> DeleteCollectionAsync(string collectionName, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCollection(collectionName, async);

                FormatDeleteCollection(ref collectionName, ref followAliases, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (followAliases.IsSet)
                        parseQueryStringLocalVar["followAliases"] = ClientUtils.ParameterToString(followAliases.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteCollectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCollectionApiResponse>();

                        DeleteCollectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteCollectionDefaultImplementation(apiResponseLocalVar, collectionName, followAliases, async);

                        Events.ExecuteOnDeleteCollection(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCollectionDefaultImplementation(e, "/collections/{collectionName}", uriBuilderLocalVar.Path, collectionName, followAliases, async);
                Events.ExecuteOnErrorDeleteCollection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCollectionApiResponse"/>
        /// </summary>
        public partial class DeleteCollectionApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteCollectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCollectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCollectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCollectionApiResponse(ILogger<DeleteCollectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterListCollectionsDefaultImplementation(IListCollectionsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterListCollections(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterListCollections(ref bool suppressDefaultLog, IListCollectionsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorListCollectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListCollections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorListCollections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCollectionsApiResponse"/>&gt;</returns>
        public async Task<IListCollectionsApiResponse?> ListCollectionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListCollectionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all collections in this Solr cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCollectionsApiResponse"/>&gt;</returns>
        public async Task<IListCollectionsApiResponse> ListCollectionsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListCollectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListCollectionsApiResponse>();

                        ListCollectionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListCollectionsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnListCollections(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListCollectionsDefaultImplementation(e, "/collections", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorListCollections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListCollectionsApiResponse"/>
        /// </summary>
        public partial class ListCollectionsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListCollectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListCollectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListCollectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListCollectionsApiResponse(ILogger<ListCollectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListCollectionsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListCollectionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListCollectionsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReloadCollection(ref string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"></param>
        /// <returns></returns>
        private void ValidateReloadCollection(string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (reloadCollectionRequestBody.IsSet && reloadCollectionRequestBody.Value == null)
                throw new ArgumentNullException(nameof(reloadCollectionRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"></param>
        private void AfterReloadCollectionDefaultImplementation(IReloadCollectionApiResponse apiResponseLocalVar, string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterReloadCollection(ref suppressDefaultLog, apiResponseLocalVar, collectionName, reloadCollectionRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"></param>
        partial void AfterReloadCollection(ref bool suppressDefaultLog, IReloadCollectionApiResponse apiResponseLocalVar, string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"></param>
        private void OnErrorReloadCollectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReloadCollection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, reloadCollectionRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"></param>
        partial void OnErrorReloadCollection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody);

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCollectionApiResponse"/>&gt;</returns>
        public async Task<IReloadCollectionApiResponse?> ReloadCollectionOrDefaultAsync(string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReloadCollectionAsync(collectionName, reloadCollectionRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reload all cores in the specified collection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="reloadCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCollectionApiResponse"/>&gt;</returns>
        public async Task<IReloadCollectionApiResponse> ReloadCollectionAsync(string collectionName, Option<ReloadCollectionRequestBody> reloadCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReloadCollection(collectionName, reloadCollectionRequestBody);

                FormatReloadCollection(ref collectionName, reloadCollectionRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/reload";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    if (reloadCollectionRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (reloadCollectionRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(reloadCollectionRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReloadCollectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReloadCollectionApiResponse>();

                        ReloadCollectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/reload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReloadCollectionDefaultImplementation(apiResponseLocalVar, collectionName, reloadCollectionRequestBody);

                        Events.ExecuteOnReloadCollection(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReloadCollectionDefaultImplementation(e, "/collections/{collectionName}/reload", uriBuilderLocalVar.Path, collectionName, reloadCollectionRequestBody);
                Events.ExecuteOnErrorReloadCollection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReloadCollectionApiResponse"/>
        /// </summary>
        public partial class ReloadCollectionApiResponse : Org.OpenAPITools.Client.ApiResponse, IReloadCollectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReloadCollectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReloadCollectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReloadCollectionApiResponse(ILogger<ReloadCollectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRenameCollection(ref string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"></param>
        /// <returns></returns>
        private void ValidateRenameCollection(string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (renameCollectionRequestBody.IsSet && renameCollectionRequestBody.Value == null)
                throw new ArgumentNullException(nameof(renameCollectionRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"></param>
        private void AfterRenameCollectionDefaultImplementation(IRenameCollectionApiResponse apiResponseLocalVar, string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRenameCollection(ref suppressDefaultLog, apiResponseLocalVar, collectionName, renameCollectionRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"></param>
        partial void AfterRenameCollection(ref bool suppressDefaultLog, IRenameCollectionApiResponse apiResponseLocalVar, string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"></param>
        private void OnErrorRenameCollectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRenameCollection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, renameCollectionRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"></param>
        partial void OnErrorRenameCollection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody);

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCollectionApiResponse"/>&gt;</returns>
        public async Task<IRenameCollectionApiResponse?> RenameCollectionOrDefaultAsync(string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RenameCollectionAsync(collectionName, renameCollectionRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Rename a SolrCloud collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="renameCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCollectionApiResponse"/>&gt;</returns>
        public async Task<IRenameCollectionApiResponse> RenameCollectionAsync(string collectionName, Option<RenameCollectionRequestBody> renameCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRenameCollection(collectionName, renameCollectionRequestBody);

                FormatRenameCollection(ref collectionName, renameCollectionRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/rename";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    if (renameCollectionRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (renameCollectionRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(renameCollectionRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RenameCollectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RenameCollectionApiResponse>();

                        RenameCollectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/rename", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRenameCollectionDefaultImplementation(apiResponseLocalVar, collectionName, renameCollectionRequestBody);

                        Events.ExecuteOnRenameCollection(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRenameCollectionDefaultImplementation(e, "/collections/{collectionName}/rename", uriBuilderLocalVar.Path, collectionName, renameCollectionRequestBody);
                Events.ExecuteOnErrorRenameCollection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RenameCollectionApiResponse"/>
        /// </summary>
        public partial class RenameCollectionApiResponse : Org.OpenAPITools.Client.ApiResponse, IRenameCollectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RenameCollectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RenameCollectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RenameCollectionApiResponse(ILogger<RenameCollectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
