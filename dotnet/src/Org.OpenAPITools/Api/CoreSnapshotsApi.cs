// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICoreSnapshotsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CoreSnapshotsApiEvents Events { get; }

        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSnapshotApiResponse"/>&gt;</returns>
        Task<ICreateSnapshotApiResponse> CreateSnapshotAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new snapshot of the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSnapshotApiResponse"/>?&gt;</returns>
        Task<ICreateSnapshotApiResponse?> CreateSnapshotOrDefaultAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSnapshotApiResponse"/>&gt;</returns>
        Task<IDeleteSnapshotApiResponse> DeleteSnapshotAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a single snapshot from the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSnapshotApiResponse"/>?&gt;</returns>
        Task<IDeleteSnapshotApiResponse?> DeleteSnapshotOrDefaultAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshots1ApiResponse"/>&gt;</returns>
        Task<IListSnapshots1ApiResponse> ListSnapshots1Async(string coreName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List existing snapshots for the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshots1ApiResponse"/>?&gt;</returns>
        Task<IListSnapshots1ApiResponse?> ListSnapshots1OrDefaultAsync(string coreName, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateSnapshotApiResponse"/>
    /// </summary>
    public interface ICreateSnapshotApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.CreateCoreSnapshotResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSnapshotApiResponse"/>
    /// </summary>
    public interface IDeleteSnapshotApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.DeleteSnapshotResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListSnapshots1ApiResponse"/>
    /// </summary>
    public interface IListSnapshots1ApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListCoreSnapshotsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CoreSnapshotsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSnapshot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSnapshot;

        internal void ExecuteOnCreateSnapshot(CoreSnapshotsApi.CreateSnapshotApiResponse apiResponse)
        {
            OnCreateSnapshot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSnapshot(Exception exception)
        {
            OnErrorCreateSnapshot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSnapshot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSnapshot;

        internal void ExecuteOnDeleteSnapshot(CoreSnapshotsApi.DeleteSnapshotApiResponse apiResponse)
        {
            OnDeleteSnapshot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSnapshot(Exception exception)
        {
            OnErrorDeleteSnapshot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListSnapshots1;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListSnapshots1;

        internal void ExecuteOnListSnapshots1(CoreSnapshotsApi.ListSnapshots1ApiResponse apiResponse)
        {
            OnListSnapshots1?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSnapshots1(Exception exception)
        {
            OnErrorListSnapshots1?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CoreSnapshotsApi : ICoreSnapshotsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CoreSnapshotsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CoreSnapshotsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSnapshotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreSnapshotsApi(ILogger<CoreSnapshotsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CoreSnapshotsApiEvents coreSnapshotsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CoreSnapshotsApi>();
            HttpClient = httpClient;
            Events = coreSnapshotsApiEvents;
        }

        partial void FormatCreateSnapshot(ref string coreName, ref string snapshotName, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateCreateSnapshot(string coreName, string snapshotName, Option<string> async)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (snapshotName == null)
                throw new ArgumentNullException(nameof(snapshotName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        private void AfterCreateSnapshotDefaultImplementation(ICreateSnapshotApiResponse apiResponseLocalVar, string coreName, string snapshotName, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterCreateSnapshot(ref suppressDefaultLog, apiResponseLocalVar, coreName, snapshotName, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        partial void AfterCreateSnapshot(ref bool suppressDefaultLog, ICreateSnapshotApiResponse apiResponseLocalVar, string coreName, string snapshotName, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        private void OnErrorCreateSnapshotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, string snapshotName, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSnapshot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, snapshotName, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        partial void OnErrorCreateSnapshot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, string snapshotName, Option<string> async);

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSnapshotApiResponse"/>&gt;</returns>
        public async Task<ICreateSnapshotApiResponse?> CreateSnapshotOrDefaultAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSnapshotAsync(coreName, snapshotName, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new snapshot of the specified core. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to snapshot.</param>
        /// <param name="snapshotName">The name to associate with the core snapshot.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSnapshotApiResponse"/>&gt;</returns>
        public async Task<ICreateSnapshotApiResponse> CreateSnapshotAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSnapshot(coreName, snapshotName, async);

                FormatCreateSnapshot(ref coreName, ref snapshotName, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/snapshots/{snapshotName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsnapshotName%7D", Uri.EscapeDataString(snapshotName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSnapshotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSnapshotApiResponse>();

                        CreateSnapshotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/snapshots/{snapshotName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSnapshotDefaultImplementation(apiResponseLocalVar, coreName, snapshotName, async);

                        Events.ExecuteOnCreateSnapshot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSnapshotDefaultImplementation(e, "/cores/{coreName}/snapshots/{snapshotName}", uriBuilderLocalVar.Path, coreName, snapshotName, async);
                Events.ExecuteOnErrorCreateSnapshot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSnapshotApiResponse"/>
        /// </summary>
        public partial class CreateSnapshotApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateSnapshotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSnapshotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSnapshotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSnapshotApiResponse(ILogger<CreateSnapshotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateCoreSnapshotResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateCoreSnapshotResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateCoreSnapshotResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSnapshot(ref string coreName, ref string snapshotName, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteSnapshot(string coreName, string snapshotName, Option<string> async)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (snapshotName == null)
                throw new ArgumentNullException(nameof(snapshotName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        private void AfterDeleteSnapshotDefaultImplementation(IDeleteSnapshotApiResponse apiResponseLocalVar, string coreName, string snapshotName, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSnapshot(ref suppressDefaultLog, apiResponseLocalVar, coreName, snapshotName, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        partial void AfterDeleteSnapshot(ref bool suppressDefaultLog, IDeleteSnapshotApiResponse apiResponseLocalVar, string coreName, string snapshotName, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteSnapshotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, string snapshotName, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSnapshot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, snapshotName, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="snapshotName"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteSnapshot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, string snapshotName, Option<string> async);

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSnapshotApiResponse"/>&gt;</returns>
        public async Task<IDeleteSnapshotApiResponse?> DeleteSnapshotOrDefaultAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSnapshotAsync(coreName, snapshotName, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a single snapshot from the specified core. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to delete a snapshot.</param>
        /// <param name="snapshotName">The name of the core snapshot to delete.</param>
        /// <param name="async">The id to associate with the async task. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSnapshotApiResponse"/>&gt;</returns>
        public async Task<IDeleteSnapshotApiResponse> DeleteSnapshotAsync(string coreName, string snapshotName, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSnapshot(coreName, snapshotName, async);

                FormatDeleteSnapshot(ref coreName, ref snapshotName, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/snapshots/{snapshotName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsnapshotName%7D", Uri.EscapeDataString(snapshotName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSnapshotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSnapshotApiResponse>();

                        DeleteSnapshotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/snapshots/{snapshotName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSnapshotDefaultImplementation(apiResponseLocalVar, coreName, snapshotName, async);

                        Events.ExecuteOnDeleteSnapshot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSnapshotDefaultImplementation(e, "/cores/{coreName}/snapshots/{snapshotName}", uriBuilderLocalVar.Path, coreName, snapshotName, async);
                Events.ExecuteOnErrorDeleteSnapshot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSnapshotApiResponse"/>
        /// </summary>
        public partial class DeleteSnapshotApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteSnapshotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSnapshotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSnapshotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSnapshotApiResponse(ILogger<DeleteSnapshotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DeleteSnapshotResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DeleteSnapshotResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.DeleteSnapshotResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSnapshots1(ref string coreName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <returns></returns>
        private void ValidateListSnapshots1(string coreName)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        private void AfterListSnapshots1DefaultImplementation(IListSnapshots1ApiResponse apiResponseLocalVar, string coreName)
        {
            bool suppressDefaultLog = false;
            AfterListSnapshots1(ref suppressDefaultLog, apiResponseLocalVar, coreName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        partial void AfterListSnapshots1(ref bool suppressDefaultLog, IListSnapshots1ApiResponse apiResponseLocalVar, string coreName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        private void OnErrorListSnapshots1DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSnapshots1(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        partial void OnErrorListSnapshots1(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName);

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshots1ApiResponse"/>&gt;</returns>
        public async Task<IListSnapshots1ApiResponse?> ListSnapshots1OrDefaultAsync(string coreName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSnapshots1Async(coreName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List existing snapshots for the specified core. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core for which to retrieve snapshots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSnapshots1ApiResponse"/>&gt;</returns>
        public async Task<IListSnapshots1ApiResponse> ListSnapshots1Async(string coreName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSnapshots1(coreName);

                FormatListSnapshots1(ref coreName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/snapshots";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListSnapshots1ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSnapshots1ApiResponse>();

                        ListSnapshots1ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/snapshots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListSnapshots1DefaultImplementation(apiResponseLocalVar, coreName);

                        Events.ExecuteOnListSnapshots1(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSnapshots1DefaultImplementation(e, "/cores/{coreName}/snapshots", uriBuilderLocalVar.Path, coreName);
                Events.ExecuteOnErrorListSnapshots1(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSnapshots1ApiResponse"/>
        /// </summary>
        public partial class ListSnapshots1ApiResponse : Org.OpenAPITools.Client.ApiResponse, IListSnapshots1ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSnapshots1ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSnapshots1ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSnapshots1ApiResponse(ILogger<ListSnapshots1ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListCoreSnapshotsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListCoreSnapshotsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListCoreSnapshotsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
