// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICoresApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CoresApiEvents Events { get; }

        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallCoreDataApiResponse"/>&gt;</returns>
        Task<IInstallCoreDataApiResponse> InstallCoreDataAsync(string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Install an offline index to a specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallCoreDataApiResponse"/>?&gt;</returns>
        Task<IInstallCoreDataApiResponse?> InstallCoreDataOrDefaultAsync(string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBody">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeIndexesApiResponse"/>&gt;</returns>
        Task<IMergeIndexesApiResponse> MergeIndexesAsync(string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBody">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeIndexesApiResponse"/>?&gt;</returns>
        Task<IMergeIndexesApiResponse?> MergeIndexesOrDefaultAsync(string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCoreApiResponse"/>&gt;</returns>
        Task<IReloadCoreApiResponse> ReloadCoreAsync(string coreName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reload the specified core.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCoreApiResponse"/>?&gt;</returns>
        Task<IReloadCoreApiResponse?> ReloadCoreOrDefaultAsync(string coreName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCoreApiResponse"/>&gt;</returns>
        Task<IRenameCoreApiResponse> RenameCoreAsync(string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// The RENAME action changes the name of a Solr core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCoreApiResponse"/>?&gt;</returns>
        Task<IRenameCoreApiResponse?> RenameCoreOrDefaultAsync(string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCoreApiResponse"/>&gt;</returns>
        Task<IRestoreCoreApiResponse> RestoreCoreAsync(string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restore a previously-taken backup to the specified core
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCoreApiResponse"/>?&gt;</returns>
        Task<IRestoreCoreApiResponse?> RestoreCoreOrDefaultAsync(string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISwapCoresApiResponse"/>&gt;</returns>
        Task<ISwapCoresApiResponse> SwapCoresAsync(string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISwapCoresApiResponse"/>?&gt;</returns>
        Task<ISwapCoresApiResponse?> SwapCoresOrDefaultAsync(string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadCoreApiResponse"/>&gt;</returns>
        Task<IUnloadCoreApiResponse> UnloadCoreAsync(string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unloads a single core specified by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadCoreApiResponse"/>?&gt;</returns>
        Task<IUnloadCoreApiResponse?> UnloadCoreOrDefaultAsync(string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IInstallCoreDataApiResponse"/>
    /// </summary>
    public interface IInstallCoreDataApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IMergeIndexesApiResponse"/>
    /// </summary>
    public interface IMergeIndexesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IReloadCoreApiResponse"/>
    /// </summary>
    public interface IReloadCoreApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IRenameCoreApiResponse"/>
    /// </summary>
    public interface IRenameCoreApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IRestoreCoreApiResponse"/>
    /// </summary>
    public interface IRestoreCoreApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISwapCoresApiResponse"/>
    /// </summary>
    public interface ISwapCoresApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUnloadCoreApiResponse"/>
    /// </summary>
    public interface IUnloadCoreApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CoresApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallCoreData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallCoreData;

        internal void ExecuteOnInstallCoreData(CoresApi.InstallCoreDataApiResponse apiResponse)
        {
            OnInstallCoreData?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallCoreData(Exception exception)
        {
            OnErrorInstallCoreData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMergeIndexes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMergeIndexes;

        internal void ExecuteOnMergeIndexes(CoresApi.MergeIndexesApiResponse apiResponse)
        {
            OnMergeIndexes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMergeIndexes(Exception exception)
        {
            OnErrorMergeIndexes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReloadCore;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReloadCore;

        internal void ExecuteOnReloadCore(CoresApi.ReloadCoreApiResponse apiResponse)
        {
            OnReloadCore?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReloadCore(Exception exception)
        {
            OnErrorReloadCore?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRenameCore;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRenameCore;

        internal void ExecuteOnRenameCore(CoresApi.RenameCoreApiResponse apiResponse)
        {
            OnRenameCore?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRenameCore(Exception exception)
        {
            OnErrorRenameCore?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRestoreCore;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRestoreCore;

        internal void ExecuteOnRestoreCore(CoresApi.RestoreCoreApiResponse apiResponse)
        {
            OnRestoreCore?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRestoreCore(Exception exception)
        {
            OnErrorRestoreCore?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSwapCores;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSwapCores;

        internal void ExecuteOnSwapCores(CoresApi.SwapCoresApiResponse apiResponse)
        {
            OnSwapCores?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSwapCores(Exception exception)
        {
            OnErrorSwapCores?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnloadCore;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnloadCore;

        internal void ExecuteOnUnloadCore(CoresApi.UnloadCoreApiResponse apiResponse)
        {
            OnUnloadCore?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnloadCore(Exception exception)
        {
            OnErrorUnloadCore?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CoresApi : ICoresApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CoresApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CoresApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoresApi(ILogger<CoresApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CoresApiEvents coresApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CoresApi>();
            HttpClient = httpClient;
            Events = coresApiEvents;
        }

        partial void FormatInstallCoreData(ref string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"></param>
        /// <returns></returns>
        private void ValidateInstallCoreData(string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (installCoreDataRequestBody.IsSet && installCoreDataRequestBody.Value == null)
                throw new ArgumentNullException(nameof(installCoreDataRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"></param>
        private void AfterInstallCoreDataDefaultImplementation(IInstallCoreDataApiResponse apiResponseLocalVar, string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterInstallCoreData(ref suppressDefaultLog, apiResponseLocalVar, coreName, installCoreDataRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"></param>
        partial void AfterInstallCoreData(ref bool suppressDefaultLog, IInstallCoreDataApiResponse apiResponseLocalVar, string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"></param>
        private void OnErrorInstallCoreDataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallCoreData(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, installCoreDataRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"></param>
        partial void OnErrorInstallCoreData(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody);

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallCoreDataApiResponse"/>&gt;</returns>
        public async Task<IInstallCoreDataApiResponse?> InstallCoreDataOrDefaultAsync(string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallCoreDataAsync(coreName, installCoreDataRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Install an offline index to a specified core 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="installCoreDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallCoreDataApiResponse"/>&gt;</returns>
        public async Task<IInstallCoreDataApiResponse> InstallCoreDataAsync(string coreName, Option<InstallCoreDataRequestBody> installCoreDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallCoreData(coreName, installCoreDataRequestBody);

                FormatInstallCoreData(ref coreName, installCoreDataRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/install";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (installCoreDataRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (installCoreDataRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installCoreDataRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallCoreDataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallCoreDataApiResponse>();

                        InstallCoreDataApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/install", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallCoreDataDefaultImplementation(apiResponseLocalVar, coreName, installCoreDataRequestBody);

                        Events.ExecuteOnInstallCoreData(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallCoreDataDefaultImplementation(e, "/cores/{coreName}/install", uriBuilderLocalVar.Path, coreName, installCoreDataRequestBody);
                Events.ExecuteOnErrorInstallCoreData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallCoreDataApiResponse"/>
        /// </summary>
        public partial class InstallCoreDataApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallCoreDataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallCoreDataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallCoreDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallCoreDataApiResponse(ILogger<InstallCoreDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMergeIndexes(ref string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="mergeIndexesRequestBody"></param>
        /// <returns></returns>
        private void ValidateMergeIndexes(string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (mergeIndexesRequestBody.IsSet && mergeIndexesRequestBody.Value == null)
                throw new ArgumentNullException(nameof(mergeIndexesRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="mergeIndexesRequestBody"></param>
        private void AfterMergeIndexesDefaultImplementation(IMergeIndexesApiResponse apiResponseLocalVar, string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterMergeIndexes(ref suppressDefaultLog, apiResponseLocalVar, coreName, mergeIndexesRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="mergeIndexesRequestBody"></param>
        partial void AfterMergeIndexes(ref bool suppressDefaultLog, IMergeIndexesApiResponse apiResponseLocalVar, string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="mergeIndexesRequestBody"></param>
        private void OnErrorMergeIndexesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMergeIndexes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, mergeIndexesRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="mergeIndexesRequestBody"></param>
        partial void OnErrorMergeIndexes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody);

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBody">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeIndexesApiResponse"/>&gt;</returns>
        public async Task<IMergeIndexesApiResponse?> MergeIndexesOrDefaultAsync(string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MergeIndexesAsync(coreName, mergeIndexesRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// The MERGEINDEXES action merges one or more indexes to another index. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The core that the specified indices are merged into.</param>
        /// <param name="mergeIndexesRequestBody">Additional properties for merge indexes. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeIndexesApiResponse"/>&gt;</returns>
        public async Task<IMergeIndexesApiResponse> MergeIndexesAsync(string coreName, Option<MergeIndexesRequestBody> mergeIndexesRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMergeIndexes(coreName, mergeIndexesRequestBody);

                FormatMergeIndexes(ref coreName, mergeIndexesRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/merge-indices";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (mergeIndexesRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (mergeIndexesRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(mergeIndexesRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MergeIndexesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MergeIndexesApiResponse>();

                        MergeIndexesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/merge-indices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMergeIndexesDefaultImplementation(apiResponseLocalVar, coreName, mergeIndexesRequestBody);

                        Events.ExecuteOnMergeIndexes(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMergeIndexesDefaultImplementation(e, "/cores/{coreName}/merge-indices", uriBuilderLocalVar.Path, coreName, mergeIndexesRequestBody);
                Events.ExecuteOnErrorMergeIndexes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MergeIndexesApiResponse"/>
        /// </summary>
        public partial class MergeIndexesApiResponse : Org.OpenAPITools.Client.ApiResponse, IMergeIndexesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MergeIndexesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MergeIndexesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergeIndexesApiResponse(ILogger<MergeIndexesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReloadCore(ref string coreName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <returns></returns>
        private void ValidateReloadCore(string coreName)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        private void AfterReloadCoreDefaultImplementation(IReloadCoreApiResponse apiResponseLocalVar, string coreName)
        {
            bool suppressDefaultLog = false;
            AfterReloadCore(ref suppressDefaultLog, apiResponseLocalVar, coreName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        partial void AfterReloadCore(ref bool suppressDefaultLog, IReloadCoreApiResponse apiResponseLocalVar, string coreName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        private void OnErrorReloadCoreDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReloadCore(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        partial void OnErrorReloadCore(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName);

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCoreApiResponse"/>&gt;</returns>
        public async Task<IReloadCoreApiResponse?> ReloadCoreOrDefaultAsync(string coreName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReloadCoreAsync(coreName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reload the specified core. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to reload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReloadCoreApiResponse"/>&gt;</returns>
        public async Task<IReloadCoreApiResponse> ReloadCoreAsync(string coreName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReloadCore(coreName);

                FormatReloadCore(ref coreName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/reload";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReloadCoreApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReloadCoreApiResponse>();

                        ReloadCoreApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/reload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReloadCoreDefaultImplementation(apiResponseLocalVar, coreName);

                        Events.ExecuteOnReloadCore(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReloadCoreDefaultImplementation(e, "/cores/{coreName}/reload", uriBuilderLocalVar.Path, coreName);
                Events.ExecuteOnErrorReloadCore(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReloadCoreApiResponse"/>
        /// </summary>
        public partial class ReloadCoreApiResponse : Org.OpenAPITools.Client.ApiResponse, IReloadCoreApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReloadCoreApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReloadCoreApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReloadCoreApiResponse(ILogger<ReloadCoreApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRenameCore(ref string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody"></param>
        /// <returns></returns>
        private void ValidateRenameCore(string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (renameCoreRequestBody.IsSet && renameCoreRequestBody.Value == null)
                throw new ArgumentNullException(nameof(renameCoreRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody"></param>
        private void AfterRenameCoreDefaultImplementation(IRenameCoreApiResponse apiResponseLocalVar, string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRenameCore(ref suppressDefaultLog, apiResponseLocalVar, coreName, renameCoreRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody"></param>
        partial void AfterRenameCore(ref bool suppressDefaultLog, IRenameCoreApiResponse apiResponseLocalVar, string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody"></param>
        private void OnErrorRenameCoreDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRenameCore(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, renameCoreRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody"></param>
        partial void OnErrorRenameCore(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody);

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCoreApiResponse"/>&gt;</returns>
        public async Task<IRenameCoreApiResponse?> RenameCoreOrDefaultAsync(string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RenameCoreAsync(coreName, renameCoreRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// The RENAME action changes the name of a Solr core 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="renameCoreRequestBody">Additional properties related to the core renaming (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameCoreApiResponse"/>&gt;</returns>
        public async Task<IRenameCoreApiResponse> RenameCoreAsync(string coreName, Option<RenameCoreRequestBody> renameCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRenameCore(coreName, renameCoreRequestBody);

                FormatRenameCore(ref coreName, renameCoreRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/rename";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (renameCoreRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (renameCoreRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(renameCoreRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RenameCoreApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RenameCoreApiResponse>();

                        RenameCoreApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/rename", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRenameCoreDefaultImplementation(apiResponseLocalVar, coreName, renameCoreRequestBody);

                        Events.ExecuteOnRenameCore(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRenameCoreDefaultImplementation(e, "/cores/{coreName}/rename", uriBuilderLocalVar.Path, coreName, renameCoreRequestBody);
                Events.ExecuteOnErrorRenameCore(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RenameCoreApiResponse"/>
        /// </summary>
        public partial class RenameCoreApiResponse : Org.OpenAPITools.Client.ApiResponse, IRenameCoreApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RenameCoreApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RenameCoreApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RenameCoreApiResponse(ILogger<RenameCoreApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRestoreCore(ref string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="restoreCoreRequestBody"></param>
        /// <returns></returns>
        private void ValidateRestoreCore(string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (restoreCoreRequestBody.IsSet && restoreCoreRequestBody.Value == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="restoreCoreRequestBody"></param>
        private void AfterRestoreCoreDefaultImplementation(IRestoreCoreApiResponse apiResponseLocalVar, string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRestoreCore(ref suppressDefaultLog, apiResponseLocalVar, coreName, restoreCoreRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="restoreCoreRequestBody"></param>
        partial void AfterRestoreCore(ref bool suppressDefaultLog, IRestoreCoreApiResponse apiResponseLocalVar, string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="restoreCoreRequestBody"></param>
        private void OnErrorRestoreCoreDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRestoreCore(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, restoreCoreRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="restoreCoreRequestBody"></param>
        partial void OnErrorRestoreCore(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody);

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCoreApiResponse"/>&gt;</returns>
        public async Task<IRestoreCoreApiResponse?> RestoreCoreOrDefaultAsync(string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RestoreCoreAsync(coreName, restoreCoreRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Restore a previously-taken backup to the specified core 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName">The name of the core to be restored</param>
        /// <param name="restoreCoreRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreCoreApiResponse"/>&gt;</returns>
        public async Task<IRestoreCoreApiResponse> RestoreCoreAsync(string coreName, Option<RestoreCoreRequestBody> restoreCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRestoreCore(coreName, restoreCoreRequestBody);

                FormatRestoreCore(ref coreName, restoreCoreRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/restore";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (restoreCoreRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (restoreCoreRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(restoreCoreRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RestoreCoreApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RestoreCoreApiResponse>();

                        RestoreCoreApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/restore", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRestoreCoreDefaultImplementation(apiResponseLocalVar, coreName, restoreCoreRequestBody);

                        Events.ExecuteOnRestoreCore(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRestoreCoreDefaultImplementation(e, "/cores/{coreName}/restore", uriBuilderLocalVar.Path, coreName, restoreCoreRequestBody);
                Events.ExecuteOnErrorRestoreCore(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RestoreCoreApiResponse"/>
        /// </summary>
        public partial class RestoreCoreApiResponse : Org.OpenAPITools.Client.ApiResponse, IRestoreCoreApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RestoreCoreApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RestoreCoreApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RestoreCoreApiResponse(ILogger<RestoreCoreApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSwapCores(ref string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody"></param>
        /// <returns></returns>
        private void ValidateSwapCores(string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (swapCoresRequestBody.IsSet && swapCoresRequestBody.Value == null)
                throw new ArgumentNullException(nameof(swapCoresRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody"></param>
        private void AfterSwapCoresDefaultImplementation(ISwapCoresApiResponse apiResponseLocalVar, string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterSwapCores(ref suppressDefaultLog, apiResponseLocalVar, coreName, swapCoresRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody"></param>
        partial void AfterSwapCores(ref bool suppressDefaultLog, ISwapCoresApiResponse apiResponseLocalVar, string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody"></param>
        private void OnErrorSwapCoresDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSwapCores(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, swapCoresRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody"></param>
        partial void OnErrorSwapCores(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody);

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISwapCoresApiResponse"/>&gt;</returns>
        public async Task<ISwapCoresApiResponse?> SwapCoresOrDefaultAsync(string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SwapCoresAsync(coreName, swapCoresRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// SWAP atomically swaps the names used to access two existing Solr cores. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="swapCoresRequestBody">Additional properties related to core swapping. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISwapCoresApiResponse"/>&gt;</returns>
        public async Task<ISwapCoresApiResponse> SwapCoresAsync(string coreName, Option<SwapCoresRequestBody> swapCoresRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSwapCores(coreName, swapCoresRequestBody);

                FormatSwapCores(ref coreName, swapCoresRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/swap";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (swapCoresRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (swapCoresRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(swapCoresRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SwapCoresApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SwapCoresApiResponse>();

                        SwapCoresApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/swap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSwapCoresDefaultImplementation(apiResponseLocalVar, coreName, swapCoresRequestBody);

                        Events.ExecuteOnSwapCores(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSwapCoresDefaultImplementation(e, "/cores/{coreName}/swap", uriBuilderLocalVar.Path, coreName, swapCoresRequestBody);
                Events.ExecuteOnErrorSwapCores(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SwapCoresApiResponse"/>
        /// </summary>
        public partial class SwapCoresApiResponse : Org.OpenAPITools.Client.ApiResponse, ISwapCoresApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SwapCoresApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SwapCoresApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SwapCoresApiResponse(ILogger<SwapCoresApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnloadCore(ref string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody"></param>
        /// <returns></returns>
        private void ValidateUnloadCore(string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody)
        {
            if (coreName == null)
                throw new ArgumentNullException(nameof(coreName));

            if (unloadCoreRequestBody.IsSet && unloadCoreRequestBody.Value == null)
                throw new ArgumentNullException(nameof(unloadCoreRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody"></param>
        private void AfterUnloadCoreDefaultImplementation(IUnloadCoreApiResponse apiResponseLocalVar, string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterUnloadCore(ref suppressDefaultLog, apiResponseLocalVar, coreName, unloadCoreRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody"></param>
        partial void AfterUnloadCore(ref bool suppressDefaultLog, IUnloadCoreApiResponse apiResponseLocalVar, string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody"></param>
        private void OnErrorUnloadCoreDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUnloadCore(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, coreName, unloadCoreRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody"></param>
        partial void OnErrorUnloadCore(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody);

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadCoreApiResponse"/>&gt;</returns>
        public async Task<IUnloadCoreApiResponse?> UnloadCoreOrDefaultAsync(string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnloadCoreAsync(coreName, unloadCoreRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unloads a single core specified by name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreName"></param>
        /// <param name="unloadCoreRequestBody">Additional properties related to the core unloading (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadCoreApiResponse"/>&gt;</returns>
        public async Task<IUnloadCoreApiResponse> UnloadCoreAsync(string coreName, Option<UnloadCoreRequestBody> unloadCoreRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnloadCore(coreName, unloadCoreRequestBody);

                FormatUnloadCore(ref coreName, unloadCoreRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cores/{coreName}/unload";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcoreName%7D", Uri.EscapeDataString(coreName.ToString()));

                    if (unloadCoreRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (unloadCoreRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(unloadCoreRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnloadCoreApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnloadCoreApiResponse>();

                        UnloadCoreApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cores/{coreName}/unload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnloadCoreDefaultImplementation(apiResponseLocalVar, coreName, unloadCoreRequestBody);

                        Events.ExecuteOnUnloadCore(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnloadCoreDefaultImplementation(e, "/cores/{coreName}/unload", uriBuilderLocalVar.Path, coreName, unloadCoreRequestBody);
                Events.ExecuteOnErrorUnloadCore(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnloadCoreApiResponse"/>
        /// </summary>
        public partial class UnloadCoreApiResponse : Org.OpenAPITools.Client.ApiResponse, IUnloadCoreApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnloadCoreApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnloadCoreApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnloadCoreApiResponse(ILogger<UnloadCoreApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
