// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFileStoreApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FileStoreApiEvents Events { get; }

        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        Task<IDeleteFileApiResponse> DeleteFileAsync(string path, Option<bool> localDelete = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a file or directory from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>?&gt;</returns>
        Task<IDeleteFileApiResponse?> DeleteFileOrDefaultAsync(string path, Option<bool> localDelete = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        Task<IGetFileApiResponse> GetFileAsync(string path, Option<bool> sync = default, Option<string> getFrom = default, Option<bool> meta = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve file contents or metadata from the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>?&gt;</returns>
        Task<IGetFileApiResponse?> GetFileOrDefaultAsync(string path, Option<bool> sync = default, Option<string> getFrom = default, Option<bool> meta = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiResponse"/>&gt;</returns>
        Task<IUploadFileApiResponse> UploadFileAsync(string filePath, Object body, Option<List<string>> sig = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload a file to the filestore.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiResponse"/>?&gt;</returns>
        Task<IUploadFileApiResponse?> UploadFileOrDefaultAsync(string filePath, Object body, Option<List<string>> sig = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteFileApiResponse"/>
    /// </summary>
    public interface IDeleteFileApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFileApiResponse"/>
    /// </summary>
    public interface IGetFileApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUploadFileApiResponse"/>
    /// </summary>
    public interface IUploadFileApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.UploadToFileStoreResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FileStoreApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFile;

        internal void ExecuteOnDeleteFile(FileStoreApi.DeleteFileApiResponse apiResponse)
        {
            OnDeleteFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFile(Exception exception)
        {
            OnErrorDeleteFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFile;

        internal void ExecuteOnGetFile(FileStoreApi.GetFileApiResponse apiResponse)
        {
            OnGetFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFile(Exception exception)
        {
            OnErrorGetFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadFile;

        internal void ExecuteOnUploadFile(FileStoreApi.UploadFileApiResponse apiResponse)
        {
            OnUploadFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadFile(Exception exception)
        {
            OnErrorUploadFile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FileStoreApi : IFileStoreApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FileStoreApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FileStoreApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileStoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileStoreApi(ILogger<FileStoreApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FileStoreApiEvents fileStoreApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FileStoreApi>();
            HttpClient = httpClient;
            Events = fileStoreApiEvents;
        }

        partial void FormatDeleteFile(ref string path, ref Option<bool> localDelete);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        private void ValidateDeleteFile(string path)
        {
            if (path == null)
                throw new ArgumentNullException(nameof(path));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="localDelete"></param>
        private void AfterDeleteFileDefaultImplementation(IDeleteFileApiResponse apiResponseLocalVar, string path, Option<bool> localDelete)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFile(ref suppressDefaultLog, apiResponseLocalVar, path, localDelete);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="localDelete"></param>
        partial void AfterDeleteFile(ref bool suppressDefaultLog, IDeleteFileApiResponse apiResponseLocalVar, string path, Option<bool> localDelete);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="localDelete"></param>
        private void OnErrorDeleteFileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string path, Option<bool> localDelete)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, path, localDelete);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="localDelete"></param>
        partial void OnErrorDeleteFile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string path, Option<bool> localDelete);

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileApiResponse?> DeleteFileOrDefaultAsync(string path, Option<bool> localDelete = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFileAsync(path, localDelete, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a file or directory from the filestore. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="localDelete">Indicates whether the deletion should only be done on the receiving node.  For internal use only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileApiResponse> DeleteFileAsync(string path, Option<bool> localDelete = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFile(path);

                FormatDeleteFile(ref path, ref localDelete);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/files{path}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpath%7D", Uri.EscapeDataString(path.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (localDelete.IsSet)
                        parseQueryStringLocalVar["localDelete"] = ClientUtils.ParameterToString(localDelete.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFileApiResponse>();

                        DeleteFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/files{path}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFileDefaultImplementation(apiResponseLocalVar, path, localDelete);

                        Events.ExecuteOnDeleteFile(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFileDefaultImplementation(e, "/cluster/files{path}", uriBuilderLocalVar.Path, path, localDelete);
                Events.ExecuteOnErrorDeleteFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFileApiResponse"/>
        /// </summary>
        public partial class DeleteFileApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFileApiResponse(ILogger<DeleteFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFile(ref string path, ref Option<bool> sync, ref Option<string> getFrom, ref Option<bool> meta);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="path"></param>
        /// <param name="getFrom"></param>
        /// <returns></returns>
        private void ValidateGetFile(string path, Option<string> getFrom)
        {
            if (path == null)
                throw new ArgumentNullException(nameof(path));

            if (getFrom.IsSet && getFrom.Value == null)
                throw new ArgumentNullException(nameof(getFrom));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="sync"></param>
        /// <param name="getFrom"></param>
        /// <param name="meta"></param>
        private void AfterGetFileDefaultImplementation(IGetFileApiResponse apiResponseLocalVar, string path, Option<bool> sync, Option<string> getFrom, Option<bool> meta)
        {
            bool suppressDefaultLog = false;
            AfterGetFile(ref suppressDefaultLog, apiResponseLocalVar, path, sync, getFrom, meta);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="sync"></param>
        /// <param name="getFrom"></param>
        /// <param name="meta"></param>
        partial void AfterGetFile(ref bool suppressDefaultLog, IGetFileApiResponse apiResponseLocalVar, string path, Option<bool> sync, Option<string> getFrom, Option<bool> meta);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="sync"></param>
        /// <param name="getFrom"></param>
        /// <param name="meta"></param>
        private void OnErrorGetFileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string path, Option<bool> sync, Option<string> getFrom, Option<bool> meta)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, path, sync, getFrom, meta);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="path"></param>
        /// <param name="sync"></param>
        /// <param name="getFrom"></param>
        /// <param name="meta"></param>
        partial void OnErrorGetFile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string path, Option<bool> sync, Option<string> getFrom, Option<bool> meta);

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        public async Task<IGetFileApiResponse?> GetFileOrDefaultAsync(string path, Option<bool> sync = default, Option<string> getFrom = default, Option<bool> meta = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFileAsync(path, sync, getFrom, meta, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve file contents or metadata from the filestore. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Path to a file or directory within the filestore</param>
        /// <param name="sync">If true, triggers syncing for this file across all nodes in the filestore (optional)</param>
        /// <param name="getFrom">An optional Solr node name to fetch the file from (optional)</param>
        /// <param name="meta">Indicates that (only) file metadata should be fetched (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        public async Task<IGetFileApiResponse> GetFileAsync(string path, Option<bool> sync = default, Option<string> getFrom = default, Option<bool> meta = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFile(path, getFrom);

                FormatGetFile(ref path, ref sync, ref getFrom, ref meta);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/files{path}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpath%7D", Uri.EscapeDataString(path.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sync.IsSet)
                        parseQueryStringLocalVar["sync"] = ClientUtils.ParameterToString(sync.Value);

                    if (getFrom.IsSet)
                        parseQueryStringLocalVar["getFrom"] = ClientUtils.ParameterToString(getFrom.Value);

                    if (meta.IsSet)
                        parseQueryStringLocalVar["meta"] = ClientUtils.ParameterToString(meta.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFileApiResponse>();

                        GetFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/files{path}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFileDefaultImplementation(apiResponseLocalVar, path, sync, getFrom, meta);

                        Events.ExecuteOnGetFile(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFileDefaultImplementation(e, "/node/files{path}", uriBuilderLocalVar.Path, path, sync, getFrom, meta);
                Events.ExecuteOnErrorGetFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFileApiResponse"/>
        /// </summary>
        public partial class GetFileApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFileApiResponse(ILogger<GetFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadFile(ref string filePath, ref Object body, Option<List<string>> sig);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="body"></param>
        /// <param name="sig"></param>
        /// <returns></returns>
        private void ValidateUploadFile(string filePath, Object body, Option<List<string>> sig)
        {
            if (filePath == null)
                throw new ArgumentNullException(nameof(filePath));

            if (body == null)
                throw new ArgumentNullException(nameof(body));

            if (sig.IsSet && sig.Value == null)
                throw new ArgumentNullException(nameof(sig));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filePath"></param>
        /// <param name="body"></param>
        /// <param name="sig"></param>
        private void AfterUploadFileDefaultImplementation(IUploadFileApiResponse apiResponseLocalVar, string filePath, Object body, Option<List<string>> sig)
        {
            bool suppressDefaultLog = false;
            AfterUploadFile(ref suppressDefaultLog, apiResponseLocalVar, filePath, body, sig);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filePath"></param>
        /// <param name="body"></param>
        /// <param name="sig"></param>
        partial void AfterUploadFile(ref bool suppressDefaultLog, IUploadFileApiResponse apiResponseLocalVar, string filePath, Object body, Option<List<string>> sig);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filePath"></param>
        /// <param name="body"></param>
        /// <param name="sig"></param>
        private void OnErrorUploadFileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string filePath, Object body, Option<List<string>> sig)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadFile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filePath, body, sig);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filePath"></param>
        /// <param name="body"></param>
        /// <param name="sig"></param>
        partial void OnErrorUploadFile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string filePath, Object body, Option<List<string>> sig);

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiResponse"/>&gt;</returns>
        public async Task<IUploadFileApiResponse?> UploadFileOrDefaultAsync(string filePath, Object body, Option<List<string>> sig = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadFileAsync(filePath, body, sig, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload a file to the filestore. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">File store path</param>
        /// <param name="body"></param>
        /// <param name="sig">Signature(s) for the file being uploaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadFileApiResponse"/>&gt;</returns>
        public async Task<IUploadFileApiResponse> UploadFileAsync(string filePath, Object body, Option<List<string>> sig = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadFile(filePath, body, sig);

                FormatUploadFile(ref filePath, ref body, sig);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/files{filePath}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfilePath%7D", Uri.EscapeDataString(filePath.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sig.IsSet)
                        parseQueryStringLocalVar["sig"] = ClientUtils.ParameterToString(sig.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadFileApiResponse>();

                        UploadFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/files{filePath}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadFileDefaultImplementation(apiResponseLocalVar, filePath, body, sig);

                        Events.ExecuteOnUploadFile(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadFileDefaultImplementation(e, "/cluster/files{filePath}", uriBuilderLocalVar.Path, filePath, body, sig);
                Events.ExecuteOnErrorUploadFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadFileApiResponse"/>
        /// </summary>
        public partial class UploadFileApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadFileApiResponse(ILogger<UploadFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UploadToFileStoreResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UploadToFileStoreResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.UploadToFileStoreResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
