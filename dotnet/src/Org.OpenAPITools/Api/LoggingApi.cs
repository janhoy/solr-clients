// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILoggingApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LoggingApiEvents Events { get; }

        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFetchLocalLogMessagesApiResponse"/>&gt;</returns>
        Task<IFetchLocalLogMessagesApiResponse> FetchLocalLogMessagesAsync(Option<long> since = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch recent log messages on the targeted node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFetchLocalLogMessagesApiResponse"/>?&gt;</returns>
        Task<IFetchLocalLogMessagesApiResponse?> FetchLocalLogMessagesOrDefaultAsync(Option<long> since = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllLoggersAndLevelsApiResponse"/>&gt;</returns>
        Task<IListAllLoggersAndLevelsApiResponse> ListAllLoggersAndLevelsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all log-levels for the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllLoggersAndLevelsApiResponse"/>?&gt;</returns>
        Task<IListAllLoggersAndLevelsApiResponse?> ListAllLoggersAndLevelsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyLocalLogLevelApiResponse"/>&gt;</returns>
        Task<IModifyLocalLogLevelApiResponse> ModifyLocalLogLevelAsync(Option<List<LogLevelChange>> logLevelChange = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set one or more logger levels on the target node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="logLevelChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyLocalLogLevelApiResponse"/>?&gt;</returns>
        Task<IModifyLocalLogLevelApiResponse?> ModifyLocalLogLevelOrDefaultAsync(Option<List<LogLevelChange>> logLevelChange = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetMessageThresholdApiResponse"/>&gt;</returns>
        Task<ISetMessageThresholdApiResponse> SetMessageThresholdAsync(Option<SetThresholdRequestBody> setThresholdRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="setThresholdRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetMessageThresholdApiResponse"/>?&gt;</returns>
        Task<ISetMessageThresholdApiResponse?> SetMessageThresholdOrDefaultAsync(Option<SetThresholdRequestBody> setThresholdRequestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFetchLocalLogMessagesApiResponse"/>
    /// </summary>
    public interface IFetchLocalLogMessagesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.LogMessagesResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListAllLoggersAndLevelsApiResponse"/>
    /// </summary>
    public interface IListAllLoggersAndLevelsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.ListLevelsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IModifyLocalLogLevelApiResponse"/>
    /// </summary>
    public interface IModifyLocalLogLevelApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.LoggingResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISetMessageThresholdApiResponse"/>
    /// </summary>
    public interface ISetMessageThresholdApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.LoggingResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LoggingApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFetchLocalLogMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchLocalLogMessages;

        internal void ExecuteOnFetchLocalLogMessages(LoggingApi.FetchLocalLogMessagesApiResponse apiResponse)
        {
            OnFetchLocalLogMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFetchLocalLogMessages(Exception exception)
        {
            OnErrorFetchLocalLogMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListAllLoggersAndLevels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListAllLoggersAndLevels;

        internal void ExecuteOnListAllLoggersAndLevels(LoggingApi.ListAllLoggersAndLevelsApiResponse apiResponse)
        {
            OnListAllLoggersAndLevels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAllLoggersAndLevels(Exception exception)
        {
            OnErrorListAllLoggersAndLevels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnModifyLocalLogLevel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorModifyLocalLogLevel;

        internal void ExecuteOnModifyLocalLogLevel(LoggingApi.ModifyLocalLogLevelApiResponse apiResponse)
        {
            OnModifyLocalLogLevel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorModifyLocalLogLevel(Exception exception)
        {
            OnErrorModifyLocalLogLevel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetMessageThreshold;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetMessageThreshold;

        internal void ExecuteOnSetMessageThreshold(LoggingApi.SetMessageThresholdApiResponse apiResponse)
        {
            OnSetMessageThreshold?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetMessageThreshold(Exception exception)
        {
            OnErrorSetMessageThreshold?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LoggingApi : ILoggingApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LoggingApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LoggingApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoggingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoggingApi(ILogger<LoggingApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LoggingApiEvents loggingApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LoggingApi>();
            HttpClient = httpClient;
            Events = loggingApiEvents;
        }

        partial void FormatFetchLocalLogMessages(ref Option<long> since);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="since"></param>
        private void AfterFetchLocalLogMessagesDefaultImplementation(IFetchLocalLogMessagesApiResponse apiResponseLocalVar, Option<long> since)
        {
            bool suppressDefaultLog = false;
            AfterFetchLocalLogMessages(ref suppressDefaultLog, apiResponseLocalVar, since);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="since"></param>
        partial void AfterFetchLocalLogMessages(ref bool suppressDefaultLog, IFetchLocalLogMessagesApiResponse apiResponseLocalVar, Option<long> since);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="since"></param>
        private void OnErrorFetchLocalLogMessagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> since)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFetchLocalLogMessages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, since);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="since"></param>
        partial void OnErrorFetchLocalLogMessages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> since);

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFetchLocalLogMessagesApiResponse"/>&gt;</returns>
        public async Task<IFetchLocalLogMessagesApiResponse?> FetchLocalLogMessagesOrDefaultAsync(Option<long> since = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchLocalLogMessagesAsync(since, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch recent log messages on the targeted node. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFetchLocalLogMessagesApiResponse"/>&gt;</returns>
        public async Task<IFetchLocalLogMessagesApiResponse> FetchLocalLogMessagesAsync(Option<long> since = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFetchLocalLogMessages(ref since);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/logging/messages";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FetchLocalLogMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FetchLocalLogMessagesApiResponse>();

                        FetchLocalLogMessagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/logging/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchLocalLogMessagesDefaultImplementation(apiResponseLocalVar, since);

                        Events.ExecuteOnFetchLocalLogMessages(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchLocalLogMessagesDefaultImplementation(e, "/node/logging/messages", uriBuilderLocalVar.Path, since);
                Events.ExecuteOnErrorFetchLocalLogMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FetchLocalLogMessagesApiResponse"/>
        /// </summary>
        public partial class FetchLocalLogMessagesApiResponse : Org.OpenAPITools.Client.ApiResponse, IFetchLocalLogMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FetchLocalLogMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FetchLocalLogMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FetchLocalLogMessagesApiResponse(ILogger<FetchLocalLogMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LogMessagesResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LogMessagesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.LogMessagesResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterListAllLoggersAndLevelsDefaultImplementation(IListAllLoggersAndLevelsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterListAllLoggersAndLevels(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterListAllLoggersAndLevels(ref bool suppressDefaultLog, IListAllLoggersAndLevelsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorListAllLoggersAndLevelsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListAllLoggersAndLevels(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorListAllLoggersAndLevels(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllLoggersAndLevelsApiResponse"/>&gt;</returns>
        public async Task<IListAllLoggersAndLevelsApiResponse?> ListAllLoggersAndLevelsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAllLoggersAndLevelsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all log-levels for the target node. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAllLoggersAndLevelsApiResponse"/>&gt;</returns>
        public async Task<IListAllLoggersAndLevelsApiResponse> ListAllLoggersAndLevelsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/logging/levels";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAllLoggersAndLevelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAllLoggersAndLevelsApiResponse>();

                        ListAllLoggersAndLevelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/logging/levels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAllLoggersAndLevelsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnListAllLoggersAndLevels(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAllLoggersAndLevelsDefaultImplementation(e, "/node/logging/levels", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorListAllLoggersAndLevels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAllLoggersAndLevelsApiResponse"/>
        /// </summary>
        public partial class ListAllLoggersAndLevelsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListAllLoggersAndLevelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAllLoggersAndLevelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAllLoggersAndLevelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAllLoggersAndLevelsApiResponse(ILogger<ListAllLoggersAndLevelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListLevelsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListLevelsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ListLevelsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatModifyLocalLogLevel(Option<List<LogLevelChange>> logLevelChange);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="logLevelChange"></param>
        /// <returns></returns>
        private void ValidateModifyLocalLogLevel(Option<List<LogLevelChange>> logLevelChange)
        {
            if (logLevelChange.IsSet && logLevelChange.Value == null)
                throw new ArgumentNullException(nameof(logLevelChange));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="logLevelChange"></param>
        private void AfterModifyLocalLogLevelDefaultImplementation(IModifyLocalLogLevelApiResponse apiResponseLocalVar, Option<List<LogLevelChange>> logLevelChange)
        {
            bool suppressDefaultLog = false;
            AfterModifyLocalLogLevel(ref suppressDefaultLog, apiResponseLocalVar, logLevelChange);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="logLevelChange"></param>
        partial void AfterModifyLocalLogLevel(ref bool suppressDefaultLog, IModifyLocalLogLevelApiResponse apiResponseLocalVar, Option<List<LogLevelChange>> logLevelChange);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="logLevelChange"></param>
        private void OnErrorModifyLocalLogLevelDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<LogLevelChange>> logLevelChange)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorModifyLocalLogLevel(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, logLevelChange);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="logLevelChange"></param>
        partial void OnErrorModifyLocalLogLevel(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<LogLevelChange>> logLevelChange);

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <param name="logLevelChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyLocalLogLevelApiResponse"/>&gt;</returns>
        public async Task<IModifyLocalLogLevelApiResponse?> ModifyLocalLogLevelOrDefaultAsync(Option<List<LogLevelChange>> logLevelChange = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ModifyLocalLogLevelAsync(logLevelChange, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set one or more logger levels on the target node. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="logLevelChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IModifyLocalLogLevelApiResponse"/>&gt;</returns>
        public async Task<IModifyLocalLogLevelApiResponse> ModifyLocalLogLevelAsync(Option<List<LogLevelChange>> logLevelChange = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateModifyLocalLogLevel(logLevelChange);

                FormatModifyLocalLogLevel(logLevelChange);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/logging/levels";

                    if (logLevelChange.IsSet)
                        httpRequestMessageLocalVar.Content = (logLevelChange.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(logLevelChange.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ModifyLocalLogLevelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ModifyLocalLogLevelApiResponse>();

                        ModifyLocalLogLevelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/logging/levels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterModifyLocalLogLevelDefaultImplementation(apiResponseLocalVar, logLevelChange);

                        Events.ExecuteOnModifyLocalLogLevel(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorModifyLocalLogLevelDefaultImplementation(e, "/node/logging/levels", uriBuilderLocalVar.Path, logLevelChange);
                Events.ExecuteOnErrorModifyLocalLogLevel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ModifyLocalLogLevelApiResponse"/>
        /// </summary>
        public partial class ModifyLocalLogLevelApiResponse : Org.OpenAPITools.Client.ApiResponse, IModifyLocalLogLevelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ModifyLocalLogLevelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ModifyLocalLogLevelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ModifyLocalLogLevelApiResponse(ILogger<ModifyLocalLogLevelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LoggingResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LoggingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.LoggingResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetMessageThreshold(Option<SetThresholdRequestBody> setThresholdRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="setThresholdRequestBody"></param>
        /// <returns></returns>
        private void ValidateSetMessageThreshold(Option<SetThresholdRequestBody> setThresholdRequestBody)
        {
            if (setThresholdRequestBody.IsSet && setThresholdRequestBody.Value == null)
                throw new ArgumentNullException(nameof(setThresholdRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setThresholdRequestBody"></param>
        private void AfterSetMessageThresholdDefaultImplementation(ISetMessageThresholdApiResponse apiResponseLocalVar, Option<SetThresholdRequestBody> setThresholdRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterSetMessageThreshold(ref suppressDefaultLog, apiResponseLocalVar, setThresholdRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setThresholdRequestBody"></param>
        partial void AfterSetMessageThreshold(ref bool suppressDefaultLog, ISetMessageThresholdApiResponse apiResponseLocalVar, Option<SetThresholdRequestBody> setThresholdRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setThresholdRequestBody"></param>
        private void OnErrorSetMessageThresholdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SetThresholdRequestBody> setThresholdRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetMessageThreshold(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, setThresholdRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setThresholdRequestBody"></param>
        partial void OnErrorSetMessageThreshold(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SetThresholdRequestBody> setThresholdRequestBody);

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <param name="setThresholdRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetMessageThresholdApiResponse"/>&gt;</returns>
        public async Task<ISetMessageThresholdApiResponse?> SetMessageThresholdOrDefaultAsync(Option<SetThresholdRequestBody> setThresholdRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetMessageThresholdAsync(setThresholdRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set a threshold level for the targeted node&#39;s log message watcher. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setThresholdRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetMessageThresholdApiResponse"/>&gt;</returns>
        public async Task<ISetMessageThresholdApiResponse> SetMessageThresholdAsync(Option<SetThresholdRequestBody> setThresholdRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetMessageThreshold(setThresholdRequestBody);

                FormatSetMessageThreshold(setThresholdRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/logging/messages/threshold";

                    if (setThresholdRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (setThresholdRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setThresholdRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetMessageThresholdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetMessageThresholdApiResponse>();

                        SetMessageThresholdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/logging/messages/threshold", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetMessageThresholdDefaultImplementation(apiResponseLocalVar, setThresholdRequestBody);

                        Events.ExecuteOnSetMessageThreshold(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetMessageThresholdDefaultImplementation(e, "/node/logging/messages/threshold", uriBuilderLocalVar.Path, setThresholdRequestBody);
                Events.ExecuteOnErrorSetMessageThreshold(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetMessageThresholdApiResponse"/>
        /// </summary>
        public partial class SetMessageThresholdApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetMessageThresholdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetMessageThresholdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetMessageThresholdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetMessageThresholdApiResponse(ILogger<SetMessageThresholdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LoggingResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LoggingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.LoggingResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
