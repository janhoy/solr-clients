// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface INodeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        NodeApiEvents Events { get; }

        /// <summary>
        /// Delete all replicas off of the specified SolrCloud node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeName">The name of the node to be cleared.  Usually of the form &#39;host:1234_solr&#39;.</param>
        /// <param name="deleteNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNodeApiResponse"/>&gt;</returns>
        Task<IDeleteNodeApiResponse> DeleteNodeAsync(string nodeName, DeleteNodeRequestBody deleteNodeRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all replicas off of the specified SolrCloud node
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="nodeName">The name of the node to be cleared.  Usually of the form &#39;host:1234_solr&#39;.</param>
        /// <param name="deleteNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNodeApiResponse"/>?&gt;</returns>
        Task<IDeleteNodeApiResponse?> DeleteNodeOrDefaultAsync(string nodeName, DeleteNodeRequestBody deleteNodeRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Request the status of an already submitted asynchronous CoreAdmin API call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The user defined request-id for the asynchronous request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCommandStatusApiResponse"/>&gt;</returns>
        Task<IGetCommandStatusApiResponse> GetCommandStatusAsync(string requestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Request the status of an already submitted asynchronous CoreAdmin API call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requestId">The user defined request-id for the asynchronous request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCommandStatusApiResponse"/>?&gt;</returns>
        Task<IGetCommandStatusApiResponse?> GetCommandStatusOrDefaultAsync(string requestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the public key of the receiving Solr node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPublicKeyApiResponse"/>&gt;</returns>
        Task<IGetPublicKeyApiResponse> GetPublicKeyAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the public key of the receiving Solr node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPublicKeyApiResponse"/>?&gt;</returns>
        Task<IGetPublicKeyApiResponse?> GetPublicKeyOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// &#39;Replace&#39; a specified node by moving all replicas elsewhere
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceNodeName">The name of the node to be replaced.</param>
        /// <param name="replaceNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceNodeApiResponse"/>&gt;</returns>
        Task<IReplaceNodeApiResponse> ReplaceNodeAsync(string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// &#39;Replace&#39; a specified node by moving all replicas elsewhere
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sourceNodeName">The name of the node to be replaced.</param>
        /// <param name="replaceNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceNodeApiResponse"/>?&gt;</returns>
        Task<IReplaceNodeApiResponse?> ReplaceNodeOrDefaultAsync(string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteNodeApiResponse"/>
    /// </summary>
    public interface IDeleteNodeApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetCommandStatusApiResponse"/>
    /// </summary>
    public interface IGetCommandStatusApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.GetNodeCommandStatusResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetPublicKeyApiResponse"/>
    /// </summary>
    public interface IGetPublicKeyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.PublicKeyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IReplaceNodeApiResponse"/>
    /// </summary>
    public interface IReplaceNodeApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class NodeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteNode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteNode;

        internal void ExecuteOnDeleteNode(NodeApi.DeleteNodeApiResponse apiResponse)
        {
            OnDeleteNode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteNode(Exception exception)
        {
            OnErrorDeleteNode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCommandStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCommandStatus;

        internal void ExecuteOnGetCommandStatus(NodeApi.GetCommandStatusApiResponse apiResponse)
        {
            OnGetCommandStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCommandStatus(Exception exception)
        {
            OnErrorGetCommandStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPublicKey;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPublicKey;

        internal void ExecuteOnGetPublicKey(NodeApi.GetPublicKeyApiResponse apiResponse)
        {
            OnGetPublicKey?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPublicKey(Exception exception)
        {
            OnErrorGetPublicKey?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceNode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceNode;

        internal void ExecuteOnReplaceNode(NodeApi.ReplaceNodeApiResponse apiResponse)
        {
            OnReplaceNode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceNode(Exception exception)
        {
            OnErrorReplaceNode?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class NodeApi : INodeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<NodeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public NodeApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NodeApi(ILogger<NodeApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, NodeApiEvents nodeApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<NodeApi>();
            HttpClient = httpClient;
            Events = nodeApiEvents;
        }

        partial void FormatDeleteNode(ref string nodeName, DeleteNodeRequestBody deleteNodeRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="nodeName"></param>
        /// <param name="deleteNodeRequestBody"></param>
        /// <returns></returns>
        private void ValidateDeleteNode(string nodeName, DeleteNodeRequestBody deleteNodeRequestBody)
        {
            if (nodeName == null)
                throw new ArgumentNullException(nameof(nodeName));

            if (deleteNodeRequestBody == null)
                throw new ArgumentNullException(nameof(deleteNodeRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeName"></param>
        /// <param name="deleteNodeRequestBody"></param>
        private void AfterDeleteNodeDefaultImplementation(IDeleteNodeApiResponse apiResponseLocalVar, string nodeName, DeleteNodeRequestBody deleteNodeRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterDeleteNode(ref suppressDefaultLog, apiResponseLocalVar, nodeName, deleteNodeRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="nodeName"></param>
        /// <param name="deleteNodeRequestBody"></param>
        partial void AfterDeleteNode(ref bool suppressDefaultLog, IDeleteNodeApiResponse apiResponseLocalVar, string nodeName, DeleteNodeRequestBody deleteNodeRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeName"></param>
        /// <param name="deleteNodeRequestBody"></param>
        private void OnErrorDeleteNodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string nodeName, DeleteNodeRequestBody deleteNodeRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteNode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, nodeName, deleteNodeRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="nodeName"></param>
        /// <param name="deleteNodeRequestBody"></param>
        partial void OnErrorDeleteNode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string nodeName, DeleteNodeRequestBody deleteNodeRequestBody);

        /// <summary>
        /// Delete all replicas off of the specified SolrCloud node 
        /// </summary>
        /// <param name="nodeName">The name of the node to be cleared.  Usually of the form &#39;host:1234_solr&#39;.</param>
        /// <param name="deleteNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNodeApiResponse"/>&gt;</returns>
        public async Task<IDeleteNodeApiResponse?> DeleteNodeOrDefaultAsync(string nodeName, DeleteNodeRequestBody deleteNodeRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteNodeAsync(nodeName, deleteNodeRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all replicas off of the specified SolrCloud node 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeName">The name of the node to be cleared.  Usually of the form &#39;host:1234_solr&#39;.</param>
        /// <param name="deleteNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNodeApiResponse"/>&gt;</returns>
        public async Task<IDeleteNodeApiResponse> DeleteNodeAsync(string nodeName, DeleteNodeRequestBody deleteNodeRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteNode(nodeName, deleteNodeRequestBody);

                FormatDeleteNode(ref nodeName, deleteNodeRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/nodes/{nodeName}/clear";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BnodeName%7D", Uri.EscapeDataString(nodeName.ToString()));

                    httpRequestMessageLocalVar.Content = (deleteNodeRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(deleteNodeRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteNodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteNodeApiResponse>();

                        DeleteNodeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/nodes/{nodeName}/clear", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteNodeDefaultImplementation(apiResponseLocalVar, nodeName, deleteNodeRequestBody);

                        Events.ExecuteOnDeleteNode(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteNodeDefaultImplementation(e, "/cluster/nodes/{nodeName}/clear", uriBuilderLocalVar.Path, nodeName, deleteNodeRequestBody);
                Events.ExecuteOnErrorDeleteNode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteNodeApiResponse"/>
        /// </summary>
        public partial class DeleteNodeApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteNodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteNodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteNodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteNodeApiResponse(ILogger<DeleteNodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCommandStatus(ref string requestId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestId"></param>
        /// <returns></returns>
        private void ValidateGetCommandStatus(string requestId)
        {
            if (requestId == null)
                throw new ArgumentNullException(nameof(requestId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestId"></param>
        private void AfterGetCommandStatusDefaultImplementation(IGetCommandStatusApiResponse apiResponseLocalVar, string requestId)
        {
            bool suppressDefaultLog = false;
            AfterGetCommandStatus(ref suppressDefaultLog, apiResponseLocalVar, requestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestId"></param>
        partial void AfterGetCommandStatus(ref bool suppressDefaultLog, IGetCommandStatusApiResponse apiResponseLocalVar, string requestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestId"></param>
        private void OnErrorGetCommandStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string requestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCommandStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, requestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestId"></param>
        partial void OnErrorGetCommandStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string requestId);

        /// <summary>
        /// Request the status of an already submitted asynchronous CoreAdmin API call. 
        /// </summary>
        /// <param name="requestId">The user defined request-id for the asynchronous request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCommandStatusApiResponse"/>&gt;</returns>
        public async Task<IGetCommandStatusApiResponse?> GetCommandStatusOrDefaultAsync(string requestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCommandStatusAsync(requestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Request the status of an already submitted asynchronous CoreAdmin API call. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The user defined request-id for the asynchronous request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCommandStatusApiResponse"/>&gt;</returns>
        public async Task<IGetCommandStatusApiResponse> GetCommandStatusAsync(string requestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCommandStatus(requestId);

                FormatGetCommandStatus(ref requestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/commands/{requestId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BrequestId%7D", Uri.EscapeDataString(requestId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCommandStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCommandStatusApiResponse>();

                        GetCommandStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/commands/{requestId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCommandStatusDefaultImplementation(apiResponseLocalVar, requestId);

                        Events.ExecuteOnGetCommandStatus(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCommandStatusDefaultImplementation(e, "/node/commands/{requestId}", uriBuilderLocalVar.Path, requestId);
                Events.ExecuteOnErrorGetCommandStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCommandStatusApiResponse"/>
        /// </summary>
        public partial class GetCommandStatusApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetCommandStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCommandStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCommandStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCommandStatusApiResponse(ILogger<GetCommandStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GetNodeCommandStatusResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GetNodeCommandStatusResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.GetNodeCommandStatusResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPublicKeyDefaultImplementation(IGetPublicKeyApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPublicKey(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPublicKey(ref bool suppressDefaultLog, IGetPublicKeyApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPublicKeyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPublicKey(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPublicKey(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Retrieve the public key of the receiving Solr node. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPublicKeyApiResponse"/>&gt;</returns>
        public async Task<IGetPublicKeyApiResponse?> GetPublicKeyOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPublicKeyAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve the public key of the receiving Solr node. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPublicKeyApiResponse"/>&gt;</returns>
        public async Task<IGetPublicKeyApiResponse> GetPublicKeyAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/node/key";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPublicKeyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPublicKeyApiResponse>();

                        GetPublicKeyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/node/key", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPublicKeyDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPublicKey(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPublicKeyDefaultImplementation(e, "/node/key", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPublicKey(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPublicKeyApiResponse"/>
        /// </summary>
        public partial class GetPublicKeyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPublicKeyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPublicKeyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPublicKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPublicKeyApiResponse(ILogger<GetPublicKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PublicKeyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PublicKeyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.PublicKeyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplaceNode(ref string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sourceNodeName"></param>
        /// <param name="replaceNodeRequestBody"></param>
        /// <returns></returns>
        private void ValidateReplaceNode(string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody)
        {
            if (sourceNodeName == null)
                throw new ArgumentNullException(nameof(sourceNodeName));

            if (replaceNodeRequestBody == null)
                throw new ArgumentNullException(nameof(replaceNodeRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceNodeName"></param>
        /// <param name="replaceNodeRequestBody"></param>
        private void AfterReplaceNodeDefaultImplementation(IReplaceNodeApiResponse apiResponseLocalVar, string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterReplaceNode(ref suppressDefaultLog, apiResponseLocalVar, sourceNodeName, replaceNodeRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceNodeName"></param>
        /// <param name="replaceNodeRequestBody"></param>
        partial void AfterReplaceNode(ref bool suppressDefaultLog, IReplaceNodeApiResponse apiResponseLocalVar, string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceNodeName"></param>
        /// <param name="replaceNodeRequestBody"></param>
        private void OnErrorReplaceNodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceNode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sourceNodeName, replaceNodeRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceNodeName"></param>
        /// <param name="replaceNodeRequestBody"></param>
        partial void OnErrorReplaceNode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody);

        /// <summary>
        /// &#39;Replace&#39; a specified node by moving all replicas elsewhere 
        /// </summary>
        /// <param name="sourceNodeName">The name of the node to be replaced.</param>
        /// <param name="replaceNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceNodeApiResponse"/>&gt;</returns>
        public async Task<IReplaceNodeApiResponse?> ReplaceNodeOrDefaultAsync(string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceNodeAsync(sourceNodeName, replaceNodeRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// &#39;Replace&#39; a specified node by moving all replicas elsewhere 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceNodeName">The name of the node to be replaced.</param>
        /// <param name="replaceNodeRequestBody">Contains user provided parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceNodeApiResponse"/>&gt;</returns>
        public async Task<IReplaceNodeApiResponse> ReplaceNodeAsync(string sourceNodeName, ReplaceNodeRequestBody replaceNodeRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceNode(sourceNodeName, replaceNodeRequestBody);

                FormatReplaceNode(ref sourceNodeName, replaceNodeRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/cluster/nodes/{sourceNodeName}/replace";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsourceNodeName%7D", Uri.EscapeDataString(sourceNodeName.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceNodeRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceNodeRequestBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReplaceNodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplaceNodeApiResponse>();

                        ReplaceNodeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/cluster/nodes/{sourceNodeName}/replace", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReplaceNodeDefaultImplementation(apiResponseLocalVar, sourceNodeName, replaceNodeRequestBody);

                        Events.ExecuteOnReplaceNode(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceNodeDefaultImplementation(e, "/cluster/nodes/{sourceNodeName}/replace", uriBuilderLocalVar.Path, sourceNodeName, replaceNodeRequestBody);
                Events.ExecuteOnErrorReplaceNode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplaceNodeApiResponse"/>
        /// </summary>
        public partial class ReplaceNodeApiResponse : Org.OpenAPITools.Client.ApiResponse, IReplaceNodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplaceNodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplaceNodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceNodeApiResponse(ILogger<ReplaceNodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
