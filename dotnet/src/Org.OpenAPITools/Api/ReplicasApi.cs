// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IReplicasApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ReplicasApiEvents Events { get; }

        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReplicaApiResponse"/>&gt;</returns>
        Task<ICreateReplicaApiResponse> CreateReplicaAsync(string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a new replica of an existing shard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReplicaApiResponse"/>?&gt;</returns>
        Task<ICreateReplicaApiResponse?> CreateReplicaOrDefaultAsync(string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicaByNameApiResponse"/>&gt;</returns>
        Task<IDeleteReplicaByNameApiResponse> DeleteReplicaByNameAsync(string collectionName, string shardName, string replicaName, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an single replica by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicaByNameApiResponse"/>?&gt;</returns>
        Task<IDeleteReplicaByNameApiResponse?> DeleteReplicaByNameOrDefaultAsync(string collectionName, string shardName, string replicaName, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountApiResponse"/>&gt;</returns>
        Task<IDeleteReplicasByCountApiResponse> DeleteReplicasByCountAsync(string collectionName, string shardName, Option<int> count = default, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountApiResponse"/>?&gt;</returns>
        Task<IDeleteReplicasByCountApiResponse?> DeleteReplicasByCountOrDefaultAsync(string collectionName, string shardName, Option<int> count = default, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountAllShardsApiResponse"/>&gt;</returns>
        Task<IDeleteReplicasByCountAllShardsApiResponse> DeleteReplicasByCountAllShardsAsync(string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Scale the replica count for all shards in the specified collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountAllShardsApiResponse"/>?&gt;</returns>
        Task<IDeleteReplicasByCountAllShardsApiResponse?> DeleteReplicasByCountAllShardsOrDefaultAsync(string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateReplicaApiResponse"/>
    /// </summary>
    public interface ICreateReplicaApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReplicaByNameApiResponse"/>
    /// </summary>
    public interface IDeleteReplicaByNameApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReplicasByCountApiResponse"/>
    /// </summary>
    public interface IDeleteReplicasByCountApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteReplicasByCountAllShardsApiResponse"/>
    /// </summary>
    public interface IDeleteReplicasByCountAllShardsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ReplicasApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateReplica;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateReplica;

        internal void ExecuteOnCreateReplica(ReplicasApi.CreateReplicaApiResponse apiResponse)
        {
            OnCreateReplica?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateReplica(Exception exception)
        {
            OnErrorCreateReplica?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteReplicaByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteReplicaByName;

        internal void ExecuteOnDeleteReplicaByName(ReplicasApi.DeleteReplicaByNameApiResponse apiResponse)
        {
            OnDeleteReplicaByName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReplicaByName(Exception exception)
        {
            OnErrorDeleteReplicaByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteReplicasByCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteReplicasByCount;

        internal void ExecuteOnDeleteReplicasByCount(ReplicasApi.DeleteReplicasByCountApiResponse apiResponse)
        {
            OnDeleteReplicasByCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReplicasByCount(Exception exception)
        {
            OnErrorDeleteReplicasByCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteReplicasByCountAllShards;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteReplicasByCountAllShards;

        internal void ExecuteOnDeleteReplicasByCountAllShards(ReplicasApi.DeleteReplicasByCountAllShardsApiResponse apiResponse)
        {
            OnDeleteReplicasByCountAllShards?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteReplicasByCountAllShards(Exception exception)
        {
            OnErrorDeleteReplicasByCountAllShards?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ReplicasApi : IReplicasApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ReplicasApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ReplicasApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplicasApi(ILogger<ReplicasApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ReplicasApiEvents replicasApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ReplicasApi>();
            HttpClient = httpClient;
            Events = replicasApiEvents;
        }

        partial void FormatCreateReplica(ref string collectionName, ref string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateReplica(string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));

            if (createReplicaRequestBody.IsSet && createReplicaRequestBody.Value == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"></param>
        private void AfterCreateReplicaDefaultImplementation(ICreateReplicaApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateReplica(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName, createReplicaRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"></param>
        partial void AfterCreateReplica(ref bool suppressDefaultLog, ICreateReplicaApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"></param>
        private void OnErrorCreateReplicaDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateReplica(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName, createReplicaRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"></param>
        partial void OnErrorCreateReplica(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody);

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReplicaApiResponse"/>&gt;</returns>
        public async Task<ICreateReplicaApiResponse?> CreateReplicaOrDefaultAsync(string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateReplicaAsync(collectionName, shardName, createReplicaRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a new replica of an existing shard. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="createReplicaRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateReplicaApiResponse"/>&gt;</returns>
        public async Task<ICreateReplicaApiResponse> CreateReplicaAsync(string collectionName, string shardName, Option<CreateReplicaRequestBody> createReplicaRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateReplica(collectionName, shardName, createReplicaRequestBody);

                FormatCreateReplica(ref collectionName, ref shardName, createReplicaRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}/replicas";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    if (createReplicaRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (createReplicaRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createReplicaRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateReplicaApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateReplicaApiResponse>();

                        CreateReplicaApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}/replicas", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateReplicaDefaultImplementation(apiResponseLocalVar, collectionName, shardName, createReplicaRequestBody);

                        Events.ExecuteOnCreateReplica(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateReplicaDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}/replicas", uriBuilderLocalVar.Path, collectionName, shardName, createReplicaRequestBody);
                Events.ExecuteOnErrorCreateReplica(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateReplicaApiResponse"/>
        /// </summary>
        public partial class CreateReplicaApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateReplicaApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateReplicaApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateReplicaApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateReplicaApiResponse(ILogger<CreateReplicaApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReplicaByName(ref string collectionName, ref string shardName, ref string replicaName, ref Option<bool> followAliases, ref Option<bool> deleteInstanceDir, ref Option<bool> deleteDataDir, ref Option<bool> deleteIndex, ref Option<bool> onlyIfDown, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteReplicaByName(string collectionName, string shardName, string replicaName, Option<string> async)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));

            if (replicaName == null)
                throw new ArgumentNullException(nameof(replicaName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        private void AfterDeleteReplicaByNameDefaultImplementation(IDeleteReplicaByNameApiResponse apiResponseLocalVar, string collectionName, string shardName, string replicaName, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReplicaByName(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        partial void AfterDeleteReplicaByName(ref bool suppressDefaultLog, IDeleteReplicaByNameApiResponse apiResponseLocalVar, string collectionName, string shardName, string replicaName, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteReplicaByNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, string replicaName, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReplicaByName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteReplicaByName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, string replicaName, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async);

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicaByNameApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicaByNameApiResponse?> DeleteReplicaByNameOrDefaultAsync(string collectionName, string shardName, string replicaName, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReplicaByNameAsync(collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an single replica by name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="replicaName"></param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicaByNameApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicaByNameApiResponse> DeleteReplicaByNameAsync(string collectionName, string shardName, string replicaName, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteReplicaByName(collectionName, shardName, replicaName, async);

                FormatDeleteReplicaByName(ref collectionName, ref shardName, ref replicaName, ref followAliases, ref deleteInstanceDir, ref deleteDataDir, ref deleteIndex, ref onlyIfDown, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}/replicas/{replicaName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BreplicaName%7D", Uri.EscapeDataString(replicaName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (followAliases.IsSet)
                        parseQueryStringLocalVar["followAliases"] = ClientUtils.ParameterToString(followAliases.Value);

                    if (deleteInstanceDir.IsSet)
                        parseQueryStringLocalVar["deleteInstanceDir"] = ClientUtils.ParameterToString(deleteInstanceDir.Value);

                    if (deleteDataDir.IsSet)
                        parseQueryStringLocalVar["deleteDataDir"] = ClientUtils.ParameterToString(deleteDataDir.Value);

                    if (deleteIndex.IsSet)
                        parseQueryStringLocalVar["deleteIndex"] = ClientUtils.ParameterToString(deleteIndex.Value);

                    if (onlyIfDown.IsSet)
                        parseQueryStringLocalVar["onlyIfDown"] = ClientUtils.ParameterToString(onlyIfDown.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteReplicaByNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReplicaByNameApiResponse>();

                        DeleteReplicaByNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}/replicas/{replicaName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteReplicaByNameDefaultImplementation(apiResponseLocalVar, collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);

                        Events.ExecuteOnDeleteReplicaByName(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReplicaByNameDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}/replicas/{replicaName}", uriBuilderLocalVar.Path, collectionName, shardName, replicaName, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
                Events.ExecuteOnErrorDeleteReplicaByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReplicaByNameApiResponse"/>
        /// </summary>
        public partial class DeleteReplicaByNameApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteReplicaByNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReplicaByNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReplicaByNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReplicaByNameApiResponse(ILogger<DeleteReplicaByNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReplicasByCount(ref string collectionName, ref string shardName, ref Option<int> count, ref Option<bool> followAliases, ref Option<bool> deleteInstanceDir, ref Option<bool> deleteDataDir, ref Option<bool> deleteIndex, ref Option<bool> onlyIfDown, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteReplicasByCount(string collectionName, string shardName, Option<string> async)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        private void AfterDeleteReplicasByCountDefaultImplementation(IDeleteReplicasByCountApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<int> count, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReplicasByCount(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        partial void AfterDeleteReplicasByCount(ref bool suppressDefaultLog, IDeleteReplicasByCountApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<int> count, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteReplicasByCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<int> count, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReplicasByCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"></param>
        /// <param name="followAliases"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="onlyIfDown"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteReplicasByCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<int> count, Option<bool> followAliases, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> onlyIfDown, Option<string> async);

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicasByCountApiResponse?> DeleteReplicasByCountOrDefaultAsync(string collectionName, string shardName, Option<int> count = default, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReplicasByCountAsync(collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete one or more replicas from the specified collection and shard 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="onlyIfDown"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicasByCountApiResponse> DeleteReplicasByCountAsync(string collectionName, string shardName, Option<int> count = default, Option<bool> followAliases = default, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> onlyIfDown = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteReplicasByCount(collectionName, shardName, async);

                FormatDeleteReplicasByCount(ref collectionName, ref shardName, ref count, ref followAliases, ref deleteInstanceDir, ref deleteDataDir, ref deleteIndex, ref onlyIfDown, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}/replicas";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    if (followAliases.IsSet)
                        parseQueryStringLocalVar["followAliases"] = ClientUtils.ParameterToString(followAliases.Value);

                    if (deleteInstanceDir.IsSet)
                        parseQueryStringLocalVar["deleteInstanceDir"] = ClientUtils.ParameterToString(deleteInstanceDir.Value);

                    if (deleteDataDir.IsSet)
                        parseQueryStringLocalVar["deleteDataDir"] = ClientUtils.ParameterToString(deleteDataDir.Value);

                    if (deleteIndex.IsSet)
                        parseQueryStringLocalVar["deleteIndex"] = ClientUtils.ParameterToString(deleteIndex.Value);

                    if (onlyIfDown.IsSet)
                        parseQueryStringLocalVar["onlyIfDown"] = ClientUtils.ParameterToString(onlyIfDown.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteReplicasByCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReplicasByCountApiResponse>();

                        DeleteReplicasByCountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}/replicas", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteReplicasByCountDefaultImplementation(apiResponseLocalVar, collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);

                        Events.ExecuteOnDeleteReplicasByCount(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReplicasByCountDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}/replicas", uriBuilderLocalVar.Path, collectionName, shardName, count, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
                Events.ExecuteOnErrorDeleteReplicasByCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReplicasByCountApiResponse"/>
        /// </summary>
        public partial class DeleteReplicasByCountApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteReplicasByCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReplicasByCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReplicasByCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReplicasByCountApiResponse(ILogger<DeleteReplicasByCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteReplicasByCountAllShards(ref string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        /// <returns></returns>
        private void ValidateDeleteReplicasByCountAllShards(string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (scaleCollectionRequestBody.IsSet && scaleCollectionRequestBody.Value == null)
                throw new ArgumentNullException(nameof(scaleCollectionRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        private void AfterDeleteReplicasByCountAllShardsDefaultImplementation(IDeleteReplicasByCountAllShardsApiResponse apiResponseLocalVar, string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterDeleteReplicasByCountAllShards(ref suppressDefaultLog, apiResponseLocalVar, collectionName, scaleCollectionRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        partial void AfterDeleteReplicasByCountAllShards(ref bool suppressDefaultLog, IDeleteReplicasByCountAllShardsApiResponse apiResponseLocalVar, string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        private void OnErrorDeleteReplicasByCountAllShardsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteReplicasByCountAllShards(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, scaleCollectionRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        partial void OnErrorDeleteReplicasByCountAllShards(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody);

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountAllShardsApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicasByCountAllShardsApiResponse?> DeleteReplicasByCountAllShardsOrDefaultAsync(string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteReplicasByCountAllShardsAsync(collectionName, scaleCollectionRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Scale the replica count for all shards in the specified collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="scaleCollectionRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteReplicasByCountAllShardsApiResponse"/>&gt;</returns>
        public async Task<IDeleteReplicasByCountAllShardsApiResponse> DeleteReplicasByCountAllShardsAsync(string collectionName, Option<ScaleCollectionRequestBody> scaleCollectionRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteReplicasByCountAllShards(collectionName, scaleCollectionRequestBody);

                FormatDeleteReplicasByCountAllShards(ref collectionName, scaleCollectionRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/scale";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    if (scaleCollectionRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (scaleCollectionRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(scaleCollectionRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteReplicasByCountAllShardsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteReplicasByCountAllShardsApiResponse>();

                        DeleteReplicasByCountAllShardsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/scale", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteReplicasByCountAllShardsDefaultImplementation(apiResponseLocalVar, collectionName, scaleCollectionRequestBody);

                        Events.ExecuteOnDeleteReplicasByCountAllShards(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteReplicasByCountAllShardsDefaultImplementation(e, "/collections/{collectionName}/scale", uriBuilderLocalVar.Path, collectionName, scaleCollectionRequestBody);
                Events.ExecuteOnErrorDeleteReplicasByCountAllShards(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteReplicasByCountAllShardsApiResponse"/>
        /// </summary>
        public partial class DeleteReplicasByCountAllShardsApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteReplicasByCountAllShardsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteReplicasByCountAllShardsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteReplicasByCountAllShardsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteReplicasByCountAllShardsApiResponse(ILogger<DeleteReplicasByCountAllShardsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
