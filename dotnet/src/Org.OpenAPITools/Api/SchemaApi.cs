// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISchemaApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SchemaApiEvents Events { get; }

        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDynamicFieldInfoApiResponse"/>&gt;</returns>
        Task<IGetDynamicFieldInfoApiResponse> GetDynamicFieldInfoAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed info about a single dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDynamicFieldInfoApiResponse"/>?&gt;</returns>
        Task<IGetDynamicFieldInfoApiResponse?> GetDynamicFieldInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldInfoApiResponse"/>&gt;</returns>
        Task<IGetFieldInfoApiResponse> GetFieldInfoAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed info about a single non-dynamic field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldInfoApiResponse"/>?&gt;</returns>
        Task<IGetFieldInfoApiResponse?> GetFieldInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldTypeInfoApiResponse"/>&gt;</returns>
        Task<IGetFieldTypeInfoApiResponse> GetFieldTypeInfoAsync(IndexType indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed info about a single field type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldTypeInfoApiResponse"/>?&gt;</returns>
        Task<IGetFieldTypeInfoApiResponse?> GetFieldTypeInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaInfoApiResponse"/>&gt;</returns>
        Task<IGetSchemaInfoApiResponse> GetSchemaInfoAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the entire schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaInfoApiResponse"/>?&gt;</returns>
        Task<IGetSchemaInfoApiResponse?> GetSchemaInfoOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaNameApiResponse"/>&gt;</returns>
        Task<IGetSchemaNameApiResponse> GetSchemaNameAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the name of the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaNameApiResponse"/>?&gt;</returns>
        Task<IGetSchemaNameApiResponse?> GetSchemaNameOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaSimilarityApiResponse"/>&gt;</returns>
        Task<IGetSchemaSimilarityApiResponse> GetSchemaSimilarityAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaSimilarityApiResponse"/>?&gt;</returns>
        Task<IGetSchemaSimilarityApiResponse?> GetSchemaSimilarityOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaUniqueKeyApiResponse"/>&gt;</returns>
        Task<IGetSchemaUniqueKeyApiResponse> GetSchemaUniqueKeyAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaUniqueKeyApiResponse"/>?&gt;</returns>
        Task<IGetSchemaUniqueKeyApiResponse?> GetSchemaUniqueKeyOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaVersionApiResponse"/>&gt;</returns>
        Task<IGetSchemaVersionApiResponse> GetSchemaVersionAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaVersionApiResponse"/>?&gt;</returns>
        Task<IGetSchemaVersionApiResponse?> GetSchemaVersionOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaZkVersionApiResponse"/>&gt;</returns>
        Task<IGetSchemaZkVersionApiResponse> GetSchemaZkVersionAsync(IndexType indexType, string indexName, Option<int> refreshIfBelowVersion = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaZkVersionApiResponse"/>?&gt;</returns>
        Task<IGetSchemaZkVersionApiResponse?> GetSchemaZkVersionOrDefaultAsync(IndexType indexType, string indexName, Option<int> refreshIfBelowVersion = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCopyFieldsApiResponse"/>&gt;</returns>
        Task<IListCopyFieldsApiResponse> ListCopyFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCopyFieldsApiResponse"/>?&gt;</returns>
        Task<IListCopyFieldsApiResponse?> ListCopyFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListDynamicFieldsApiResponse"/>&gt;</returns>
        Task<IListDynamicFieldsApiResponse> ListDynamicFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListDynamicFieldsApiResponse"/>?&gt;</returns>
        Task<IListDynamicFieldsApiResponse?> ListDynamicFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldTypesApiResponse"/>&gt;</returns>
        Task<IListSchemaFieldTypesApiResponse> ListSchemaFieldTypesAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all field types in the schema used by the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldTypesApiResponse"/>?&gt;</returns>
        Task<IListSchemaFieldTypesApiResponse?> ListSchemaFieldTypesOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldsApiResponse"/>&gt;</returns>
        Task<IListSchemaFieldsApiResponse> ListSchemaFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldsApiResponse"/>?&gt;</returns>
        Task<IListSchemaFieldsApiResponse?> ListSchemaFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetDynamicFieldInfoApiResponse"/>
    /// </summary>
    public interface IGetDynamicFieldInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaGetDynamicFieldInfoResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFieldInfoApiResponse"/>
    /// </summary>
    public interface IGetFieldInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaGetFieldInfoResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFieldTypeInfoApiResponse"/>
    /// </summary>
    public interface IGetFieldTypeInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaGetFieldTypeInfoResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaInfoApiResponse"/>
    /// </summary>
    public interface IGetSchemaInfoApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaInfoResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaNameApiResponse"/>
    /// </summary>
    public interface IGetSchemaNameApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaNameResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaSimilarityApiResponse"/>
    /// </summary>
    public interface IGetSchemaSimilarityApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaSimilarityResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaUniqueKeyApiResponse"/>
    /// </summary>
    public interface IGetSchemaUniqueKeyApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaUniqueKeyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaVersionApiResponse"/>
    /// </summary>
    public interface IGetSchemaVersionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaVersionResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSchemaZkVersionApiResponse"/>
    /// </summary>
    public interface IGetSchemaZkVersionApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaZkVersionResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListCopyFieldsApiResponse"/>
    /// </summary>
    public interface IListCopyFieldsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaListCopyFieldsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListDynamicFieldsApiResponse"/>
    /// </summary>
    public interface IListDynamicFieldsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaListDynamicFieldsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListSchemaFieldTypesApiResponse"/>
    /// </summary>
    public interface IListSchemaFieldTypesApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaListFieldTypesResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListSchemaFieldsApiResponse"/>
    /// </summary>
    public interface IListSchemaFieldsApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SchemaListFieldsResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SchemaApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDynamicFieldInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDynamicFieldInfo;

        internal void ExecuteOnGetDynamicFieldInfo(SchemaApi.GetDynamicFieldInfoApiResponse apiResponse)
        {
            OnGetDynamicFieldInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDynamicFieldInfo(Exception exception)
        {
            OnErrorGetDynamicFieldInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFieldInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFieldInfo;

        internal void ExecuteOnGetFieldInfo(SchemaApi.GetFieldInfoApiResponse apiResponse)
        {
            OnGetFieldInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFieldInfo(Exception exception)
        {
            OnErrorGetFieldInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFieldTypeInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFieldTypeInfo;

        internal void ExecuteOnGetFieldTypeInfo(SchemaApi.GetFieldTypeInfoApiResponse apiResponse)
        {
            OnGetFieldTypeInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFieldTypeInfo(Exception exception)
        {
            OnErrorGetFieldTypeInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaInfo;

        internal void ExecuteOnGetSchemaInfo(SchemaApi.GetSchemaInfoApiResponse apiResponse)
        {
            OnGetSchemaInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaInfo(Exception exception)
        {
            OnErrorGetSchemaInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaName;

        internal void ExecuteOnGetSchemaName(SchemaApi.GetSchemaNameApiResponse apiResponse)
        {
            OnGetSchemaName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaName(Exception exception)
        {
            OnErrorGetSchemaName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaSimilarity;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaSimilarity;

        internal void ExecuteOnGetSchemaSimilarity(SchemaApi.GetSchemaSimilarityApiResponse apiResponse)
        {
            OnGetSchemaSimilarity?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaSimilarity(Exception exception)
        {
            OnErrorGetSchemaSimilarity?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaUniqueKey;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaUniqueKey;

        internal void ExecuteOnGetSchemaUniqueKey(SchemaApi.GetSchemaUniqueKeyApiResponse apiResponse)
        {
            OnGetSchemaUniqueKey?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaUniqueKey(Exception exception)
        {
            OnErrorGetSchemaUniqueKey?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaVersion;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaVersion;

        internal void ExecuteOnGetSchemaVersion(SchemaApi.GetSchemaVersionApiResponse apiResponse)
        {
            OnGetSchemaVersion?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaVersion(Exception exception)
        {
            OnErrorGetSchemaVersion?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSchemaZkVersion;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSchemaZkVersion;

        internal void ExecuteOnGetSchemaZkVersion(SchemaApi.GetSchemaZkVersionApiResponse apiResponse)
        {
            OnGetSchemaZkVersion?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSchemaZkVersion(Exception exception)
        {
            OnErrorGetSchemaZkVersion?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListCopyFields;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListCopyFields;

        internal void ExecuteOnListCopyFields(SchemaApi.ListCopyFieldsApiResponse apiResponse)
        {
            OnListCopyFields?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListCopyFields(Exception exception)
        {
            OnErrorListCopyFields?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListDynamicFields;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListDynamicFields;

        internal void ExecuteOnListDynamicFields(SchemaApi.ListDynamicFieldsApiResponse apiResponse)
        {
            OnListDynamicFields?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListDynamicFields(Exception exception)
        {
            OnErrorListDynamicFields?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListSchemaFieldTypes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListSchemaFieldTypes;

        internal void ExecuteOnListSchemaFieldTypes(SchemaApi.ListSchemaFieldTypesApiResponse apiResponse)
        {
            OnListSchemaFieldTypes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSchemaFieldTypes(Exception exception)
        {
            OnErrorListSchemaFieldTypes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListSchemaFields;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListSchemaFields;

        internal void ExecuteOnListSchemaFields(SchemaApi.ListSchemaFieldsApiResponse apiResponse)
        {
            OnListSchemaFields?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListSchemaFields(Exception exception)
        {
            OnErrorListSchemaFields?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SchemaApi : ISchemaApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SchemaApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SchemaApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(ILogger<SchemaApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SchemaApiEvents schemaApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SchemaApi>();
            HttpClient = httpClient;
            Events = schemaApiEvents;
        }

        partial void FormatGetDynamicFieldInfo(ref IndexType indexType, ref string indexName, ref string fieldName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        private void ValidateGetDynamicFieldInfo(string indexName, string fieldName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));

            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        private void AfterGetDynamicFieldInfoDefaultImplementation(IGetDynamicFieldInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldName)
        {
            bool suppressDefaultLog = false;
            AfterGetDynamicFieldInfo(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName, fieldName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        partial void AfterGetDynamicFieldInfo(ref bool suppressDefaultLog, IGetDynamicFieldInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        private void OnErrorGetDynamicFieldInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDynamicFieldInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName, fieldName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        partial void OnErrorGetDynamicFieldInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldName);

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDynamicFieldInfoApiResponse"/>&gt;</returns>
        public async Task<IGetDynamicFieldInfoApiResponse?> GetDynamicFieldInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDynamicFieldInfoAsync(indexType, indexName, fieldName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get detailed info about a single dynamic field 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDynamicFieldInfoApiResponse"/>&gt;</returns>
        public async Task<IGetDynamicFieldInfoApiResponse> GetDynamicFieldInfoAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDynamicFieldInfo(indexName, fieldName);

                FormatGetDynamicFieldInfo(ref indexType, ref indexName, ref fieldName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/dynamicfields/{fieldName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfieldName%7D", Uri.EscapeDataString(fieldName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDynamicFieldInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDynamicFieldInfoApiResponse>();

                        GetDynamicFieldInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/dynamicfields/{fieldName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDynamicFieldInfoDefaultImplementation(apiResponseLocalVar, indexType, indexName, fieldName);

                        Events.ExecuteOnGetDynamicFieldInfo(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDynamicFieldInfoDefaultImplementation(e, "/{indexType}/{indexName}/schema/dynamicfields/{fieldName}", uriBuilderLocalVar.Path, indexType, indexName, fieldName);
                Events.ExecuteOnErrorGetDynamicFieldInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDynamicFieldInfoApiResponse"/>
        /// </summary>
        public partial class GetDynamicFieldInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDynamicFieldInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDynamicFieldInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDynamicFieldInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDynamicFieldInfoApiResponse(ILogger<GetDynamicFieldInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaGetDynamicFieldInfoResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaGetDynamicFieldInfoResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaGetDynamicFieldInfoResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFieldInfo(ref IndexType indexType, ref string indexName, ref string fieldName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        private void ValidateGetFieldInfo(string indexName, string fieldName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));

            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        private void AfterGetFieldInfoDefaultImplementation(IGetFieldInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldName)
        {
            bool suppressDefaultLog = false;
            AfterGetFieldInfo(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName, fieldName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        partial void AfterGetFieldInfo(ref bool suppressDefaultLog, IGetFieldInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        private void OnErrorGetFieldInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFieldInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName, fieldName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        partial void OnErrorGetFieldInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldName);

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldInfoApiResponse"/>&gt;</returns>
        public async Task<IGetFieldInfoApiResponse?> GetFieldInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFieldInfoAsync(indexType, indexName, fieldName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get detailed info about a single non-dynamic field 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldInfoApiResponse"/>&gt;</returns>
        public async Task<IGetFieldInfoApiResponse> GetFieldInfoAsync(IndexType indexType, string indexName, string fieldName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFieldInfo(indexName, fieldName);

                FormatGetFieldInfo(ref indexType, ref indexName, ref fieldName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/fields/{fieldName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfieldName%7D", Uri.EscapeDataString(fieldName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFieldInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFieldInfoApiResponse>();

                        GetFieldInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/fields/{fieldName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFieldInfoDefaultImplementation(apiResponseLocalVar, indexType, indexName, fieldName);

                        Events.ExecuteOnGetFieldInfo(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFieldInfoDefaultImplementation(e, "/{indexType}/{indexName}/schema/fields/{fieldName}", uriBuilderLocalVar.Path, indexType, indexName, fieldName);
                Events.ExecuteOnErrorGetFieldInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFieldInfoApiResponse"/>
        /// </summary>
        public partial class GetFieldInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFieldInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFieldInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFieldInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFieldInfoApiResponse(ILogger<GetFieldInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaGetFieldInfoResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaGetFieldInfoResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaGetFieldInfoResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFieldTypeInfo(ref IndexType indexType, ref string indexName, ref string fieldTypeName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <returns></returns>
        private void ValidateGetFieldTypeInfo(string indexName, string fieldTypeName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));

            if (fieldTypeName == null)
                throw new ArgumentNullException(nameof(fieldTypeName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        private void AfterGetFieldTypeInfoDefaultImplementation(IGetFieldTypeInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldTypeName)
        {
            bool suppressDefaultLog = false;
            AfterGetFieldTypeInfo(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName, fieldTypeName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        partial void AfterGetFieldTypeInfo(ref bool suppressDefaultLog, IGetFieldTypeInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName, string fieldTypeName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        private void OnErrorGetFieldTypeInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldTypeName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFieldTypeInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName, fieldTypeName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        partial void OnErrorGetFieldTypeInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, string fieldTypeName);

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldTypeInfoApiResponse"/>&gt;</returns>
        public async Task<IGetFieldTypeInfoApiResponse?> GetFieldTypeInfoOrDefaultAsync(IndexType indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFieldTypeInfoAsync(indexType, indexName, fieldTypeName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get detailed info about a single field type 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="fieldTypeName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFieldTypeInfoApiResponse"/>&gt;</returns>
        public async Task<IGetFieldTypeInfoApiResponse> GetFieldTypeInfoAsync(IndexType indexType, string indexName, string fieldTypeName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFieldTypeInfo(indexName, fieldTypeName);

                FormatGetFieldTypeInfo(ref indexType, ref indexName, ref fieldTypeName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/fieldtypes/{fieldTypeName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfieldTypeName%7D", Uri.EscapeDataString(fieldTypeName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFieldTypeInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFieldTypeInfoApiResponse>();

                        GetFieldTypeInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/fieldtypes/{fieldTypeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFieldTypeInfoDefaultImplementation(apiResponseLocalVar, indexType, indexName, fieldTypeName);

                        Events.ExecuteOnGetFieldTypeInfo(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFieldTypeInfoDefaultImplementation(e, "/{indexType}/{indexName}/schema/fieldtypes/{fieldTypeName}", uriBuilderLocalVar.Path, indexType, indexName, fieldTypeName);
                Events.ExecuteOnErrorGetFieldTypeInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFieldTypeInfoApiResponse"/>
        /// </summary>
        public partial class GetFieldTypeInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFieldTypeInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFieldTypeInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFieldTypeInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFieldTypeInfoApiResponse(ILogger<GetFieldTypeInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaGetFieldTypeInfoResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaGetFieldTypeInfoResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaGetFieldTypeInfoResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaInfo(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaInfo(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterGetSchemaInfoDefaultImplementation(IGetSchemaInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaInfo(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterGetSchemaInfo(ref bool suppressDefaultLog, IGetSchemaInfoApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorGetSchemaInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorGetSchemaInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaInfoApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaInfoApiResponse?> GetSchemaInfoOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaInfoAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch the entire schema of the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaInfoApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaInfoApiResponse> GetSchemaInfoAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaInfo(indexName);

                FormatGetSchemaInfo(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaInfoApiResponse>();

                        GetSchemaInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaInfoDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnGetSchemaInfo(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaInfoDefaultImplementation(e, "/{indexType}/{indexName}/schema", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorGetSchemaInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaInfoApiResponse"/>
        /// </summary>
        public partial class GetSchemaInfoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaInfoApiResponse(ILogger<GetSchemaInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaInfoResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaInfoResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaInfoResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaName(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaName(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterGetSchemaNameDefaultImplementation(IGetSchemaNameApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaName(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterGetSchemaName(ref bool suppressDefaultLog, IGetSchemaNameApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorGetSchemaNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorGetSchemaName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaNameApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaNameApiResponse?> GetSchemaNameOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaNameAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the name of the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaNameApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaNameApiResponse> GetSchemaNameAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaName(indexName);

                FormatGetSchemaName(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/name";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaNameApiResponse>();

                        GetSchemaNameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/name", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaNameDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnGetSchemaName(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaNameDefaultImplementation(e, "/{indexType}/{indexName}/schema/name", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorGetSchemaName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaNameApiResponse"/>
        /// </summary>
        public partial class GetSchemaNameApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaNameApiResponse(ILogger<GetSchemaNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaNameResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaNameResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaNameResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaSimilarity(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaSimilarity(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterGetSchemaSimilarityDefaultImplementation(IGetSchemaSimilarityApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaSimilarity(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterGetSchemaSimilarity(ref bool suppressDefaultLog, IGetSchemaSimilarityApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorGetSchemaSimilarityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaSimilarity(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorGetSchemaSimilarity(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaSimilarityApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaSimilarityApiResponse?> GetSchemaSimilarityOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaSimilarityAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the default similarity configuration used by the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaSimilarityApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaSimilarityApiResponse> GetSchemaSimilarityAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaSimilarity(indexName);

                FormatGetSchemaSimilarity(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/similarity";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaSimilarityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaSimilarityApiResponse>();

                        GetSchemaSimilarityApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/similarity", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaSimilarityDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnGetSchemaSimilarity(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaSimilarityDefaultImplementation(e, "/{indexType}/{indexName}/schema/similarity", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorGetSchemaSimilarity(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaSimilarityApiResponse"/>
        /// </summary>
        public partial class GetSchemaSimilarityApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaSimilarityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaSimilarityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaSimilarityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaSimilarityApiResponse(ILogger<GetSchemaSimilarityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaSimilarityResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaSimilarityResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaSimilarityResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaUniqueKey(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaUniqueKey(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterGetSchemaUniqueKeyDefaultImplementation(IGetSchemaUniqueKeyApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaUniqueKey(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterGetSchemaUniqueKey(ref bool suppressDefaultLog, IGetSchemaUniqueKeyApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorGetSchemaUniqueKeyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaUniqueKey(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorGetSchemaUniqueKey(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaUniqueKeyApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaUniqueKeyApiResponse?> GetSchemaUniqueKeyOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaUniqueKeyAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch the uniquekey of the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaUniqueKeyApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaUniqueKeyApiResponse> GetSchemaUniqueKeyAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaUniqueKey(indexName);

                FormatGetSchemaUniqueKey(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/uniquekey";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaUniqueKeyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaUniqueKeyApiResponse>();

                        GetSchemaUniqueKeyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/uniquekey", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaUniqueKeyDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnGetSchemaUniqueKey(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaUniqueKeyDefaultImplementation(e, "/{indexType}/{indexName}/schema/uniquekey", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorGetSchemaUniqueKey(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaUniqueKeyApiResponse"/>
        /// </summary>
        public partial class GetSchemaUniqueKeyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaUniqueKeyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaUniqueKeyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaUniqueKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaUniqueKeyApiResponse(ILogger<GetSchemaUniqueKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaUniqueKeyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaUniqueKeyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaUniqueKeyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaVersion(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaVersion(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterGetSchemaVersionDefaultImplementation(IGetSchemaVersionApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaVersion(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterGetSchemaVersion(ref bool suppressDefaultLog, IGetSchemaVersionApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorGetSchemaVersionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaVersion(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorGetSchemaVersion(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaVersionApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaVersionApiResponse?> GetSchemaVersionOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaVersionAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaVersionApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaVersionApiResponse> GetSchemaVersionAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaVersion(indexName);

                FormatGetSchemaVersion(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/version";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaVersionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaVersionApiResponse>();

                        GetSchemaVersionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/version", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaVersionDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnGetSchemaVersion(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaVersionDefaultImplementation(e, "/{indexType}/{indexName}/schema/version", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorGetSchemaVersion(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaVersionApiResponse"/>
        /// </summary>
        public partial class GetSchemaVersionApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaVersionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaVersionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaVersionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaVersionApiResponse(ILogger<GetSchemaVersionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaVersionResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaVersionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaVersionResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSchemaZkVersion(ref IndexType indexType, ref string indexName, ref Option<int> refreshIfBelowVersion);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateGetSchemaZkVersion(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"></param>
        private void AfterGetSchemaZkVersionDefaultImplementation(IGetSchemaZkVersionApiResponse apiResponseLocalVar, IndexType indexType, string indexName, Option<int> refreshIfBelowVersion)
        {
            bool suppressDefaultLog = false;
            AfterGetSchemaZkVersion(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName, refreshIfBelowVersion);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"></param>
        partial void AfterGetSchemaZkVersion(ref bool suppressDefaultLog, IGetSchemaZkVersionApiResponse apiResponseLocalVar, IndexType indexType, string indexName, Option<int> refreshIfBelowVersion);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"></param>
        private void OnErrorGetSchemaZkVersionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, Option<int> refreshIfBelowVersion)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSchemaZkVersion(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName, refreshIfBelowVersion);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"></param>
        partial void OnErrorGetSchemaZkVersion(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName, Option<int> refreshIfBelowVersion);

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaZkVersionApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaZkVersionApiResponse?> GetSchemaZkVersionOrDefaultAsync(IndexType indexType, string indexName, Option<int> refreshIfBelowVersion = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSchemaZkVersionAsync(indexType, indexName, refreshIfBelowVersion, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch the schema version currently used by the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="refreshIfBelowVersion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSchemaZkVersionApiResponse"/>&gt;</returns>
        public async Task<IGetSchemaZkVersionApiResponse> GetSchemaZkVersionAsync(IndexType indexType, string indexName, Option<int> refreshIfBelowVersion = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSchemaZkVersion(indexName);

                FormatGetSchemaZkVersion(ref indexType, ref indexName, ref refreshIfBelowVersion);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/zkversion";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (refreshIfBelowVersion.IsSet)
                        parseQueryStringLocalVar["refreshIfBelowVersion"] = ClientUtils.ParameterToString(refreshIfBelowVersion.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSchemaZkVersionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSchemaZkVersionApiResponse>();

                        GetSchemaZkVersionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/zkversion", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSchemaZkVersionDefaultImplementation(apiResponseLocalVar, indexType, indexName, refreshIfBelowVersion);

                        Events.ExecuteOnGetSchemaZkVersion(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSchemaZkVersionDefaultImplementation(e, "/{indexType}/{indexName}/schema/zkversion", uriBuilderLocalVar.Path, indexType, indexName, refreshIfBelowVersion);
                Events.ExecuteOnErrorGetSchemaZkVersion(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSchemaZkVersionApiResponse"/>
        /// </summary>
        public partial class GetSchemaZkVersionApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSchemaZkVersionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSchemaZkVersionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSchemaZkVersionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSchemaZkVersionApiResponse(ILogger<GetSchemaZkVersionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaZkVersionResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaZkVersionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaZkVersionResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListCopyFields(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateListCopyFields(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterListCopyFieldsDefaultImplementation(IListCopyFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterListCopyFields(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterListCopyFields(ref bool suppressDefaultLog, IListCopyFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorListCopyFieldsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListCopyFields(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorListCopyFields(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCopyFieldsApiResponse"/>&gt;</returns>
        public async Task<IListCopyFieldsApiResponse?> ListCopyFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListCopyFieldsAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all copy-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCopyFieldsApiResponse"/>&gt;</returns>
        public async Task<IListCopyFieldsApiResponse> ListCopyFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListCopyFields(indexName);

                FormatListCopyFields(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/copyfields";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListCopyFieldsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListCopyFieldsApiResponse>();

                        ListCopyFieldsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/copyfields", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListCopyFieldsDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnListCopyFields(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListCopyFieldsDefaultImplementation(e, "/{indexType}/{indexName}/schema/copyfields", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorListCopyFields(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListCopyFieldsApiResponse"/>
        /// </summary>
        public partial class ListCopyFieldsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListCopyFieldsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListCopyFieldsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListCopyFieldsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListCopyFieldsApiResponse(ILogger<ListCopyFieldsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaListCopyFieldsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaListCopyFieldsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaListCopyFieldsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListDynamicFields(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateListDynamicFields(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterListDynamicFieldsDefaultImplementation(IListDynamicFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterListDynamicFields(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterListDynamicFields(ref bool suppressDefaultLog, IListDynamicFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorListDynamicFieldsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListDynamicFields(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorListDynamicFields(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListDynamicFieldsApiResponse"/>&gt;</returns>
        public async Task<IListDynamicFieldsApiResponse?> ListDynamicFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListDynamicFieldsAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all dynamic-fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListDynamicFieldsApiResponse"/>&gt;</returns>
        public async Task<IListDynamicFieldsApiResponse> ListDynamicFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListDynamicFields(indexName);

                FormatListDynamicFields(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/dynamicfields";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListDynamicFieldsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListDynamicFieldsApiResponse>();

                        ListDynamicFieldsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/dynamicfields", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListDynamicFieldsDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnListDynamicFields(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListDynamicFieldsDefaultImplementation(e, "/{indexType}/{indexName}/schema/dynamicfields", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorListDynamicFields(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListDynamicFieldsApiResponse"/>
        /// </summary>
        public partial class ListDynamicFieldsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListDynamicFieldsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListDynamicFieldsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListDynamicFieldsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListDynamicFieldsApiResponse(ILogger<ListDynamicFieldsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaListDynamicFieldsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaListDynamicFieldsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaListDynamicFieldsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSchemaFieldTypes(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateListSchemaFieldTypes(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterListSchemaFieldTypesDefaultImplementation(IListSchemaFieldTypesApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterListSchemaFieldTypes(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterListSchemaFieldTypes(ref bool suppressDefaultLog, IListSchemaFieldTypesApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorListSchemaFieldTypesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSchemaFieldTypes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorListSchemaFieldTypes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldTypesApiResponse"/>&gt;</returns>
        public async Task<IListSchemaFieldTypesApiResponse?> ListSchemaFieldTypesOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSchemaFieldTypesAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all field types in the schema used by the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldTypesApiResponse"/>&gt;</returns>
        public async Task<IListSchemaFieldTypesApiResponse> ListSchemaFieldTypesAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSchemaFieldTypes(indexName);

                FormatListSchemaFieldTypes(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/fieldtypes";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListSchemaFieldTypesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSchemaFieldTypesApiResponse>();

                        ListSchemaFieldTypesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/fieldtypes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListSchemaFieldTypesDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnListSchemaFieldTypes(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSchemaFieldTypesDefaultImplementation(e, "/{indexType}/{indexName}/schema/fieldtypes", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorListSchemaFieldTypes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSchemaFieldTypesApiResponse"/>
        /// </summary>
        public partial class ListSchemaFieldTypesApiResponse : Org.OpenAPITools.Client.ApiResponse, IListSchemaFieldTypesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSchemaFieldTypesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSchemaFieldTypesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSchemaFieldTypesApiResponse(ILogger<ListSchemaFieldTypesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaListFieldTypesResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaListFieldTypesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaListFieldTypesResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListSchemaFields(ref IndexType indexType, ref string indexName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexName"></param>
        /// <returns></returns>
        private void ValidateListSchemaFields(string indexName)
        {
            if (indexName == null)
                throw new ArgumentNullException(nameof(indexName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void AfterListSchemaFieldsDefaultImplementation(IListSchemaFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLog = false;
            AfterListSchemaFields(ref suppressDefaultLog, apiResponseLocalVar, indexType, indexName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void AfterListSchemaFields(ref bool suppressDefaultLog, IListSchemaFieldsApiResponse apiResponseLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        private void OnErrorListSchemaFieldsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListSchemaFields(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexType, indexName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        partial void OnErrorListSchemaFields(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, IndexType indexType, string indexName);

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldsApiResponse"/>&gt;</returns>
        public async Task<IListSchemaFieldsApiResponse?> ListSchemaFieldsOrDefaultAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListSchemaFieldsAsync(indexType, indexName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all non-dynamic fields in the schema of the specified core or collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexType"></param>
        /// <param name="indexName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListSchemaFieldsApiResponse"/>&gt;</returns>
        public async Task<IListSchemaFieldsApiResponse> ListSchemaFieldsAsync(IndexType indexType, string indexName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListSchemaFields(indexName);

                FormatListSchemaFields(ref indexType, ref indexName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/{indexType}/{indexName}/schema/fields";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexType%7D", Uri.EscapeDataString(indexType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BindexName%7D", Uri.EscapeDataString(indexName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListSchemaFieldsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListSchemaFieldsApiResponse>();

                        ListSchemaFieldsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/{indexType}/{indexName}/schema/fields", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListSchemaFieldsDefaultImplementation(apiResponseLocalVar, indexType, indexName);

                        Events.ExecuteOnListSchemaFields(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListSchemaFieldsDefaultImplementation(e, "/{indexType}/{indexName}/schema/fields", uriBuilderLocalVar.Path, indexType, indexName);
                Events.ExecuteOnErrorListSchemaFields(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListSchemaFieldsApiResponse"/>
        /// </summary>
        public partial class ListSchemaFieldsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListSchemaFieldsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListSchemaFieldsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListSchemaFieldsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListSchemaFieldsApiResponse(ILogger<ListSchemaFieldsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SchemaListFieldsResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SchemaListFieldsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SchemaListFieldsResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
