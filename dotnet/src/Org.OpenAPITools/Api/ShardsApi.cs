// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IShardsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ShardsApiEvents Events { get; }

        /// <summary>
        /// Create a new shard in an existing collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShardApiResponse"/>&gt;</returns>
        Task<ICreateShardApiResponse> CreateShardAsync(string collectionName, Option<CreateShardRequestBody> createShardRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new shard in an existing collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShardApiResponse"/>?&gt;</returns>
        Task<ICreateShardApiResponse?> CreateShardOrDefaultAsync(string collectionName, Option<CreateShardRequestBody> createShardRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteShardApiResponse"/>&gt;</returns>
        Task<IDeleteShardApiResponse> DeleteShardAsync(string collectionName, string shardName, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteShardApiResponse"/>?&gt;</returns>
        Task<IDeleteShardApiResponse?> DeleteShardOrDefaultAsync(string collectionName, string shardName, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Force leader election to occur on the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForceShardLeaderApiResponse"/>&gt;</returns>
        Task<IForceShardLeaderApiResponse> ForceShardLeaderAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Force leader election to occur on the specified collection and shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForceShardLeaderApiResponse"/>?&gt;</returns>
        Task<IForceShardLeaderApiResponse?> ForceShardLeaderOrDefaultAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Install offline index into an existing shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallShardDataApiResponse"/>&gt;</returns>
        Task<IInstallShardDataApiResponse> InstallShardDataAsync(string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Install offline index into an existing shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallShardDataApiResponse"/>?&gt;</returns>
        Task<IInstallShardDataApiResponse?> InstallShardDataOrDefaultAsync(string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Trigger a &#39;sync&#39; operation for the specified shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncShardApiResponse"/>&gt;</returns>
        Task<ISyncShardApiResponse> SyncShardAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Trigger a &#39;sync&#39; operation for the specified shard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncShardApiResponse"/>?&gt;</returns>
        Task<ISyncShardApiResponse?> SyncShardOrDefaultAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateShardApiResponse"/>
    /// </summary>
    public interface ICreateShardApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteShardApiResponse"/>
    /// </summary>
    public interface IDeleteShardApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IForceShardLeaderApiResponse"/>
    /// </summary>
    public interface IForceShardLeaderApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IInstallShardDataApiResponse"/>
    /// </summary>
    public interface IInstallShardDataApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISyncShardApiResponse"/>
    /// </summary>
    public interface ISyncShardApiResponse : Org.OpenAPITools.Client.IApiResponse, IDefault<Org.OpenAPITools.Model.SolrJerseyResponse?>
    {
        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ShardsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateShard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateShard;

        internal void ExecuteOnCreateShard(ShardsApi.CreateShardApiResponse apiResponse)
        {
            OnCreateShard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateShard(Exception exception)
        {
            OnErrorCreateShard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteShard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteShard;

        internal void ExecuteOnDeleteShard(ShardsApi.DeleteShardApiResponse apiResponse)
        {
            OnDeleteShard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteShard(Exception exception)
        {
            OnErrorDeleteShard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnForceShardLeader;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorForceShardLeader;

        internal void ExecuteOnForceShardLeader(ShardsApi.ForceShardLeaderApiResponse apiResponse)
        {
            OnForceShardLeader?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorForceShardLeader(Exception exception)
        {
            OnErrorForceShardLeader?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInstallShardData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInstallShardData;

        internal void ExecuteOnInstallShardData(ShardsApi.InstallShardDataApiResponse apiResponse)
        {
            OnInstallShardData?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInstallShardData(Exception exception)
        {
            OnErrorInstallShardData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSyncShard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSyncShard;

        internal void ExecuteOnSyncShard(ShardsApi.SyncShardApiResponse apiResponse)
        {
            OnSyncShard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSyncShard(Exception exception)
        {
            OnErrorSyncShard?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ShardsApi : IShardsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ShardsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ShardsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShardsApi(ILogger<ShardsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ShardsApiEvents shardsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ShardsApi>();
            HttpClient = httpClient;
            Events = shardsApiEvents;
        }

        partial void FormatCreateShard(ref string collectionName, Option<CreateShardRequestBody> createShardRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"></param>
        /// <returns></returns>
        private void ValidateCreateShard(string collectionName, Option<CreateShardRequestBody> createShardRequestBody)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (createShardRequestBody.IsSet && createShardRequestBody.Value == null)
                throw new ArgumentNullException(nameof(createShardRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"></param>
        private void AfterCreateShardDefaultImplementation(ICreateShardApiResponse apiResponseLocalVar, string collectionName, Option<CreateShardRequestBody> createShardRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterCreateShard(ref suppressDefaultLog, apiResponseLocalVar, collectionName, createShardRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"></param>
        partial void AfterCreateShard(ref bool suppressDefaultLog, ICreateShardApiResponse apiResponseLocalVar, string collectionName, Option<CreateShardRequestBody> createShardRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"></param>
        private void OnErrorCreateShardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<CreateShardRequestBody> createShardRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateShard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, createShardRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"></param>
        partial void OnErrorCreateShard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, Option<CreateShardRequestBody> createShardRequestBody);

        /// <summary>
        /// Create a new shard in an existing collection 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShardApiResponse"/>&gt;</returns>
        public async Task<ICreateShardApiResponse?> CreateShardOrDefaultAsync(string collectionName, Option<CreateShardRequestBody> createShardRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateShardAsync(collectionName, createShardRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new shard in an existing collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="createShardRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShardApiResponse"/>&gt;</returns>
        public async Task<ICreateShardApiResponse> CreateShardAsync(string collectionName, Option<CreateShardRequestBody> createShardRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateShard(collectionName, createShardRequestBody);

                FormatCreateShard(ref collectionName, createShardRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));

                    if (createShardRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (createShardRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createShardRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateShardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateShardApiResponse>();

                        CreateShardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateShardDefaultImplementation(apiResponseLocalVar, collectionName, createShardRequestBody);

                        Events.ExecuteOnCreateShard(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateShardDefaultImplementation(e, "/collections/{collectionName}/shards", uriBuilderLocalVar.Path, collectionName, createShardRequestBody);
                Events.ExecuteOnErrorCreateShard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateShardApiResponse"/>
        /// </summary>
        public partial class CreateShardApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateShardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateShardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateShardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateShardApiResponse(ILogger<CreateShardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteShard(ref string collectionName, ref string shardName, ref Option<bool> deleteInstanceDir, ref Option<bool> deleteDataDir, ref Option<bool> deleteIndex, ref Option<bool> followAliases, ref Option<string> async);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="async"></param>
        /// <returns></returns>
        private void ValidateDeleteShard(string collectionName, string shardName, Option<string> async)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void AfterDeleteShardDefaultImplementation(IDeleteShardApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLog = false;
            AfterDeleteShard(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void AfterDeleteShard(ref bool suppressDefaultLog, IDeleteShardApiResponse apiResponseLocalVar, string collectionName, string shardName, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        private void OnErrorDeleteShardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> followAliases, Option<string> async)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteShard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"></param>
        /// <param name="deleteDataDir"></param>
        /// <param name="deleteIndex"></param>
        /// <param name="followAliases"></param>
        /// <param name="async"></param>
        partial void OnErrorDeleteShard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName, Option<bool> deleteInstanceDir, Option<bool> deleteDataDir, Option<bool> deleteIndex, Option<bool> followAliases, Option<string> async);

        /// <summary>
        /// Delete an existing shard 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteShardApiResponse"/>&gt;</returns>
        public async Task<IDeleteShardApiResponse?> DeleteShardOrDefaultAsync(string collectionName, string shardName, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteShardAsync(collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an existing shard 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="deleteInstanceDir"> (optional)</param>
        /// <param name="deleteDataDir"> (optional)</param>
        /// <param name="deleteIndex"> (optional)</param>
        /// <param name="followAliases"> (optional)</param>
        /// <param name="async"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteShardApiResponse"/>&gt;</returns>
        public async Task<IDeleteShardApiResponse> DeleteShardAsync(string collectionName, string shardName, Option<bool> deleteInstanceDir = default, Option<bool> deleteDataDir = default, Option<bool> deleteIndex = default, Option<bool> followAliases = default, Option<string> async = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteShard(collectionName, shardName, async);

                FormatDeleteShard(ref collectionName, ref shardName, ref deleteInstanceDir, ref deleteDataDir, ref deleteIndex, ref followAliases, ref async);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (deleteInstanceDir.IsSet)
                        parseQueryStringLocalVar["deleteInstanceDir"] = ClientUtils.ParameterToString(deleteInstanceDir.Value);

                    if (deleteDataDir.IsSet)
                        parseQueryStringLocalVar["deleteDataDir"] = ClientUtils.ParameterToString(deleteDataDir.Value);

                    if (deleteIndex.IsSet)
                        parseQueryStringLocalVar["deleteIndex"] = ClientUtils.ParameterToString(deleteIndex.Value);

                    if (followAliases.IsSet)
                        parseQueryStringLocalVar["followAliases"] = ClientUtils.ParameterToString(followAliases.Value);

                    if (async.IsSet)
                        parseQueryStringLocalVar["async"] = ClientUtils.ParameterToString(async.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteShardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteShardApiResponse>();

                        DeleteShardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteShardDefaultImplementation(apiResponseLocalVar, collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async);

                        Events.ExecuteOnDeleteShard(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteShardDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}", uriBuilderLocalVar.Path, collectionName, shardName, deleteInstanceDir, deleteDataDir, deleteIndex, followAliases, async);
                Events.ExecuteOnErrorDeleteShard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteShardApiResponse"/>
        /// </summary>
        public partial class DeleteShardApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteShardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteShardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteShardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteShardApiResponse(ILogger<DeleteShardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SubResponseAccumulatingJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatForceShardLeader(ref string collectionName, ref string shardName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <returns></returns>
        private void ValidateForceShardLeader(string collectionName, string shardName)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        private void AfterForceShardLeaderDefaultImplementation(IForceShardLeaderApiResponse apiResponseLocalVar, string collectionName, string shardName)
        {
            bool suppressDefaultLog = false;
            AfterForceShardLeader(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        partial void AfterForceShardLeader(ref bool suppressDefaultLog, IForceShardLeaderApiResponse apiResponseLocalVar, string collectionName, string shardName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        private void OnErrorForceShardLeaderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorForceShardLeader(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        partial void OnErrorForceShardLeader(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName);

        /// <summary>
        /// Force leader election to occur on the specified collection and shard 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForceShardLeaderApiResponse"/>&gt;</returns>
        public async Task<IForceShardLeaderApiResponse?> ForceShardLeaderOrDefaultAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ForceShardLeaderAsync(collectionName, shardName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Force leader election to occur on the specified collection and shard 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IForceShardLeaderApiResponse"/>&gt;</returns>
        public async Task<IForceShardLeaderApiResponse> ForceShardLeaderAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateForceShardLeader(collectionName, shardName);

                FormatForceShardLeader(ref collectionName, ref shardName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}/force-leader";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ForceShardLeaderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ForceShardLeaderApiResponse>();

                        ForceShardLeaderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}/force-leader", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterForceShardLeaderDefaultImplementation(apiResponseLocalVar, collectionName, shardName);

                        Events.ExecuteOnForceShardLeader(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorForceShardLeaderDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}/force-leader", uriBuilderLocalVar.Path, collectionName, shardName);
                Events.ExecuteOnErrorForceShardLeader(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ForceShardLeaderApiResponse"/>
        /// </summary>
        public partial class ForceShardLeaderApiResponse : Org.OpenAPITools.Client.ApiResponse, IForceShardLeaderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ForceShardLeaderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ForceShardLeaderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ForceShardLeaderApiResponse(ILogger<ForceShardLeaderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInstallShardData(ref string collName, ref string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"></param>
        /// <returns></returns>
        private void ValidateInstallShardData(string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody)
        {
            if (collName == null)
                throw new ArgumentNullException(nameof(collName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));

            if (installShardDataRequestBody.IsSet && installShardDataRequestBody.Value == null)
                throw new ArgumentNullException(nameof(installShardDataRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"></param>
        private void AfterInstallShardDataDefaultImplementation(IInstallShardDataApiResponse apiResponseLocalVar, string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterInstallShardData(ref suppressDefaultLog, apiResponseLocalVar, collName, shardName, installShardDataRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"></param>
        partial void AfterInstallShardData(ref bool suppressDefaultLog, IInstallShardDataApiResponse apiResponseLocalVar, string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"></param>
        private void OnErrorInstallShardDataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInstallShardData(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collName, shardName, installShardDataRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"></param>
        partial void OnErrorInstallShardData(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody);

        /// <summary>
        /// Install offline index into an existing shard 
        /// </summary>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallShardDataApiResponse"/>&gt;</returns>
        public async Task<IInstallShardDataApiResponse?> InstallShardDataOrDefaultAsync(string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InstallShardDataAsync(collName, shardName, installShardDataRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Install offline index into an existing shard 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collName"></param>
        /// <param name="shardName"></param>
        /// <param name="installShardDataRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInstallShardDataApiResponse"/>&gt;</returns>
        public async Task<IInstallShardDataApiResponse> InstallShardDataAsync(string collName, string shardName, Option<InstallShardDataRequestBody> installShardDataRequestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInstallShardData(collName, shardName, installShardDataRequestBody);

                FormatInstallShardData(ref collName, ref shardName, installShardDataRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collName}/shards/{shardName}/install";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollName%7D", Uri.EscapeDataString(collName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    if (installShardDataRequestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (installShardDataRequestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(installShardDataRequestBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InstallShardDataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InstallShardDataApiResponse>();

                        InstallShardDataApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collName}/shards/{shardName}/install", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInstallShardDataDefaultImplementation(apiResponseLocalVar, collName, shardName, installShardDataRequestBody);

                        Events.ExecuteOnInstallShardData(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInstallShardDataDefaultImplementation(e, "/collections/{collName}/shards/{shardName}/install", uriBuilderLocalVar.Path, collName, shardName, installShardDataRequestBody);
                Events.ExecuteOnErrorInstallShardData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InstallShardDataApiResponse"/>
        /// </summary>
        public partial class InstallShardDataApiResponse : Org.OpenAPITools.Client.ApiResponse, IInstallShardDataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InstallShardDataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InstallShardDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InstallShardDataApiResponse(ILogger<InstallShardDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSyncShard(ref string collectionName, ref string shardName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <returns></returns>
        private void ValidateSyncShard(string collectionName, string shardName)
        {
            if (collectionName == null)
                throw new ArgumentNullException(nameof(collectionName));

            if (shardName == null)
                throw new ArgumentNullException(nameof(shardName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        private void AfterSyncShardDefaultImplementation(ISyncShardApiResponse apiResponseLocalVar, string collectionName, string shardName)
        {
            bool suppressDefaultLog = false;
            AfterSyncShard(ref suppressDefaultLog, apiResponseLocalVar, collectionName, shardName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        partial void AfterSyncShard(ref bool suppressDefaultLog, ISyncShardApiResponse apiResponseLocalVar, string collectionName, string shardName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        private void OnErrorSyncShardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSyncShard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, collectionName, shardName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        partial void OnErrorSyncShard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string collectionName, string shardName);

        /// <summary>
        /// Trigger a &#39;sync&#39; operation for the specified shard 
        /// </summary>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncShardApiResponse"/>&gt;</returns>
        public async Task<ISyncShardApiResponse?> SyncShardOrDefaultAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SyncShardAsync(collectionName, shardName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Trigger a &#39;sync&#39; operation for the specified shard 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName"></param>
        /// <param name="shardName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncShardApiResponse"/>&gt;</returns>
        public async Task<ISyncShardApiResponse> SyncShardAsync(string collectionName, string shardName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSyncShard(collectionName, shardName);

                FormatSyncShard(ref collectionName, ref shardName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/collections/{collectionName}/shards/{shardName}/sync";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcollectionName%7D", Uri.EscapeDataString(collectionName.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshardName%7D", Uri.EscapeDataString(shardName.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SyncShardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SyncShardApiResponse>();

                        SyncShardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/collections/{collectionName}/shards/{shardName}/sync", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSyncShardDefaultImplementation(apiResponseLocalVar, collectionName, shardName);

                        Events.ExecuteOnSyncShard(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSyncShardDefaultImplementation(e, "/collections/{collectionName}/shards/{shardName}/sync", uriBuilderLocalVar.Path, collectionName, shardName);
                Events.ExecuteOnErrorSyncShard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SyncShardApiResponse"/>
        /// </summary>
        public partial class SyncShardApiResponse : Org.OpenAPITools.Client.ApiResponse, ISyncShardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SyncShardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SyncShardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SyncShardApiResponse(ILogger<SyncShardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => true;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SolrJerseyResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SolrJerseyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.SolrJerseyResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
