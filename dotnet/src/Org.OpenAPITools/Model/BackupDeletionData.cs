// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BackupDeletionData
    /// </summary>
    public partial class BackupDeletionData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupDeletionData" /> class.
        /// </summary>
        /// <param name="startTime">startTime</param>
        /// <param name="backupId">backupId</param>
        /// <param name="size">size</param>
        /// <param name="numFiles">numFiles</param>
        [JsonConstructor]
        public BackupDeletionData(Option<string?> startTime = default, Option<int?> backupId = default, Option<long?> size = default, Option<int?> numFiles = default)
        {
            StartTimeOption = startTime;
            BackupIdOption = backupId;
            SizeOption = size;
            NumFilesOption = numFiles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BackupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackupId
        /// </summary>
        [JsonPropertyName("backupId")]
        public int? BackupId { get { return this.BackupIdOption; } set { this.BackupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumFilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumFiles
        /// </summary>
        [JsonPropertyName("numFiles")]
        public int? NumFiles { get { return this.NumFilesOption; } set { this.NumFilesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BackupDeletionData {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  BackupId: ").Append(BackupId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  NumFiles: ").Append(NumFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BackupDeletionData" />
    /// </summary>
    public class BackupDeletionDataJsonConverter : JsonConverter<BackupDeletionData>
    {
        /// <summary>
        /// Deserializes json to <see cref="BackupDeletionData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BackupDeletionData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> startTime = default;
            Option<int?> backupId = default;
            Option<long?> size = default;
            Option<int?> numFiles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "backupId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                backupId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "numFiles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numFiles = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class BackupDeletionData.");

            if (backupId.IsSet && backupId.Value == null)
                throw new ArgumentNullException(nameof(backupId), "Property is not nullable for class BackupDeletionData.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class BackupDeletionData.");

            if (numFiles.IsSet && numFiles.Value == null)
                throw new ArgumentNullException(nameof(numFiles), "Property is not nullable for class BackupDeletionData.");

            return new BackupDeletionData(startTime, backupId, size, numFiles);
        }

        /// <summary>
        /// Serializes a <see cref="BackupDeletionData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="backupDeletionData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BackupDeletionData backupDeletionData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, backupDeletionData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BackupDeletionData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="backupDeletionData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BackupDeletionData backupDeletionData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (backupDeletionData.StartTimeOption.IsSet && backupDeletionData.StartTime == null)
                throw new ArgumentNullException(nameof(backupDeletionData.StartTime), "Property is required for class BackupDeletionData.");

            if (backupDeletionData.StartTimeOption.IsSet)
                writer.WriteString("startTime", backupDeletionData.StartTime);

            if (backupDeletionData.BackupIdOption.IsSet)
                writer.WriteNumber("backupId", backupDeletionData.BackupIdOption.Value!.Value);

            if (backupDeletionData.SizeOption.IsSet)
                writer.WriteNumber("size", backupDeletionData.SizeOption.Value!.Value);

            if (backupDeletionData.NumFilesOption.IsSet)
                writer.WriteNumber("numFiles", backupDeletionData.NumFilesOption.Value!.Value);
        }
    }
}
