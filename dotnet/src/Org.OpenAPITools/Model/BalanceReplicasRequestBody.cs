// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BalanceReplicasRequestBody
    /// </summary>
    public partial class BalanceReplicasRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceReplicasRequestBody" /> class.
        /// </summary>
        /// <param name="nodes">The set of nodes across which replicas will be balanced. Defaults to all live data nodes.</param>
        /// <param name="waitForFinalState">If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously.</param>
        [JsonConstructor]
        public BalanceReplicasRequestBody(Option<List<string>?> nodes = default, Option<bool?> waitForFinalState = default, Option<string?> async = default)
        {
            NodesOption = nodes;
            WaitForFinalStateOption = waitForFinalState;
            AsyncOption = async;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Nodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NodesOption { get; private set; }

        /// <summary>
        /// The set of nodes across which replicas will be balanced. Defaults to all live data nodes.
        /// </summary>
        /// <value>The set of nodes across which replicas will be balanced. Defaults to all live data nodes.</value>
        [JsonPropertyName("nodes")]
        public List<string>? Nodes { get { return this.NodesOption; } set { this.NodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.
        /// </summary>
        /// <value>If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.</value>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BalanceReplicasRequestBody {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BalanceReplicasRequestBody" />
    /// </summary>
    public class BalanceReplicasRequestBodyJsonConverter : JsonConverter<BalanceReplicasRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="BalanceReplicasRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BalanceReplicasRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> nodes = default;
            Option<bool?> waitForFinalState = default;
            Option<string?> async = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "nodes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (nodes.IsSet && nodes.Value == null)
                throw new ArgumentNullException(nameof(nodes), "Property is not nullable for class BalanceReplicasRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class BalanceReplicasRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class BalanceReplicasRequestBody.");

            return new BalanceReplicasRequestBody(nodes, waitForFinalState, async);
        }

        /// <summary>
        /// Serializes a <see cref="BalanceReplicasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BalanceReplicasRequestBody balanceReplicasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, balanceReplicasRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BalanceReplicasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="balanceReplicasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BalanceReplicasRequestBody balanceReplicasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (balanceReplicasRequestBody.NodesOption.IsSet && balanceReplicasRequestBody.Nodes == null)
                throw new ArgumentNullException(nameof(balanceReplicasRequestBody.Nodes), "Property is required for class BalanceReplicasRequestBody.");

            if (balanceReplicasRequestBody.AsyncOption.IsSet && balanceReplicasRequestBody.Async == null)
                throw new ArgumentNullException(nameof(balanceReplicasRequestBody.Async), "Property is required for class BalanceReplicasRequestBody.");

            if (balanceReplicasRequestBody.NodesOption.IsSet)
            {
                writer.WritePropertyName("nodes");
                JsonSerializer.Serialize(writer, balanceReplicasRequestBody.Nodes, jsonSerializerOptions);
            }
            if (balanceReplicasRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", balanceReplicasRequestBody.WaitForFinalStateOption.Value!.Value);

            if (balanceReplicasRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", balanceReplicasRequestBody.Async);
        }
    }
}
