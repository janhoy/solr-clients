// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CategoryRoutedAliasProperties
    /// </summary>
    public partial class CategoryRoutedAliasProperties : RoutedAliasProperties, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryRoutedAliasProperties" /> class.
        /// </summary>
        /// <param name="field">field</param>
        /// <param name="maxCardinality">maxCardinality</param>
        /// <param name="mustMatch">mustMatch</param>
        [JsonConstructor]
        public CategoryRoutedAliasProperties(string field, Option<long?> maxCardinality = default, Option<string?> mustMatch = default) : base(field)
        {
            MaxCardinalityOption = maxCardinality;
            MustMatchOption = mustMatch;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MaxCardinality
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaxCardinalityOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxCardinality
        /// </summary>
        [JsonPropertyName("maxCardinality")]
        public long? MaxCardinality { get { return this.MaxCardinalityOption; } set { this.MaxCardinalityOption = new(value); } }

        /// <summary>
        /// Used to track the state of MustMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MustMatchOption { get; private set; }

        /// <summary>
        /// Gets or Sets MustMatch
        /// </summary>
        [JsonPropertyName("mustMatch")]
        public string? MustMatch { get { return this.MustMatchOption; } set { this.MustMatchOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryRoutedAliasProperties {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaxCardinality: ").Append(MaxCardinality).Append("\n");
            sb.Append("  MustMatch: ").Append(MustMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CategoryRoutedAliasProperties" />
    /// </summary>
    public class CategoryRoutedAliasPropertiesJsonConverter : JsonConverter<CategoryRoutedAliasProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="CategoryRoutedAliasProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CategoryRoutedAliasProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> field = default;
            Option<string?> type = default;
            Option<long?> maxCardinality = default;
            Option<string?> mustMatch = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "field":
                            field = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxCardinality":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxCardinality = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "mustMatch":
                            mustMatch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class CategoryRoutedAliasProperties.", nameof(field));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CategoryRoutedAliasProperties.", nameof(type));

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class CategoryRoutedAliasProperties.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CategoryRoutedAliasProperties.");

            if (maxCardinality.IsSet && maxCardinality.Value == null)
                throw new ArgumentNullException(nameof(maxCardinality), "Property is not nullable for class CategoryRoutedAliasProperties.");

            if (mustMatch.IsSet && mustMatch.Value == null)
                throw new ArgumentNullException(nameof(mustMatch), "Property is not nullable for class CategoryRoutedAliasProperties.");

            return new CategoryRoutedAliasProperties(field.Value!, maxCardinality, mustMatch);
        }

        /// <summary>
        /// Serializes a <see cref="CategoryRoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="categoryRoutedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CategoryRoutedAliasProperties categoryRoutedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, categoryRoutedAliasProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CategoryRoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="categoryRoutedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CategoryRoutedAliasProperties categoryRoutedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (categoryRoutedAliasProperties.Field == null)
                throw new ArgumentNullException(nameof(categoryRoutedAliasProperties.Field), "Property is required for class CategoryRoutedAliasProperties.");

            if (categoryRoutedAliasProperties.MustMatchOption.IsSet && categoryRoutedAliasProperties.MustMatch == null)
                throw new ArgumentNullException(nameof(categoryRoutedAliasProperties.MustMatch), "Property is required for class CategoryRoutedAliasProperties.");

            writer.WriteString("field", categoryRoutedAliasProperties.Field);

            writer.WriteString("type", categoryRoutedAliasProperties.Type);

            if (categoryRoutedAliasProperties.MaxCardinalityOption.IsSet)
                writer.WriteNumber("maxCardinality", categoryRoutedAliasProperties.MaxCardinalityOption.Value!.Value);

            if (categoryRoutedAliasProperties.MustMatchOption.IsSet)
                writer.WriteString("mustMatch", categoryRoutedAliasProperties.MustMatch);
        }
    }
}
