// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateAliasRequestBody
    /// </summary>
    public partial class CreateAliasRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAliasRequestBody" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="collections">collections</param>
        /// <param name="async">async</param>
        /// <param name="routers">routers</param>
        /// <param name="collCreationParameters">collCreationParameters</param>
        [JsonConstructor]
        public CreateAliasRequestBody(string name, Option<List<string>?> collections = default, Option<string?> async = default, Option<List<RoutedAliasProperties>?> routers = default, Option<CreateCollectionRequestBody?> collCreationParameters = default)
        {
            Name = name;
            CollectionsOption = collections;
            AsyncOption = async;
            RoutersOption = routers;
            CollCreationParametersOption = collCreationParameters;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Collections
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> CollectionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Collections
        /// </summary>
        [JsonPropertyName("collections")]
        public List<string>? Collections { get { return this.CollectionsOption; } set { this.CollectionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of Routers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RoutedAliasProperties>?> RoutersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Routers
        /// </summary>
        [JsonPropertyName("routers")]
        public List<RoutedAliasProperties>? Routers { get { return this.RoutersOption; } set { this.RoutersOption = new(value); } }

        /// <summary>
        /// Used to track the state of CollCreationParameters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateCollectionRequestBody?> CollCreationParametersOption { get; private set; }

        /// <summary>
        /// Gets or Sets CollCreationParameters
        /// </summary>
        [JsonPropertyName("collCreationParameters")]
        public CreateCollectionRequestBody? CollCreationParameters { get { return this.CollCreationParametersOption; } set { this.CollCreationParametersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAliasRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Collections: ").Append(Collections).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Routers: ").Append(Routers).Append("\n");
            sb.Append("  CollCreationParameters: ").Append(CollCreationParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateAliasRequestBody" />
    /// </summary>
    public class CreateAliasRequestBodyJsonConverter : JsonConverter<CreateAliasRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateAliasRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateAliasRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<List<string>?> collections = default;
            Option<string?> async = default;
            Option<List<RoutedAliasProperties>?> routers = default;
            Option<CreateCollectionRequestBody?> collCreationParameters = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "collections":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                collections = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "routers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                routers = new Option<List<RoutedAliasProperties>?>(JsonSerializer.Deserialize<List<RoutedAliasProperties>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "collCreationParameters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                collCreationParameters = new Option<CreateCollectionRequestBody?>(JsonSerializer.Deserialize<CreateCollectionRequestBody>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateAliasRequestBody.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateAliasRequestBody.");

            if (collections.IsSet && collections.Value == null)
                throw new ArgumentNullException(nameof(collections), "Property is not nullable for class CreateAliasRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateAliasRequestBody.");

            if (routers.IsSet && routers.Value == null)
                throw new ArgumentNullException(nameof(routers), "Property is not nullable for class CreateAliasRequestBody.");

            if (collCreationParameters.IsSet && collCreationParameters.Value == null)
                throw new ArgumentNullException(nameof(collCreationParameters), "Property is not nullable for class CreateAliasRequestBody.");

            return new CreateAliasRequestBody(name.Value!, collections, async, routers, collCreationParameters);
        }

        /// <summary>
        /// Serializes a <see cref="CreateAliasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAliasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateAliasRequestBody createAliasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createAliasRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateAliasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAliasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateAliasRequestBody createAliasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createAliasRequestBody.Name == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody.Name), "Property is required for class CreateAliasRequestBody.");

            if (createAliasRequestBody.CollectionsOption.IsSet && createAliasRequestBody.Collections == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody.Collections), "Property is required for class CreateAliasRequestBody.");

            if (createAliasRequestBody.AsyncOption.IsSet && createAliasRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody.Async), "Property is required for class CreateAliasRequestBody.");

            if (createAliasRequestBody.RoutersOption.IsSet && createAliasRequestBody.Routers == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody.Routers), "Property is required for class CreateAliasRequestBody.");

            if (createAliasRequestBody.CollCreationParametersOption.IsSet && createAliasRequestBody.CollCreationParameters == null)
                throw new ArgumentNullException(nameof(createAliasRequestBody.CollCreationParameters), "Property is required for class CreateAliasRequestBody.");

            writer.WriteString("name", createAliasRequestBody.Name);

            if (createAliasRequestBody.CollectionsOption.IsSet)
            {
                writer.WritePropertyName("collections");
                JsonSerializer.Serialize(writer, createAliasRequestBody.Collections, jsonSerializerOptions);
            }
            if (createAliasRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createAliasRequestBody.Async);

            if (createAliasRequestBody.RoutersOption.IsSet)
            {
                writer.WritePropertyName("routers");
                JsonSerializer.Serialize(writer, createAliasRequestBody.Routers, jsonSerializerOptions);
            }
            if (createAliasRequestBody.CollCreationParametersOption.IsSet)
            {
                writer.WritePropertyName("collCreationParameters");
                JsonSerializer.Serialize(writer, createAliasRequestBody.CollCreationParameters, jsonSerializerOptions);
            }
        }
    }
}
