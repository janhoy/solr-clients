// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateCollectionBackupRequestBody
    /// </summary>
    public partial class CreateCollectionBackupRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionBackupRequestBody" /> class.
        /// </summary>
        /// <param name="location">location</param>
        /// <param name="repository">repository</param>
        /// <param name="followAliases">followAliases</param>
        /// <param name="backupStrategy">backupStrategy</param>
        /// <param name="snapshotName">snapshotName</param>
        /// <param name="incremental">incremental</param>
        /// <param name="backupConfigset">backupConfigset</param>
        /// <param name="maxNumBackupPoints">maxNumBackupPoints</param>
        /// <param name="async">async</param>
        /// <param name="extraProperties">extraProperties</param>
        [JsonConstructor]
        public CreateCollectionBackupRequestBody(Option<string?> location = default, Option<string?> repository = default, Option<bool?> followAliases = default, Option<string?> backupStrategy = default, Option<string?> snapshotName = default, Option<bool?> incremental = default, Option<bool?> backupConfigset = default, Option<int?> maxNumBackupPoints = default, Option<string?> async = default, Option<Dictionary<string, string>?> extraProperties = default)
        {
            LocationOption = location;
            RepositoryOption = repository;
            FollowAliasesOption = followAliases;
            BackupStrategyOption = backupStrategy;
            SnapshotNameOption = snapshotName;
            IncrementalOption = incremental;
            BackupConfigsetOption = backupConfigset;
            MaxNumBackupPointsOption = maxNumBackupPoints;
            AsyncOption = async;
            ExtraPropertiesOption = extraProperties;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [JsonPropertyName("repository")]
        public string? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupStrategy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackupStrategyOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackupStrategy
        /// </summary>
        [JsonPropertyName("backupStrategy")]
        public string? BackupStrategy { get { return this.BackupStrategyOption; } set { this.BackupStrategyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SnapshotName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnapshotNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets SnapshotName
        /// </summary>
        [JsonPropertyName("snapshotName")]
        public string? SnapshotName { get { return this.SnapshotNameOption; } set { this.SnapshotNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Incremental
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncrementalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Incremental
        /// </summary>
        [JsonPropertyName("incremental")]
        public bool? Incremental { get { return this.IncrementalOption; } set { this.IncrementalOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupConfigset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BackupConfigsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackupConfigset
        /// </summary>
        [JsonPropertyName("backupConfigset")]
        public bool? BackupConfigset { get { return this.BackupConfigsetOption; } set { this.BackupConfigsetOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxNumBackupPoints
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxNumBackupPointsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxNumBackupPoints
        /// </summary>
        [JsonPropertyName("maxNumBackupPoints")]
        public int? MaxNumBackupPoints { get { return this.MaxNumBackupPointsOption; } set { this.MaxNumBackupPointsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtraProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ExtraPropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraProperties
        /// </summary>
        [JsonPropertyName("extraProperties")]
        public Dictionary<string, string>? ExtraProperties { get { return this.ExtraPropertiesOption; } set { this.ExtraPropertiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCollectionBackupRequestBody {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  BackupStrategy: ").Append(BackupStrategy).Append("\n");
            sb.Append("  SnapshotName: ").Append(SnapshotName).Append("\n");
            sb.Append("  Incremental: ").Append(Incremental).Append("\n");
            sb.Append("  BackupConfigset: ").Append(BackupConfigset).Append("\n");
            sb.Append("  MaxNumBackupPoints: ").Append(MaxNumBackupPoints).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  ExtraProperties: ").Append(ExtraProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCollectionBackupRequestBody" />
    /// </summary>
    public class CreateCollectionBackupRequestBodyJsonConverter : JsonConverter<CreateCollectionBackupRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCollectionBackupRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCollectionBackupRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> location = default;
            Option<string?> repository = default;
            Option<bool?> followAliases = default;
            Option<string?> backupStrategy = default;
            Option<string?> snapshotName = default;
            Option<bool?> incremental = default;
            Option<bool?> backupConfigset = default;
            Option<int?> maxNumBackupPoints = default;
            Option<string?> async = default;
            Option<Dictionary<string, string>?> extraProperties = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repository":
                            repository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "backupStrategy":
                            backupStrategy = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "snapshotName":
                            snapshotName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "incremental":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                incremental = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "backupConfigset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                backupConfigset = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "maxNumBackupPoints":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxNumBackupPoints = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "extraProperties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                extraProperties = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (backupStrategy.IsSet && backupStrategy.Value == null)
                throw new ArgumentNullException(nameof(backupStrategy), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (snapshotName.IsSet && snapshotName.Value == null)
                throw new ArgumentNullException(nameof(snapshotName), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (incremental.IsSet && incremental.Value == null)
                throw new ArgumentNullException(nameof(incremental), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (backupConfigset.IsSet && backupConfigset.Value == null)
                throw new ArgumentNullException(nameof(backupConfigset), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (maxNumBackupPoints.IsSet && maxNumBackupPoints.Value == null)
                throw new ArgumentNullException(nameof(maxNumBackupPoints), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            if (extraProperties.IsSet && extraProperties.Value == null)
                throw new ArgumentNullException(nameof(extraProperties), "Property is not nullable for class CreateCollectionBackupRequestBody.");

            return new CreateCollectionBackupRequestBody(location, repository, followAliases, backupStrategy, snapshotName, incremental, backupConfigset, maxNumBackupPoints, async, extraProperties);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCollectionBackupRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCollectionBackupRequestBody createCollectionBackupRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCollectionBackupRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCollectionBackupRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionBackupRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCollectionBackupRequestBody createCollectionBackupRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCollectionBackupRequestBody.LocationOption.IsSet && createCollectionBackupRequestBody.Location == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.Location), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.RepositoryOption.IsSet && createCollectionBackupRequestBody.Repository == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.Repository), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.BackupStrategyOption.IsSet && createCollectionBackupRequestBody.BackupStrategy == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.BackupStrategy), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.SnapshotNameOption.IsSet && createCollectionBackupRequestBody.SnapshotName == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.SnapshotName), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.AsyncOption.IsSet && createCollectionBackupRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.Async), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.ExtraPropertiesOption.IsSet && createCollectionBackupRequestBody.ExtraProperties == null)
                throw new ArgumentNullException(nameof(createCollectionBackupRequestBody.ExtraProperties), "Property is required for class CreateCollectionBackupRequestBody.");

            if (createCollectionBackupRequestBody.LocationOption.IsSet)
                writer.WriteString("location", createCollectionBackupRequestBody.Location);

            if (createCollectionBackupRequestBody.RepositoryOption.IsSet)
                writer.WriteString("repository", createCollectionBackupRequestBody.Repository);

            if (createCollectionBackupRequestBody.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", createCollectionBackupRequestBody.FollowAliasesOption.Value!.Value);

            if (createCollectionBackupRequestBody.BackupStrategyOption.IsSet)
                writer.WriteString("backupStrategy", createCollectionBackupRequestBody.BackupStrategy);

            if (createCollectionBackupRequestBody.SnapshotNameOption.IsSet)
                writer.WriteString("snapshotName", createCollectionBackupRequestBody.SnapshotName);

            if (createCollectionBackupRequestBody.IncrementalOption.IsSet)
                writer.WriteBoolean("incremental", createCollectionBackupRequestBody.IncrementalOption.Value!.Value);

            if (createCollectionBackupRequestBody.BackupConfigsetOption.IsSet)
                writer.WriteBoolean("backupConfigset", createCollectionBackupRequestBody.BackupConfigsetOption.Value!.Value);

            if (createCollectionBackupRequestBody.MaxNumBackupPointsOption.IsSet)
                writer.WriteNumber("maxNumBackupPoints", createCollectionBackupRequestBody.MaxNumBackupPointsOption.Value!.Value);

            if (createCollectionBackupRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createCollectionBackupRequestBody.Async);

            if (createCollectionBackupRequestBody.ExtraPropertiesOption.IsSet)
            {
                writer.WritePropertyName("extraProperties");
                JsonSerializer.Serialize(writer, createCollectionBackupRequestBody.ExtraProperties, jsonSerializerOptions);
            }
        }
    }
}
