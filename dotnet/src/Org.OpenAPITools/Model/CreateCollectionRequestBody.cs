// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateCollectionRequestBody
    /// </summary>
    public partial class CreateCollectionRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionRequestBody" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="replicationFactor">replicationFactor</param>
        /// <param name="config">config</param>
        /// <param name="numShards">numShards</param>
        /// <param name="shardNames">shardNames</param>
        /// <param name="pullReplicas">pullReplicas</param>
        /// <param name="tlogReplicas">tlogReplicas</param>
        /// <param name="nrtReplicas">nrtReplicas</param>
        /// <param name="waitForFinalState">waitForFinalState</param>
        /// <param name="perReplicaState">perReplicaState</param>
        /// <param name="alias">alias</param>
        /// <param name="properties">properties</param>
        /// <param name="async">async</param>
        /// <param name="router">router</param>
        /// <param name="nodeSet">nodeSet</param>
        /// <param name="createReplicas">createReplicas</param>
        /// <param name="shuffleNodes">shuffleNodes</param>
        [JsonConstructor]
        public CreateCollectionRequestBody(Option<string?> name = default, Option<int?> replicationFactor = default, Option<string?> config = default, Option<int?> numShards = default, Option<List<string>?> shardNames = default, Option<int?> pullReplicas = default, Option<int?> tlogReplicas = default, Option<int?> nrtReplicas = default, Option<bool?> waitForFinalState = default, Option<bool?> perReplicaState = default, Option<string?> alias = default, Option<Dictionary<string, string>?> properties = default, Option<string?> async = default, Option<CreateCollectionRouterProperties?> router = default, Option<List<string>?> nodeSet = default, Option<bool?> createReplicas = default, Option<bool?> shuffleNodes = default)
        {
            NameOption = name;
            ReplicationFactorOption = replicationFactor;
            ConfigOption = config;
            NumShardsOption = numShards;
            ShardNamesOption = shardNames;
            PullReplicasOption = pullReplicas;
            TlogReplicasOption = tlogReplicas;
            NrtReplicasOption = nrtReplicas;
            WaitForFinalStateOption = waitForFinalState;
            PerReplicaStateOption = perReplicaState;
            AliasOption = alias;
            PropertiesOption = properties;
            AsyncOption = async;
            RouterOption = router;
            NodeSetOption = nodeSet;
            CreateReplicasOption = createReplicas;
            ShuffleNodesOption = shuffleNodes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplicationFactor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReplicationFactorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplicationFactor
        /// </summary>
        [JsonPropertyName("replicationFactor")]
        public int? ReplicationFactor { get { return this.ReplicationFactorOption; } set { this.ReplicationFactorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [JsonPropertyName("config")]
        public string? Config { get { return this.ConfigOption; } set { this.ConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumShards
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumShardsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumShards
        /// </summary>
        [JsonPropertyName("numShards")]
        public int? NumShards { get { return this.NumShardsOption; } set { this.NumShardsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShardNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ShardNamesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShardNames
        /// </summary>
        [JsonPropertyName("shardNames")]
        public List<string>? ShardNames { get { return this.ShardNamesOption; } set { this.ShardNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullReplicas
        /// </summary>
        [JsonPropertyName("pullReplicas")]
        public int? PullReplicas { get { return this.PullReplicasOption; } set { this.PullReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of TlogReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TlogReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets TlogReplicas
        /// </summary>
        [JsonPropertyName("tlogReplicas")]
        public int? TlogReplicas { get { return this.TlogReplicasOption; } set { this.TlogReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of NrtReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NrtReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets NrtReplicas
        /// </summary>
        [JsonPropertyName("nrtReplicas")]
        public int? NrtReplicas { get { return this.NrtReplicasOption; } set { this.NrtReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets WaitForFinalState
        /// </summary>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerReplicaState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PerReplicaStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PerReplicaState
        /// </summary>
        [JsonPropertyName("perReplicaState")]
        public bool? PerReplicaState { get { return this.PerReplicaStateOption; } set { this.PerReplicaStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Alias
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AliasOption { get; private set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [JsonPropertyName("alias")]
        public string? Alias { get { return this.AliasOption; } set { this.AliasOption = new(value); } }

        /// <summary>
        /// Used to track the state of Properties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> PropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [JsonPropertyName("properties")]
        public Dictionary<string, string>? Properties { get { return this.PropertiesOption; } set { this.PropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of Router
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateCollectionRouterProperties?> RouterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Router
        /// </summary>
        [JsonPropertyName("router")]
        public CreateCollectionRouterProperties? Router { get { return this.RouterOption; } set { this.RouterOption = new(value); } }

        /// <summary>
        /// Used to track the state of NodeSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NodeSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets NodeSet
        /// </summary>
        [JsonPropertyName("nodeSet")]
        public List<string>? NodeSet { get { return this.NodeSetOption; } set { this.NodeSetOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CreateReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateReplicas
        /// </summary>
        [JsonPropertyName("createReplicas")]
        public bool? CreateReplicas { get { return this.CreateReplicasOption; } set { this.CreateReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShuffleNodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShuffleNodesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShuffleNodes
        /// </summary>
        [JsonPropertyName("shuffleNodes")]
        public bool? ShuffleNodes { get { return this.ShuffleNodesOption; } set { this.ShuffleNodesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCollectionRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplicationFactor: ").Append(ReplicationFactor).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  NumShards: ").Append(NumShards).Append("\n");
            sb.Append("  ShardNames: ").Append(ShardNames).Append("\n");
            sb.Append("  PullReplicas: ").Append(PullReplicas).Append("\n");
            sb.Append("  TlogReplicas: ").Append(TlogReplicas).Append("\n");
            sb.Append("  NrtReplicas: ").Append(NrtReplicas).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  PerReplicaState: ").Append(PerReplicaState).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Router: ").Append(Router).Append("\n");
            sb.Append("  NodeSet: ").Append(NodeSet).Append("\n");
            sb.Append("  CreateReplicas: ").Append(CreateReplicas).Append("\n");
            sb.Append("  ShuffleNodes: ").Append(ShuffleNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCollectionRequestBody" />
    /// </summary>
    public class CreateCollectionRequestBodyJsonConverter : JsonConverter<CreateCollectionRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCollectionRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCollectionRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<int?> replicationFactor = default;
            Option<string?> config = default;
            Option<int?> numShards = default;
            Option<List<string>?> shardNames = default;
            Option<int?> pullReplicas = default;
            Option<int?> tlogReplicas = default;
            Option<int?> nrtReplicas = default;
            Option<bool?> waitForFinalState = default;
            Option<bool?> perReplicaState = default;
            Option<string?> alias = default;
            Option<Dictionary<string, string>?> properties = default;
            Option<string?> async = default;
            Option<CreateCollectionRouterProperties?> router = default;
            Option<List<string>?> nodeSet = default;
            Option<bool?> createReplicas = default;
            Option<bool?> shuffleNodes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "replicationFactor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                replicationFactor = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "config":
                            config = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "numShards":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numShards = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "shardNames":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shardNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pullReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pullReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tlogReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tlogReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "nrtReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nrtReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "perReplicaState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                perReplicaState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "alias":
                            alias = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "properties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                properties = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "router":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                router = new Option<CreateCollectionRouterProperties?>(JsonSerializer.Deserialize<CreateCollectionRouterProperties>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nodeSet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nodeSet = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createReplicas = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "shuffleNodes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                shuffleNodes = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateCollectionRequestBody.");

            if (replicationFactor.IsSet && replicationFactor.Value == null)
                throw new ArgumentNullException(nameof(replicationFactor), "Property is not nullable for class CreateCollectionRequestBody.");

            if (config.IsSet && config.Value == null)
                throw new ArgumentNullException(nameof(config), "Property is not nullable for class CreateCollectionRequestBody.");

            if (numShards.IsSet && numShards.Value == null)
                throw new ArgumentNullException(nameof(numShards), "Property is not nullable for class CreateCollectionRequestBody.");

            if (shardNames.IsSet && shardNames.Value == null)
                throw new ArgumentNullException(nameof(shardNames), "Property is not nullable for class CreateCollectionRequestBody.");

            if (pullReplicas.IsSet && pullReplicas.Value == null)
                throw new ArgumentNullException(nameof(pullReplicas), "Property is not nullable for class CreateCollectionRequestBody.");

            if (tlogReplicas.IsSet && tlogReplicas.Value == null)
                throw new ArgumentNullException(nameof(tlogReplicas), "Property is not nullable for class CreateCollectionRequestBody.");

            if (nrtReplicas.IsSet && nrtReplicas.Value == null)
                throw new ArgumentNullException(nameof(nrtReplicas), "Property is not nullable for class CreateCollectionRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class CreateCollectionRequestBody.");

            if (perReplicaState.IsSet && perReplicaState.Value == null)
                throw new ArgumentNullException(nameof(perReplicaState), "Property is not nullable for class CreateCollectionRequestBody.");

            if (alias.IsSet && alias.Value == null)
                throw new ArgumentNullException(nameof(alias), "Property is not nullable for class CreateCollectionRequestBody.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class CreateCollectionRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateCollectionRequestBody.");

            if (router.IsSet && router.Value == null)
                throw new ArgumentNullException(nameof(router), "Property is not nullable for class CreateCollectionRequestBody.");

            if (nodeSet.IsSet && nodeSet.Value == null)
                throw new ArgumentNullException(nameof(nodeSet), "Property is not nullable for class CreateCollectionRequestBody.");

            if (createReplicas.IsSet && createReplicas.Value == null)
                throw new ArgumentNullException(nameof(createReplicas), "Property is not nullable for class CreateCollectionRequestBody.");

            if (shuffleNodes.IsSet && shuffleNodes.Value == null)
                throw new ArgumentNullException(nameof(shuffleNodes), "Property is not nullable for class CreateCollectionRequestBody.");

            return new CreateCollectionRequestBody(name, replicationFactor, config, numShards, shardNames, pullReplicas, tlogReplicas, nrtReplicas, waitForFinalState, perReplicaState, alias, properties, async, router, nodeSet, createReplicas, shuffleNodes);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCollectionRequestBody createCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCollectionRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCollectionRequestBody createCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCollectionRequestBody.NameOption.IsSet && createCollectionRequestBody.Name == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Name), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.ConfigOption.IsSet && createCollectionRequestBody.Config == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Config), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.ShardNamesOption.IsSet && createCollectionRequestBody.ShardNames == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.ShardNames), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.AliasOption.IsSet && createCollectionRequestBody.Alias == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Alias), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.PropertiesOption.IsSet && createCollectionRequestBody.Properties == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Properties), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.AsyncOption.IsSet && createCollectionRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Async), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.RouterOption.IsSet && createCollectionRequestBody.Router == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.Router), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.NodeSetOption.IsSet && createCollectionRequestBody.NodeSet == null)
                throw new ArgumentNullException(nameof(createCollectionRequestBody.NodeSet), "Property is required for class CreateCollectionRequestBody.");

            if (createCollectionRequestBody.NameOption.IsSet)
                writer.WriteString("name", createCollectionRequestBody.Name);

            if (createCollectionRequestBody.ReplicationFactorOption.IsSet)
                writer.WriteNumber("replicationFactor", createCollectionRequestBody.ReplicationFactorOption.Value!.Value);

            if (createCollectionRequestBody.ConfigOption.IsSet)
                writer.WriteString("config", createCollectionRequestBody.Config);

            if (createCollectionRequestBody.NumShardsOption.IsSet)
                writer.WriteNumber("numShards", createCollectionRequestBody.NumShardsOption.Value!.Value);

            if (createCollectionRequestBody.ShardNamesOption.IsSet)
            {
                writer.WritePropertyName("shardNames");
                JsonSerializer.Serialize(writer, createCollectionRequestBody.ShardNames, jsonSerializerOptions);
            }
            if (createCollectionRequestBody.PullReplicasOption.IsSet)
                writer.WriteNumber("pullReplicas", createCollectionRequestBody.PullReplicasOption.Value!.Value);

            if (createCollectionRequestBody.TlogReplicasOption.IsSet)
                writer.WriteNumber("tlogReplicas", createCollectionRequestBody.TlogReplicasOption.Value!.Value);

            if (createCollectionRequestBody.NrtReplicasOption.IsSet)
                writer.WriteNumber("nrtReplicas", createCollectionRequestBody.NrtReplicasOption.Value!.Value);

            if (createCollectionRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", createCollectionRequestBody.WaitForFinalStateOption.Value!.Value);

            if (createCollectionRequestBody.PerReplicaStateOption.IsSet)
                writer.WriteBoolean("perReplicaState", createCollectionRequestBody.PerReplicaStateOption.Value!.Value);

            if (createCollectionRequestBody.AliasOption.IsSet)
                writer.WriteString("alias", createCollectionRequestBody.Alias);

            if (createCollectionRequestBody.PropertiesOption.IsSet)
            {
                writer.WritePropertyName("properties");
                JsonSerializer.Serialize(writer, createCollectionRequestBody.Properties, jsonSerializerOptions);
            }
            if (createCollectionRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createCollectionRequestBody.Async);

            if (createCollectionRequestBody.RouterOption.IsSet)
            {
                writer.WritePropertyName("router");
                JsonSerializer.Serialize(writer, createCollectionRequestBody.Router, jsonSerializerOptions);
            }
            if (createCollectionRequestBody.NodeSetOption.IsSet)
            {
                writer.WritePropertyName("nodeSet");
                JsonSerializer.Serialize(writer, createCollectionRequestBody.NodeSet, jsonSerializerOptions);
            }
            if (createCollectionRequestBody.CreateReplicasOption.IsSet)
                writer.WriteBoolean("createReplicas", createCollectionRequestBody.CreateReplicasOption.Value!.Value);

            if (createCollectionRequestBody.ShuffleNodesOption.IsSet)
                writer.WriteBoolean("shuffleNodes", createCollectionRequestBody.ShuffleNodesOption.Value!.Value);
        }
    }
}
