// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateCollectionSnapshotRequestBody
    /// </summary>
    public partial class CreateCollectionSnapshotRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionSnapshotRequestBody" /> class.
        /// </summary>
        /// <param name="async">async</param>
        /// <param name="followAliases">followAliases</param>
        [JsonConstructor]
        public CreateCollectionSnapshotRequestBody(Option<string?> async = default, Option<bool?> followAliases = default)
        {
            AsyncOption = async;
            FollowAliasesOption = followAliases;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCollectionSnapshotRequestBody {\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCollectionSnapshotRequestBody" />
    /// </summary>
    public class CreateCollectionSnapshotRequestBodyJsonConverter : JsonConverter<CreateCollectionSnapshotRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCollectionSnapshotRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCollectionSnapshotRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> async = default;
            Option<bool?> followAliases = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateCollectionSnapshotRequestBody.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class CreateCollectionSnapshotRequestBody.");

            return new CreateCollectionSnapshotRequestBody(async, followAliases);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCollectionSnapshotRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCollectionSnapshotRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCollectionSnapshotRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCollectionSnapshotRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCollectionSnapshotRequestBody createCollectionSnapshotRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCollectionSnapshotRequestBody.AsyncOption.IsSet && createCollectionSnapshotRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createCollectionSnapshotRequestBody.Async), "Property is required for class CreateCollectionSnapshotRequestBody.");

            if (createCollectionSnapshotRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createCollectionSnapshotRequestBody.Async);

            if (createCollectionSnapshotRequestBody.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", createCollectionSnapshotRequestBody.FollowAliasesOption.Value!.Value);
        }
    }
}
