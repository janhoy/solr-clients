// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional backup params
    /// </summary>
    public partial class CreateCoreBackupRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCoreBackupRequestBody" /> class.
        /// </summary>
        /// <param name="repository">The name of the repository to be used for backup.</param>
        /// <param name="location">The path where the backup will be created</param>
        /// <param name="shardBackupId">shardBackupId</param>
        /// <param name="prevShardBackupId">prevShardBackupId</param>
        /// <param name="commitName">The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.</param>
        /// <param name="incremental">To turn on incremental backup feature</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously.</param>
        /// <param name="backupName">A descriptive name for the backup.  Only used by non-incremental backups.</param>
        [JsonConstructor]
        public CreateCoreBackupRequestBody(Option<string?> repository = default, Option<string?> location = default, Option<string?> shardBackupId = default, Option<string?> prevShardBackupId = default, Option<string?> commitName = default, Option<bool?> incremental = default, Option<string?> async = default, Option<string?> backupName = default)
        {
            RepositoryOption = repository;
            LocationOption = location;
            ShardBackupIdOption = shardBackupId;
            PrevShardBackupIdOption = prevShardBackupId;
            CommitNameOption = commitName;
            IncrementalOption = incremental;
            AsyncOption = async;
            BackupNameOption = backupName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryOption { get; private set; }

        /// <summary>
        /// The name of the repository to be used for backup.
        /// </summary>
        /// <value>The name of the repository to be used for backup.</value>
        [JsonPropertyName("repository")]
        public string? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// The path where the backup will be created
        /// </summary>
        /// <value>The path where the backup will be created</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShardBackupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShardBackupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShardBackupId
        /// </summary>
        [JsonPropertyName("shardBackupId")]
        public string? ShardBackupId { get { return this.ShardBackupIdOption; } set { this.ShardBackupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrevShardBackupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrevShardBackupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrevShardBackupId
        /// </summary>
        [JsonPropertyName("prevShardBackupId")]
        public string? PrevShardBackupId { get { return this.PrevShardBackupIdOption; } set { this.PrevShardBackupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitNameOption { get; private set; }

        /// <summary>
        /// The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.
        /// </summary>
        /// <value>The name of the commit which was used while taking a snapshot using the CREATESNAPSHOT command.</value>
        [JsonPropertyName("commitName")]
        public string? CommitName { get { return this.CommitNameOption; } set { this.CommitNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Incremental
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncrementalOption { get; private set; }

        /// <summary>
        /// To turn on incremental backup feature
        /// </summary>
        /// <value>To turn on incremental backup feature</value>
        [JsonPropertyName("incremental")]
        public bool? Incremental { get { return this.IncrementalOption; } set { this.IncrementalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackupNameOption { get; private set; }

        /// <summary>
        /// A descriptive name for the backup.  Only used by non-incremental backups.
        /// </summary>
        /// <value>A descriptive name for the backup.  Only used by non-incremental backups.</value>
        [JsonPropertyName("backupName")]
        public string? BackupName { get { return this.BackupNameOption; } set { this.BackupNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCoreBackupRequestBody {\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ShardBackupId: ").Append(ShardBackupId).Append("\n");
            sb.Append("  PrevShardBackupId: ").Append(PrevShardBackupId).Append("\n");
            sb.Append("  CommitName: ").Append(CommitName).Append("\n");
            sb.Append("  Incremental: ").Append(Incremental).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  BackupName: ").Append(BackupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCoreBackupRequestBody" />
    /// </summary>
    public class CreateCoreBackupRequestBodyJsonConverter : JsonConverter<CreateCoreBackupRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCoreBackupRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCoreBackupRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> repository = default;
            Option<string?> location = default;
            Option<string?> shardBackupId = default;
            Option<string?> prevShardBackupId = default;
            Option<string?> commitName = default;
            Option<bool?> incremental = default;
            Option<string?> async = default;
            Option<string?> backupName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "repository":
                            repository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shardBackupId":
                            shardBackupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prevShardBackupId":
                            prevShardBackupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "commitName":
                            commitName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "incremental":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                incremental = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "backupName":
                            backupName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (shardBackupId.IsSet && shardBackupId.Value == null)
                throw new ArgumentNullException(nameof(shardBackupId), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (prevShardBackupId.IsSet && prevShardBackupId.Value == null)
                throw new ArgumentNullException(nameof(prevShardBackupId), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (commitName.IsSet && commitName.Value == null)
                throw new ArgumentNullException(nameof(commitName), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (incremental.IsSet && incremental.Value == null)
                throw new ArgumentNullException(nameof(incremental), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateCoreBackupRequestBody.");

            if (backupName.IsSet && backupName.Value == null)
                throw new ArgumentNullException(nameof(backupName), "Property is not nullable for class CreateCoreBackupRequestBody.");

            return new CreateCoreBackupRequestBody(repository, location, shardBackupId, prevShardBackupId, commitName, incremental, async, backupName);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCoreBackupRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCoreBackupRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCoreBackupRequestBody createCoreBackupRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCoreBackupRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCoreBackupRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCoreBackupRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCoreBackupRequestBody createCoreBackupRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCoreBackupRequestBody.RepositoryOption.IsSet && createCoreBackupRequestBody.Repository == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.Repository), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.LocationOption.IsSet && createCoreBackupRequestBody.Location == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.Location), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.ShardBackupIdOption.IsSet && createCoreBackupRequestBody.ShardBackupId == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.ShardBackupId), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.PrevShardBackupIdOption.IsSet && createCoreBackupRequestBody.PrevShardBackupId == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.PrevShardBackupId), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.CommitNameOption.IsSet && createCoreBackupRequestBody.CommitName == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.CommitName), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.AsyncOption.IsSet && createCoreBackupRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.Async), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.BackupNameOption.IsSet && createCoreBackupRequestBody.BackupName == null)
                throw new ArgumentNullException(nameof(createCoreBackupRequestBody.BackupName), "Property is required for class CreateCoreBackupRequestBody.");

            if (createCoreBackupRequestBody.RepositoryOption.IsSet)
                writer.WriteString("repository", createCoreBackupRequestBody.Repository);

            if (createCoreBackupRequestBody.LocationOption.IsSet)
                writer.WriteString("location", createCoreBackupRequestBody.Location);

            if (createCoreBackupRequestBody.ShardBackupIdOption.IsSet)
                writer.WriteString("shardBackupId", createCoreBackupRequestBody.ShardBackupId);

            if (createCoreBackupRequestBody.PrevShardBackupIdOption.IsSet)
                writer.WriteString("prevShardBackupId", createCoreBackupRequestBody.PrevShardBackupId);

            if (createCoreBackupRequestBody.CommitNameOption.IsSet)
                writer.WriteString("commitName", createCoreBackupRequestBody.CommitName);

            if (createCoreBackupRequestBody.IncrementalOption.IsSet)
                writer.WriteBoolean("incremental", createCoreBackupRequestBody.IncrementalOption.Value!.Value);

            if (createCoreBackupRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createCoreBackupRequestBody.Async);

            if (createCoreBackupRequestBody.BackupNameOption.IsSet)
                writer.WriteString("backupName", createCoreBackupRequestBody.BackupName);
        }
    }
}
