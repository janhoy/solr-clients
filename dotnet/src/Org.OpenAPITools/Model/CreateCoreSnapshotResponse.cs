// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateCoreSnapshotResponse
    /// </summary>
    public partial class CreateCoreSnapshotResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCoreSnapshotResponse" /> class.
        /// </summary>
        /// <param name="core">The name of the core.</param>
        /// <param name="indexDirPath">The path to the directory containing the index files.</param>
        /// <param name="generation">The generation value for the created snapshot.</param>
        /// <param name="files">The list of index filenames contained within the created snapshot.</param>
        /// <param name="responseHeader">responseHeader</param>
        /// <param name="error">error</param>
        /// <param name="commitName">The name of the created snapshot.</param>
        [JsonConstructor]
        public CreateCoreSnapshotResponse(Option<string?> core = default, Option<string?> indexDirPath = default, Option<long?> generation = default, Option<List<string>?> files = default, Option<ResponseHeader?> responseHeader = default, Option<ErrorInfo?> error = default, Option<string?> commitName = default)
        {
            CoreOption = core;
            IndexDirPathOption = indexDirPath;
            GenerationOption = generation;
            FilesOption = files;
            ResponseHeaderOption = responseHeader;
            ErrorOption = error;
            CommitNameOption = commitName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Core
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CoreOption { get; private set; }

        /// <summary>
        /// The name of the core.
        /// </summary>
        /// <value>The name of the core.</value>
        [JsonPropertyName("core")]
        public string? Core { get { return this.CoreOption; } set { this.CoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndexDirPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexDirPathOption { get; private set; }

        /// <summary>
        /// The path to the directory containing the index files.
        /// </summary>
        /// <value>The path to the directory containing the index files.</value>
        [JsonPropertyName("indexDirPath")]
        public string? IndexDirPath { get { return this.IndexDirPathOption; } set { this.IndexDirPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Generation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GenerationOption { get; private set; }

        /// <summary>
        /// The generation value for the created snapshot.
        /// </summary>
        /// <value>The generation value for the created snapshot.</value>
        [JsonPropertyName("generation")]
        public long? Generation { get { return this.GenerationOption; } set { this.GenerationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Files
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FilesOption { get; private set; }

        /// <summary>
        /// The list of index filenames contained within the created snapshot.
        /// </summary>
        /// <value>The list of index filenames contained within the created snapshot.</value>
        [JsonPropertyName("files")]
        public List<string>? Files { get { return this.FilesOption; } set { this.FilesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResponseHeader?> ResponseHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [JsonPropertyName("responseHeader")]
        public ResponseHeader? ResponseHeader { get { return this.ResponseHeaderOption; } set { this.ResponseHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrorInfo?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public ErrorInfo? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitNameOption { get; private set; }

        /// <summary>
        /// The name of the created snapshot.
        /// </summary>
        /// <value>The name of the created snapshot.</value>
        [JsonPropertyName("commitName")]
        public string? CommitName { get { return this.CommitNameOption; } set { this.CommitNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCoreSnapshotResponse {\n");
            sb.Append("  Core: ").Append(Core).Append("\n");
            sb.Append("  IndexDirPath: ").Append(IndexDirPath).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  CommitName: ").Append(CommitName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateCoreSnapshotResponse" />
    /// </summary>
    public class CreateCoreSnapshotResponseJsonConverter : JsonConverter<CreateCoreSnapshotResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateCoreSnapshotResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCoreSnapshotResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> core = default;
            Option<string?> indexDirPath = default;
            Option<long?> generation = default;
            Option<List<string>?> files = default;
            Option<ResponseHeader?> responseHeader = default;
            Option<ErrorInfo?> error = default;
            Option<string?> commitName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "core":
                            core = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "indexDirPath":
                            indexDirPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "generation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                generation = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "files":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                files = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "responseHeader":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responseHeader = new Option<ResponseHeader?>(JsonSerializer.Deserialize<ResponseHeader>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<ErrorInfo?>(JsonSerializer.Deserialize<ErrorInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "commitName":
                            commitName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (core.IsSet && core.Value == null)
                throw new ArgumentNullException(nameof(core), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (indexDirPath.IsSet && indexDirPath.Value == null)
                throw new ArgumentNullException(nameof(indexDirPath), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (generation.IsSet && generation.Value == null)
                throw new ArgumentNullException(nameof(generation), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (responseHeader.IsSet && responseHeader.Value == null)
                throw new ArgumentNullException(nameof(responseHeader), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class CreateCoreSnapshotResponse.");

            if (commitName.IsSet && commitName.Value == null)
                throw new ArgumentNullException(nameof(commitName), "Property is not nullable for class CreateCoreSnapshotResponse.");

            return new CreateCoreSnapshotResponse(core, indexDirPath, generation, files, responseHeader, error, commitName);
        }

        /// <summary>
        /// Serializes a <see cref="CreateCoreSnapshotResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCoreSnapshotResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateCoreSnapshotResponse createCoreSnapshotResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCoreSnapshotResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateCoreSnapshotResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createCoreSnapshotResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateCoreSnapshotResponse createCoreSnapshotResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCoreSnapshotResponse.CoreOption.IsSet && createCoreSnapshotResponse.Core == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.Core), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.IndexDirPathOption.IsSet && createCoreSnapshotResponse.IndexDirPath == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.IndexDirPath), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.FilesOption.IsSet && createCoreSnapshotResponse.Files == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.Files), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.ResponseHeaderOption.IsSet && createCoreSnapshotResponse.ResponseHeader == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.ResponseHeader), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.ErrorOption.IsSet && createCoreSnapshotResponse.Error == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.Error), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.CommitNameOption.IsSet && createCoreSnapshotResponse.CommitName == null)
                throw new ArgumentNullException(nameof(createCoreSnapshotResponse.CommitName), "Property is required for class CreateCoreSnapshotResponse.");

            if (createCoreSnapshotResponse.CoreOption.IsSet)
                writer.WriteString("core", createCoreSnapshotResponse.Core);

            if (createCoreSnapshotResponse.IndexDirPathOption.IsSet)
                writer.WriteString("indexDirPath", createCoreSnapshotResponse.IndexDirPath);

            if (createCoreSnapshotResponse.GenerationOption.IsSet)
                writer.WriteNumber("generation", createCoreSnapshotResponse.GenerationOption.Value!.Value);

            if (createCoreSnapshotResponse.FilesOption.IsSet)
            {
                writer.WritePropertyName("files");
                JsonSerializer.Serialize(writer, createCoreSnapshotResponse.Files, jsonSerializerOptions);
            }
            if (createCoreSnapshotResponse.ResponseHeaderOption.IsSet)
            {
                writer.WritePropertyName("responseHeader");
                JsonSerializer.Serialize(writer, createCoreSnapshotResponse.ResponseHeader, jsonSerializerOptions);
            }
            if (createCoreSnapshotResponse.ErrorOption.IsSet)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, createCoreSnapshotResponse.Error, jsonSerializerOptions);
            }
            if (createCoreSnapshotResponse.CommitNameOption.IsSet)
                writer.WriteString("commitName", createCoreSnapshotResponse.CommitName);
        }
    }
}
