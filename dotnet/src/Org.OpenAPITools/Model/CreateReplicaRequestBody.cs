// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateReplicaRequestBody
    /// </summary>
    public partial class CreateReplicaRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReplicaRequestBody" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        /// <param name="instanceDir">instanceDir</param>
        /// <param name="dataDir">dataDir</param>
        /// <param name="ulogDir">ulogDir</param>
        /// <param name="route">route</param>
        /// <param name="nrtReplicas">nrtReplicas</param>
        /// <param name="tlogReplicas">tlogReplicas</param>
        /// <param name="pullReplicas">pullReplicas</param>
        /// <param name="waitForFinalState">waitForFinalState</param>
        /// <param name="followAliases">followAliases</param>
        /// <param name="async">async</param>
        /// <param name="node">node</param>
        /// <param name="skipNodeAssignment">skipNodeAssignment</param>
        /// <param name="properties">properties</param>
        /// <param name="nodeSet">nodeSet</param>
        [JsonConstructor]
        public CreateReplicaRequestBody(Option<string?> name = default, Option<string?> type = default, Option<string?> instanceDir = default, Option<string?> dataDir = default, Option<string?> ulogDir = default, Option<string?> route = default, Option<int?> nrtReplicas = default, Option<int?> tlogReplicas = default, Option<int?> pullReplicas = default, Option<bool?> waitForFinalState = default, Option<bool?> followAliases = default, Option<string?> async = default, Option<string?> node = default, Option<bool?> skipNodeAssignment = default, Option<Dictionary<string, string>?> properties = default, Option<List<string>?> nodeSet = default)
        {
            NameOption = name;
            TypeOption = type;
            InstanceDirOption = instanceDir;
            DataDirOption = dataDir;
            UlogDirOption = ulogDir;
            RouteOption = route;
            NrtReplicasOption = nrtReplicas;
            TlogReplicasOption = tlogReplicas;
            PullReplicasOption = pullReplicas;
            WaitForFinalStateOption = waitForFinalState;
            FollowAliasesOption = followAliases;
            AsyncOption = async;
            NodeOption = node;
            SkipNodeAssignmentOption = skipNodeAssignment;
            PropertiesOption = properties;
            NodeSetOption = nodeSet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of InstanceDir
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InstanceDirOption { get; private set; }

        /// <summary>
        /// Gets or Sets InstanceDir
        /// </summary>
        [JsonPropertyName("instanceDir")]
        public string? InstanceDir { get { return this.InstanceDirOption; } set { this.InstanceDirOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataDir
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataDirOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataDir
        /// </summary>
        [JsonPropertyName("dataDir")]
        public string? DataDir { get { return this.DataDirOption; } set { this.DataDirOption = new(value); } }

        /// <summary>
        /// Used to track the state of UlogDir
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UlogDirOption { get; private set; }

        /// <summary>
        /// Gets or Sets UlogDir
        /// </summary>
        [JsonPropertyName("ulogDir")]
        public string? UlogDir { get { return this.UlogDirOption; } set { this.UlogDirOption = new(value); } }

        /// <summary>
        /// Used to track the state of Route
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RouteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [JsonPropertyName("route")]
        public string? Route { get { return this.RouteOption; } set { this.RouteOption = new(value); } }

        /// <summary>
        /// Used to track the state of NrtReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NrtReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets NrtReplicas
        /// </summary>
        [JsonPropertyName("nrtReplicas")]
        public int? NrtReplicas { get { return this.NrtReplicasOption; } set { this.NrtReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of TlogReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TlogReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets TlogReplicas
        /// </summary>
        [JsonPropertyName("tlogReplicas")]
        public int? TlogReplicas { get { return this.TlogReplicasOption; } set { this.TlogReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullReplicas
        /// </summary>
        [JsonPropertyName("pullReplicas")]
        public int? PullReplicas { get { return this.PullReplicasOption; } set { this.PullReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets WaitForFinalState
        /// </summary>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of Node
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [JsonPropertyName("node")]
        public string? Node { get { return this.NodeOption; } set { this.NodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SkipNodeAssignment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SkipNodeAssignmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets SkipNodeAssignment
        /// </summary>
        [JsonPropertyName("skipNodeAssignment")]
        public bool? SkipNodeAssignment { get { return this.SkipNodeAssignmentOption; } set { this.SkipNodeAssignmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Properties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> PropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [JsonPropertyName("properties")]
        public Dictionary<string, string>? Properties { get { return this.PropertiesOption; } set { this.PropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NodeSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NodeSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets NodeSet
        /// </summary>
        [JsonPropertyName("nodeSet")]
        public List<string>? NodeSet { get { return this.NodeSetOption; } set { this.NodeSetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateReplicaRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InstanceDir: ").Append(InstanceDir).Append("\n");
            sb.Append("  DataDir: ").Append(DataDir).Append("\n");
            sb.Append("  UlogDir: ").Append(UlogDir).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  NrtReplicas: ").Append(NrtReplicas).Append("\n");
            sb.Append("  TlogReplicas: ").Append(TlogReplicas).Append("\n");
            sb.Append("  PullReplicas: ").Append(PullReplicas).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  SkipNodeAssignment: ").Append(SkipNodeAssignment).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  NodeSet: ").Append(NodeSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateReplicaRequestBody" />
    /// </summary>
    public class CreateReplicaRequestBodyJsonConverter : JsonConverter<CreateReplicaRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateReplicaRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateReplicaRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> type = default;
            Option<string?> instanceDir = default;
            Option<string?> dataDir = default;
            Option<string?> ulogDir = default;
            Option<string?> route = default;
            Option<int?> nrtReplicas = default;
            Option<int?> tlogReplicas = default;
            Option<int?> pullReplicas = default;
            Option<bool?> waitForFinalState = default;
            Option<bool?> followAliases = default;
            Option<string?> async = default;
            Option<string?> node = default;
            Option<bool?> skipNodeAssignment = default;
            Option<Dictionary<string, string>?> properties = default;
            Option<List<string>?> nodeSet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "instanceDir":
                            instanceDir = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dataDir":
                            dataDir = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ulogDir":
                            ulogDir = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "route":
                            route = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nrtReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nrtReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tlogReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tlogReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "pullReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pullReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "node":
                            node = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "skipNodeAssignment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                skipNodeAssignment = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "properties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                properties = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nodeSet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nodeSet = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateReplicaRequestBody.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateReplicaRequestBody.");

            if (instanceDir.IsSet && instanceDir.Value == null)
                throw new ArgumentNullException(nameof(instanceDir), "Property is not nullable for class CreateReplicaRequestBody.");

            if (dataDir.IsSet && dataDir.Value == null)
                throw new ArgumentNullException(nameof(dataDir), "Property is not nullable for class CreateReplicaRequestBody.");

            if (ulogDir.IsSet && ulogDir.Value == null)
                throw new ArgumentNullException(nameof(ulogDir), "Property is not nullable for class CreateReplicaRequestBody.");

            if (route.IsSet && route.Value == null)
                throw new ArgumentNullException(nameof(route), "Property is not nullable for class CreateReplicaRequestBody.");

            if (nrtReplicas.IsSet && nrtReplicas.Value == null)
                throw new ArgumentNullException(nameof(nrtReplicas), "Property is not nullable for class CreateReplicaRequestBody.");

            if (tlogReplicas.IsSet && tlogReplicas.Value == null)
                throw new ArgumentNullException(nameof(tlogReplicas), "Property is not nullable for class CreateReplicaRequestBody.");

            if (pullReplicas.IsSet && pullReplicas.Value == null)
                throw new ArgumentNullException(nameof(pullReplicas), "Property is not nullable for class CreateReplicaRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class CreateReplicaRequestBody.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class CreateReplicaRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateReplicaRequestBody.");

            if (node.IsSet && node.Value == null)
                throw new ArgumentNullException(nameof(node), "Property is not nullable for class CreateReplicaRequestBody.");

            if (skipNodeAssignment.IsSet && skipNodeAssignment.Value == null)
                throw new ArgumentNullException(nameof(skipNodeAssignment), "Property is not nullable for class CreateReplicaRequestBody.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class CreateReplicaRequestBody.");

            if (nodeSet.IsSet && nodeSet.Value == null)
                throw new ArgumentNullException(nameof(nodeSet), "Property is not nullable for class CreateReplicaRequestBody.");

            return new CreateReplicaRequestBody(name, type, instanceDir, dataDir, ulogDir, route, nrtReplicas, tlogReplicas, pullReplicas, waitForFinalState, followAliases, async, node, skipNodeAssignment, properties, nodeSet);
        }

        /// <summary>
        /// Serializes a <see cref="CreateReplicaRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createReplicaRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateReplicaRequestBody createReplicaRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createReplicaRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateReplicaRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createReplicaRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateReplicaRequestBody createReplicaRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createReplicaRequestBody.NameOption.IsSet && createReplicaRequestBody.Name == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Name), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.TypeOption.IsSet && createReplicaRequestBody.Type == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Type), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.InstanceDirOption.IsSet && createReplicaRequestBody.InstanceDir == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.InstanceDir), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.DataDirOption.IsSet && createReplicaRequestBody.DataDir == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.DataDir), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.UlogDirOption.IsSet && createReplicaRequestBody.UlogDir == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.UlogDir), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.RouteOption.IsSet && createReplicaRequestBody.Route == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Route), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.AsyncOption.IsSet && createReplicaRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Async), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.NodeOption.IsSet && createReplicaRequestBody.Node == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Node), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.PropertiesOption.IsSet && createReplicaRequestBody.Properties == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.Properties), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.NodeSetOption.IsSet && createReplicaRequestBody.NodeSet == null)
                throw new ArgumentNullException(nameof(createReplicaRequestBody.NodeSet), "Property is required for class CreateReplicaRequestBody.");

            if (createReplicaRequestBody.NameOption.IsSet)
                writer.WriteString("name", createReplicaRequestBody.Name);

            if (createReplicaRequestBody.TypeOption.IsSet)
                writer.WriteString("type", createReplicaRequestBody.Type);

            if (createReplicaRequestBody.InstanceDirOption.IsSet)
                writer.WriteString("instanceDir", createReplicaRequestBody.InstanceDir);

            if (createReplicaRequestBody.DataDirOption.IsSet)
                writer.WriteString("dataDir", createReplicaRequestBody.DataDir);

            if (createReplicaRequestBody.UlogDirOption.IsSet)
                writer.WriteString("ulogDir", createReplicaRequestBody.UlogDir);

            if (createReplicaRequestBody.RouteOption.IsSet)
                writer.WriteString("route", createReplicaRequestBody.Route);

            if (createReplicaRequestBody.NrtReplicasOption.IsSet)
                writer.WriteNumber("nrtReplicas", createReplicaRequestBody.NrtReplicasOption.Value!.Value);

            if (createReplicaRequestBody.TlogReplicasOption.IsSet)
                writer.WriteNumber("tlogReplicas", createReplicaRequestBody.TlogReplicasOption.Value!.Value);

            if (createReplicaRequestBody.PullReplicasOption.IsSet)
                writer.WriteNumber("pullReplicas", createReplicaRequestBody.PullReplicasOption.Value!.Value);

            if (createReplicaRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", createReplicaRequestBody.WaitForFinalStateOption.Value!.Value);

            if (createReplicaRequestBody.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", createReplicaRequestBody.FollowAliasesOption.Value!.Value);

            if (createReplicaRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createReplicaRequestBody.Async);

            if (createReplicaRequestBody.NodeOption.IsSet)
                writer.WriteString("node", createReplicaRequestBody.Node);

            if (createReplicaRequestBody.SkipNodeAssignmentOption.IsSet)
                writer.WriteBoolean("skipNodeAssignment", createReplicaRequestBody.SkipNodeAssignmentOption.Value!.Value);

            if (createReplicaRequestBody.PropertiesOption.IsSet)
            {
                writer.WritePropertyName("properties");
                JsonSerializer.Serialize(writer, createReplicaRequestBody.Properties, jsonSerializerOptions);
            }
            if (createReplicaRequestBody.NodeSetOption.IsSet)
            {
                writer.WritePropertyName("nodeSet");
                JsonSerializer.Serialize(writer, createReplicaRequestBody.NodeSet, jsonSerializerOptions);
            }
        }
    }
}
