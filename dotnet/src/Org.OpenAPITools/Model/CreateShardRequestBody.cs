// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateShardRequestBody
    /// </summary>
    public partial class CreateShardRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShardRequestBody" /> class.
        /// </summary>
        /// <param name="replicationFactor">replicationFactor</param>
        /// <param name="nrtReplicas">nrtReplicas</param>
        /// <param name="tlogReplicas">tlogReplicas</param>
        /// <param name="pullReplicas">pullReplicas</param>
        /// <param name="waitForFinalState">waitForFinalState</param>
        /// <param name="followAliases">followAliases</param>
        /// <param name="async">async</param>
        /// <param name="properties">properties</param>
        /// <param name="shardName">shardName</param>
        /// <param name="createReplicas">createReplicas</param>
        /// <param name="nodeSet">nodeSet</param>
        [JsonConstructor]
        public CreateShardRequestBody(Option<int?> replicationFactor = default, Option<int?> nrtReplicas = default, Option<int?> tlogReplicas = default, Option<int?> pullReplicas = default, Option<bool?> waitForFinalState = default, Option<bool?> followAliases = default, Option<string?> async = default, Option<Dictionary<string, string>?> properties = default, Option<string?> shardName = default, Option<bool?> createReplicas = default, Option<List<string>?> nodeSet = default)
        {
            ReplicationFactorOption = replicationFactor;
            NrtReplicasOption = nrtReplicas;
            TlogReplicasOption = tlogReplicas;
            PullReplicasOption = pullReplicas;
            WaitForFinalStateOption = waitForFinalState;
            FollowAliasesOption = followAliases;
            AsyncOption = async;
            PropertiesOption = properties;
            ShardNameOption = shardName;
            CreateReplicasOption = createReplicas;
            NodeSetOption = nodeSet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ReplicationFactor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ReplicationFactorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplicationFactor
        /// </summary>
        [JsonPropertyName("replicationFactor")]
        public int? ReplicationFactor { get { return this.ReplicationFactorOption; } set { this.ReplicationFactorOption = new(value); } }

        /// <summary>
        /// Used to track the state of NrtReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NrtReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets NrtReplicas
        /// </summary>
        [JsonPropertyName("nrtReplicas")]
        public int? NrtReplicas { get { return this.NrtReplicasOption; } set { this.NrtReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of TlogReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TlogReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets TlogReplicas
        /// </summary>
        [JsonPropertyName("tlogReplicas")]
        public int? TlogReplicas { get { return this.TlogReplicasOption; } set { this.TlogReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PullReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullReplicas
        /// </summary>
        [JsonPropertyName("pullReplicas")]
        public int? PullReplicas { get { return this.PullReplicasOption; } set { this.PullReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets WaitForFinalState
        /// </summary>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of Properties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> PropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [JsonPropertyName("properties")]
        public Dictionary<string, string>? Properties { get { return this.PropertiesOption; } set { this.PropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShardName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShardNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShardName
        /// </summary>
        [JsonPropertyName("shardName")]
        public string? ShardName { get { return this.ShardNameOption; } set { this.ShardNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateReplicas
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CreateReplicasOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateReplicas
        /// </summary>
        [JsonPropertyName("createReplicas")]
        public bool? CreateReplicas { get { return this.CreateReplicasOption; } set { this.CreateReplicasOption = new(value); } }

        /// <summary>
        /// Used to track the state of NodeSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NodeSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets NodeSet
        /// </summary>
        [JsonPropertyName("nodeSet")]
        public List<string>? NodeSet { get { return this.NodeSetOption; } set { this.NodeSetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateShardRequestBody {\n");
            sb.Append("  ReplicationFactor: ").Append(ReplicationFactor).Append("\n");
            sb.Append("  NrtReplicas: ").Append(NrtReplicas).Append("\n");
            sb.Append("  TlogReplicas: ").Append(TlogReplicas).Append("\n");
            sb.Append("  PullReplicas: ").Append(PullReplicas).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  ShardName: ").Append(ShardName).Append("\n");
            sb.Append("  CreateReplicas: ").Append(CreateReplicas).Append("\n");
            sb.Append("  NodeSet: ").Append(NodeSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateShardRequestBody" />
    /// </summary>
    public class CreateShardRequestBodyJsonConverter : JsonConverter<CreateShardRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateShardRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateShardRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> replicationFactor = default;
            Option<int?> nrtReplicas = default;
            Option<int?> tlogReplicas = default;
            Option<int?> pullReplicas = default;
            Option<bool?> waitForFinalState = default;
            Option<bool?> followAliases = default;
            Option<string?> async = default;
            Option<Dictionary<string, string>?> properties = default;
            Option<string?> shardName = default;
            Option<bool?> createReplicas = default;
            Option<List<string>?> nodeSet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "replicationFactor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                replicationFactor = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "nrtReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nrtReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tlogReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tlogReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "pullReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pullReplicas = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "properties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                properties = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shardName":
                            shardName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createReplicas":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createReplicas = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "nodeSet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nodeSet = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (replicationFactor.IsSet && replicationFactor.Value == null)
                throw new ArgumentNullException(nameof(replicationFactor), "Property is not nullable for class CreateShardRequestBody.");

            if (nrtReplicas.IsSet && nrtReplicas.Value == null)
                throw new ArgumentNullException(nameof(nrtReplicas), "Property is not nullable for class CreateShardRequestBody.");

            if (tlogReplicas.IsSet && tlogReplicas.Value == null)
                throw new ArgumentNullException(nameof(tlogReplicas), "Property is not nullable for class CreateShardRequestBody.");

            if (pullReplicas.IsSet && pullReplicas.Value == null)
                throw new ArgumentNullException(nameof(pullReplicas), "Property is not nullable for class CreateShardRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class CreateShardRequestBody.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class CreateShardRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class CreateShardRequestBody.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class CreateShardRequestBody.");

            if (shardName.IsSet && shardName.Value == null)
                throw new ArgumentNullException(nameof(shardName), "Property is not nullable for class CreateShardRequestBody.");

            if (createReplicas.IsSet && createReplicas.Value == null)
                throw new ArgumentNullException(nameof(createReplicas), "Property is not nullable for class CreateShardRequestBody.");

            if (nodeSet.IsSet && nodeSet.Value == null)
                throw new ArgumentNullException(nameof(nodeSet), "Property is not nullable for class CreateShardRequestBody.");

            return new CreateShardRequestBody(replicationFactor, nrtReplicas, tlogReplicas, pullReplicas, waitForFinalState, followAliases, async, properties, shardName, createReplicas, nodeSet);
        }

        /// <summary>
        /// Serializes a <see cref="CreateShardRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createShardRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateShardRequestBody createShardRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createShardRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateShardRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createShardRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateShardRequestBody createShardRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createShardRequestBody.AsyncOption.IsSet && createShardRequestBody.Async == null)
                throw new ArgumentNullException(nameof(createShardRequestBody.Async), "Property is required for class CreateShardRequestBody.");

            if (createShardRequestBody.PropertiesOption.IsSet && createShardRequestBody.Properties == null)
                throw new ArgumentNullException(nameof(createShardRequestBody.Properties), "Property is required for class CreateShardRequestBody.");

            if (createShardRequestBody.ShardNameOption.IsSet && createShardRequestBody.ShardName == null)
                throw new ArgumentNullException(nameof(createShardRequestBody.ShardName), "Property is required for class CreateShardRequestBody.");

            if (createShardRequestBody.NodeSetOption.IsSet && createShardRequestBody.NodeSet == null)
                throw new ArgumentNullException(nameof(createShardRequestBody.NodeSet), "Property is required for class CreateShardRequestBody.");

            if (createShardRequestBody.ReplicationFactorOption.IsSet)
                writer.WriteNumber("replicationFactor", createShardRequestBody.ReplicationFactorOption.Value!.Value);

            if (createShardRequestBody.NrtReplicasOption.IsSet)
                writer.WriteNumber("nrtReplicas", createShardRequestBody.NrtReplicasOption.Value!.Value);

            if (createShardRequestBody.TlogReplicasOption.IsSet)
                writer.WriteNumber("tlogReplicas", createShardRequestBody.TlogReplicasOption.Value!.Value);

            if (createShardRequestBody.PullReplicasOption.IsSet)
                writer.WriteNumber("pullReplicas", createShardRequestBody.PullReplicasOption.Value!.Value);

            if (createShardRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", createShardRequestBody.WaitForFinalStateOption.Value!.Value);

            if (createShardRequestBody.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", createShardRequestBody.FollowAliasesOption.Value!.Value);

            if (createShardRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", createShardRequestBody.Async);

            if (createShardRequestBody.PropertiesOption.IsSet)
            {
                writer.WritePropertyName("properties");
                JsonSerializer.Serialize(writer, createShardRequestBody.Properties, jsonSerializerOptions);
            }
            if (createShardRequestBody.ShardNameOption.IsSet)
                writer.WriteString("shardName", createShardRequestBody.ShardName);

            if (createShardRequestBody.CreateReplicasOption.IsSet)
                writer.WriteBoolean("createReplicas", createShardRequestBody.CreateReplicasOption.Value!.Value);

            if (createShardRequestBody.NodeSetOption.IsSet)
            {
                writer.WritePropertyName("nodeSet");
                JsonSerializer.Serialize(writer, createShardRequestBody.NodeSet, jsonSerializerOptions);
            }
        }
    }
}
