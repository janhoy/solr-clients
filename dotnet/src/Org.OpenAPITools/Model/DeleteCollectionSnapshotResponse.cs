// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeleteCollectionSnapshotResponse
    /// </summary>
    public partial class DeleteCollectionSnapshotResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteCollectionSnapshotResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader</param>
        /// <param name="error">error</param>
        /// <param name="requestid">requestid</param>
        /// <param name="collection">The name of the collection.</param>
        /// <param name="snapshot">The name of the snapshot to be deleted.</param>
        /// <param name="followAliases">A flag that treats the collName parameter as a collection alias.</param>
        [JsonConstructor]
        public DeleteCollectionSnapshotResponse(Option<ResponseHeader?> responseHeader = default, Option<ErrorInfo?> error = default, Option<string?> requestid = default, Option<string?> collection = default, Option<string?> snapshot = default, Option<bool?> followAliases = default)
        {
            ResponseHeaderOption = responseHeader;
            ErrorOption = error;
            RequestidOption = requestid;
            CollectionOption = collection;
            SnapshotOption = snapshot;
            FollowAliasesOption = followAliases;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResponseHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResponseHeader?> ResponseHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [JsonPropertyName("responseHeader")]
        public ResponseHeader? ResponseHeader { get { return this.ResponseHeaderOption; } set { this.ResponseHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrorInfo?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public ErrorInfo? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Requestid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RequestidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Requestid
        /// </summary>
        [JsonPropertyName("requestid")]
        public string? Requestid { get { return this.RequestidOption; } set { this.RequestidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Collection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CollectionOption { get; private set; }

        /// <summary>
        /// The name of the collection.
        /// </summary>
        /// <value>The name of the collection.</value>
        [JsonPropertyName("collection")]
        public string? Collection { get { return this.CollectionOption; } set { this.CollectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Snapshot
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SnapshotOption { get; private set; }

        /// <summary>
        /// The name of the snapshot to be deleted.
        /// </summary>
        /// <value>The name of the snapshot to be deleted.</value>
        [JsonPropertyName("snapshot")]
        public string? Snapshot { get { return this.SnapshotOption; } set { this.SnapshotOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// A flag that treats the collName parameter as a collection alias.
        /// </summary>
        /// <value>A flag that treats the collName parameter as a collection alias.</value>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteCollectionSnapshotResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Requestid: ").Append(Requestid).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Snapshot: ").Append(Snapshot).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeleteCollectionSnapshotResponse" />
    /// </summary>
    public class DeleteCollectionSnapshotResponseJsonConverter : JsonConverter<DeleteCollectionSnapshotResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DeleteCollectionSnapshotResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeleteCollectionSnapshotResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ResponseHeader?> responseHeader = default;
            Option<ErrorInfo?> error = default;
            Option<string?> requestid = default;
            Option<string?> collection = default;
            Option<string?> snapshot = default;
            Option<bool?> followAliases = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "responseHeader":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responseHeader = new Option<ResponseHeader?>(JsonSerializer.Deserialize<ResponseHeader>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<ErrorInfo?>(JsonSerializer.Deserialize<ErrorInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "requestid":
                            requestid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "collection":
                            collection = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "snapshot":
                            snapshot = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (responseHeader.IsSet && responseHeader.Value == null)
                throw new ArgumentNullException(nameof(responseHeader), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            if (requestid.IsSet && requestid.Value == null)
                throw new ArgumentNullException(nameof(requestid), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            if (collection.IsSet && collection.Value == null)
                throw new ArgumentNullException(nameof(collection), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            if (snapshot.IsSet && snapshot.Value == null)
                throw new ArgumentNullException(nameof(snapshot), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class DeleteCollectionSnapshotResponse.");

            return new DeleteCollectionSnapshotResponse(responseHeader, error, requestid, collection, snapshot, followAliases);
        }

        /// <summary>
        /// Serializes a <see cref="DeleteCollectionSnapshotResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deleteCollectionSnapshotResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeleteCollectionSnapshotResponse deleteCollectionSnapshotResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deleteCollectionSnapshotResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeleteCollectionSnapshotResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deleteCollectionSnapshotResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeleteCollectionSnapshotResponse deleteCollectionSnapshotResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deleteCollectionSnapshotResponse.ResponseHeaderOption.IsSet && deleteCollectionSnapshotResponse.ResponseHeader == null)
                throw new ArgumentNullException(nameof(deleteCollectionSnapshotResponse.ResponseHeader), "Property is required for class DeleteCollectionSnapshotResponse.");

            if (deleteCollectionSnapshotResponse.ErrorOption.IsSet && deleteCollectionSnapshotResponse.Error == null)
                throw new ArgumentNullException(nameof(deleteCollectionSnapshotResponse.Error), "Property is required for class DeleteCollectionSnapshotResponse.");

            if (deleteCollectionSnapshotResponse.RequestidOption.IsSet && deleteCollectionSnapshotResponse.Requestid == null)
                throw new ArgumentNullException(nameof(deleteCollectionSnapshotResponse.Requestid), "Property is required for class DeleteCollectionSnapshotResponse.");

            if (deleteCollectionSnapshotResponse.CollectionOption.IsSet && deleteCollectionSnapshotResponse.Collection == null)
                throw new ArgumentNullException(nameof(deleteCollectionSnapshotResponse.Collection), "Property is required for class DeleteCollectionSnapshotResponse.");

            if (deleteCollectionSnapshotResponse.SnapshotOption.IsSet && deleteCollectionSnapshotResponse.Snapshot == null)
                throw new ArgumentNullException(nameof(deleteCollectionSnapshotResponse.Snapshot), "Property is required for class DeleteCollectionSnapshotResponse.");

            if (deleteCollectionSnapshotResponse.ResponseHeaderOption.IsSet)
            {
                writer.WritePropertyName("responseHeader");
                JsonSerializer.Serialize(writer, deleteCollectionSnapshotResponse.ResponseHeader, jsonSerializerOptions);
            }
            if (deleteCollectionSnapshotResponse.ErrorOption.IsSet)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, deleteCollectionSnapshotResponse.Error, jsonSerializerOptions);
            }
            if (deleteCollectionSnapshotResponse.RequestidOption.IsSet)
                writer.WriteString("requestid", deleteCollectionSnapshotResponse.Requestid);

            if (deleteCollectionSnapshotResponse.CollectionOption.IsSet)
                writer.WriteString("collection", deleteCollectionSnapshotResponse.Collection);

            if (deleteCollectionSnapshotResponse.SnapshotOption.IsSet)
                writer.WriteString("snapshot", deleteCollectionSnapshotResponse.Snapshot);

            if (deleteCollectionSnapshotResponse.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", deleteCollectionSnapshotResponse.FollowAliasesOption.Value!.Value);
        }
    }
}
