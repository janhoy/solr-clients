// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ErrorInfo
    /// </summary>
    public partial class ErrorInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorInfo" /> class.
        /// </summary>
        /// <param name="metadata">metadata</param>
        /// <param name="details">details</param>
        /// <param name="msg">msg</param>
        /// <param name="trace">trace</param>
        /// <param name="code">code</param>
        [JsonConstructor]
        public ErrorInfo(Option<ErrorMetadata?> metadata = default, Option<List<Dictionary<string, Object>>?> details = default, Option<string?> msg = default, Option<string?> trace = default, Option<int?> code = default)
        {
            MetadataOption = metadata;
            DetailsOption = details;
            MsgOption = msg;
            TraceOption = trace;
            CodeOption = code;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrorMetadata?> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public ErrorMetadata? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Dictionary<string, Object>>?> DetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [JsonPropertyName("details")]
        public List<Dictionary<string, Object>>? Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Msg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [JsonPropertyName("msg")]
        public string? Msg { get { return this.MsgOption; } set { this.MsgOption = new(value); } }

        /// <summary>
        /// Used to track the state of Trace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TraceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Trace
        /// </summary>
        [JsonPropertyName("trace")]
        public string? Trace { get { return this.TraceOption; } set { this.TraceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public int? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorInfo {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorInfo" />
    /// </summary>
    public class ErrorInfoJsonConverter : JsonConverter<ErrorInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrorInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ErrorMetadata?> metadata = default;
            Option<List<Dictionary<string, Object>>?> details = default;
            Option<string?> msg = default;
            Option<string?> trace = default;
            Option<int?> code = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metadata = new Option<ErrorMetadata?>(JsonSerializer.Deserialize<ErrorMetadata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "details":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                details = new Option<List<Dictionary<string, Object>>?>(JsonSerializer.Deserialize<List<Dictionary<string, Object>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "msg":
                            msg = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "trace":
                            trace = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class ErrorInfo.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class ErrorInfo.");

            if (msg.IsSet && msg.Value == null)
                throw new ArgumentNullException(nameof(msg), "Property is not nullable for class ErrorInfo.");

            if (trace.IsSet && trace.Value == null)
                throw new ArgumentNullException(nameof(trace), "Property is not nullable for class ErrorInfo.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class ErrorInfo.");

            return new ErrorInfo(metadata, details, msg, trace, code);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorInfo errorInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorInfo errorInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorInfo.MetadataOption.IsSet && errorInfo.Metadata == null)
                throw new ArgumentNullException(nameof(errorInfo.Metadata), "Property is required for class ErrorInfo.");

            if (errorInfo.DetailsOption.IsSet && errorInfo.Details == null)
                throw new ArgumentNullException(nameof(errorInfo.Details), "Property is required for class ErrorInfo.");

            if (errorInfo.MsgOption.IsSet && errorInfo.Msg == null)
                throw new ArgumentNullException(nameof(errorInfo.Msg), "Property is required for class ErrorInfo.");

            if (errorInfo.TraceOption.IsSet && errorInfo.Trace == null)
                throw new ArgumentNullException(nameof(errorInfo.Trace), "Property is required for class ErrorInfo.");

            if (errorInfo.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, errorInfo.Metadata, jsonSerializerOptions);
            }
            if (errorInfo.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, errorInfo.Details, jsonSerializerOptions);
            }
            if (errorInfo.MsgOption.IsSet)
                writer.WriteString("msg", errorInfo.Msg);

            if (errorInfo.TraceOption.IsSet)
                writer.WriteString("trace", errorInfo.Trace);

            if (errorInfo.CodeOption.IsSet)
                writer.WriteNumber("code", errorInfo.CodeOption.Value!.Value);
        }
    }
}
