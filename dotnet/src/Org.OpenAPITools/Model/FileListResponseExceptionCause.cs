// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileListResponseExceptionCause
    /// </summary>
    public partial class FileListResponseExceptionCause : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListResponseExceptionCause" /> class.
        /// </summary>
        /// <param name="stackTrace">stackTrace</param>
        /// <param name="message">message</param>
        /// <param name="localizedMessage">localizedMessage</param>
        [JsonConstructor]
        public FileListResponseExceptionCause(Option<List<FileListResponseExceptionCauseStackTraceInner>?> stackTrace = default, Option<string?> message = default, Option<string?> localizedMessage = default)
        {
            StackTraceOption = stackTrace;
            MessageOption = message;
            LocalizedMessageOption = localizedMessage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StackTrace
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FileListResponseExceptionCauseStackTraceInner>?> StackTraceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [JsonPropertyName("stackTrace")]
        public List<FileListResponseExceptionCauseStackTraceInner>? StackTrace { get { return this.StackTraceOption; } set { this.StackTraceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocalizedMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocalizedMessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets LocalizedMessage
        /// </summary>
        [JsonPropertyName("localizedMessage")]
        public string? LocalizedMessage { get { return this.LocalizedMessageOption; } set { this.LocalizedMessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileListResponseExceptionCause {\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  LocalizedMessage: ").Append(LocalizedMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileListResponseExceptionCause" />
    /// </summary>
    public class FileListResponseExceptionCauseJsonConverter : JsonConverter<FileListResponseExceptionCause>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileListResponseExceptionCause" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileListResponseExceptionCause Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<FileListResponseExceptionCauseStackTraceInner>?> stackTrace = default;
            Option<string?> message = default;
            Option<string?> localizedMessage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "stackTrace":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stackTrace = new Option<List<FileListResponseExceptionCauseStackTraceInner>?>(JsonSerializer.Deserialize<List<FileListResponseExceptionCauseStackTraceInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "localizedMessage":
                            localizedMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (stackTrace.IsSet && stackTrace.Value == null)
                throw new ArgumentNullException(nameof(stackTrace), "Property is not nullable for class FileListResponseExceptionCause.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class FileListResponseExceptionCause.");

            if (localizedMessage.IsSet && localizedMessage.Value == null)
                throw new ArgumentNullException(nameof(localizedMessage), "Property is not nullable for class FileListResponseExceptionCause.");

            return new FileListResponseExceptionCause(stackTrace, message, localizedMessage);
        }

        /// <summary>
        /// Serializes a <see cref="FileListResponseExceptionCause" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResponseExceptionCause"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileListResponseExceptionCause fileListResponseExceptionCause, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileListResponseExceptionCause, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileListResponseExceptionCause" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResponseExceptionCause"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileListResponseExceptionCause fileListResponseExceptionCause, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileListResponseExceptionCause.StackTraceOption.IsSet && fileListResponseExceptionCause.StackTrace == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCause.StackTrace), "Property is required for class FileListResponseExceptionCause.");

            if (fileListResponseExceptionCause.MessageOption.IsSet && fileListResponseExceptionCause.Message == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCause.Message), "Property is required for class FileListResponseExceptionCause.");

            if (fileListResponseExceptionCause.LocalizedMessageOption.IsSet && fileListResponseExceptionCause.LocalizedMessage == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCause.LocalizedMessage), "Property is required for class FileListResponseExceptionCause.");

            if (fileListResponseExceptionCause.StackTraceOption.IsSet)
            {
                writer.WritePropertyName("stackTrace");
                JsonSerializer.Serialize(writer, fileListResponseExceptionCause.StackTrace, jsonSerializerOptions);
            }
            if (fileListResponseExceptionCause.MessageOption.IsSet)
                writer.WriteString("message", fileListResponseExceptionCause.Message);

            if (fileListResponseExceptionCause.LocalizedMessageOption.IsSet)
                writer.WriteString("localizedMessage", fileListResponseExceptionCause.LocalizedMessage);
        }
    }
}
