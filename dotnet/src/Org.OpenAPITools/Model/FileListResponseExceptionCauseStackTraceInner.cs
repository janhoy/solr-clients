// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileListResponseExceptionCauseStackTraceInner
    /// </summary>
    public partial class FileListResponseExceptionCauseStackTraceInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListResponseExceptionCauseStackTraceInner" /> class.
        /// </summary>
        /// <param name="classLoaderName">classLoaderName</param>
        /// <param name="moduleName">moduleName</param>
        /// <param name="moduleVersion">moduleVersion</param>
        /// <param name="methodName">methodName</param>
        /// <param name="fileName">fileName</param>
        /// <param name="lineNumber">lineNumber</param>
        /// <param name="className">className</param>
        /// <param name="nativeMethod">nativeMethod</param>
        [JsonConstructor]
        public FileListResponseExceptionCauseStackTraceInner(Option<string?> classLoaderName = default, Option<string?> moduleName = default, Option<string?> moduleVersion = default, Option<string?> methodName = default, Option<string?> fileName = default, Option<int?> lineNumber = default, Option<string?> className = default, Option<bool?> nativeMethod = default)
        {
            ClassLoaderNameOption = classLoaderName;
            ModuleNameOption = moduleName;
            ModuleVersionOption = moduleVersion;
            MethodNameOption = methodName;
            FileNameOption = fileName;
            LineNumberOption = lineNumber;
            ClassNameOption = className;
            NativeMethodOption = nativeMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClassLoaderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassLoaderNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClassLoaderName
        /// </summary>
        [JsonPropertyName("classLoaderName")]
        public string? ClassLoaderName { get { return this.ClassLoaderNameOption; } set { this.ClassLoaderNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ModuleName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModuleNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ModuleName
        /// </summary>
        [JsonPropertyName("moduleName")]
        public string? ModuleName { get { return this.ModuleNameOption; } set { this.ModuleNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ModuleVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModuleVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets ModuleVersion
        /// </summary>
        [JsonPropertyName("moduleVersion")]
        public string? ModuleVersion { get { return this.ModuleVersionOption; } set { this.ModuleVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of MethodName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MethodNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [JsonPropertyName("methodName")]
        public string? MethodName { get { return this.MethodNameOption; } set { this.MethodNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("fileName")]
        public string? FileName { get { return this.FileNameOption; } set { this.FileNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LineNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LineNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [JsonPropertyName("lineNumber")]
        public int? LineNumber { get { return this.LineNumberOption; } set { this.LineNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClassName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [JsonPropertyName("className")]
        public string? ClassName { get { return this.ClassNameOption; } set { this.ClassNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of NativeMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NativeMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets NativeMethod
        /// </summary>
        [JsonPropertyName("nativeMethod")]
        public bool? NativeMethod { get { return this.NativeMethodOption; } set { this.NativeMethodOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileListResponseExceptionCauseStackTraceInner {\n");
            sb.Append("  ClassLoaderName: ").Append(ClassLoaderName).Append("\n");
            sb.Append("  ModuleName: ").Append(ModuleName).Append("\n");
            sb.Append("  ModuleVersion: ").Append(ModuleVersion).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  NativeMethod: ").Append(NativeMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileListResponseExceptionCauseStackTraceInner" />
    /// </summary>
    public class FileListResponseExceptionCauseStackTraceInnerJsonConverter : JsonConverter<FileListResponseExceptionCauseStackTraceInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileListResponseExceptionCauseStackTraceInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileListResponseExceptionCauseStackTraceInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> classLoaderName = default;
            Option<string?> moduleName = default;
            Option<string?> moduleVersion = default;
            Option<string?> methodName = default;
            Option<string?> fileName = default;
            Option<int?> lineNumber = default;
            Option<string?> className = default;
            Option<bool?> nativeMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "classLoaderName":
                            classLoaderName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moduleName":
                            moduleName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moduleVersion":
                            moduleVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "methodName":
                            methodName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fileName":
                            fileName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lineNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "className":
                            className = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nativeMethod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nativeMethod = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (classLoaderName.IsSet && classLoaderName.Value == null)
                throw new ArgumentNullException(nameof(classLoaderName), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (moduleName.IsSet && moduleName.Value == null)
                throw new ArgumentNullException(nameof(moduleName), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (moduleVersion.IsSet && moduleVersion.Value == null)
                throw new ArgumentNullException(nameof(moduleVersion), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (methodName.IsSet && methodName.Value == null)
                throw new ArgumentNullException(nameof(methodName), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (lineNumber.IsSet && lineNumber.Value == null)
                throw new ArgumentNullException(nameof(lineNumber), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (className.IsSet && className.Value == null)
                throw new ArgumentNullException(nameof(className), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            if (nativeMethod.IsSet && nativeMethod.Value == null)
                throw new ArgumentNullException(nameof(nativeMethod), "Property is not nullable for class FileListResponseExceptionCauseStackTraceInner.");

            return new FileListResponseExceptionCauseStackTraceInner(classLoaderName, moduleName, moduleVersion, methodName, fileName, lineNumber, className, nativeMethod);
        }

        /// <summary>
        /// Serializes a <see cref="FileListResponseExceptionCauseStackTraceInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResponseExceptionCauseStackTraceInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileListResponseExceptionCauseStackTraceInner fileListResponseExceptionCauseStackTraceInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileListResponseExceptionCauseStackTraceInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileListResponseExceptionCauseStackTraceInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResponseExceptionCauseStackTraceInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileListResponseExceptionCauseStackTraceInner fileListResponseExceptionCauseStackTraceInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileListResponseExceptionCauseStackTraceInner.ClassLoaderNameOption.IsSet && fileListResponseExceptionCauseStackTraceInner.ClassLoaderName == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.ClassLoaderName), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.ModuleNameOption.IsSet && fileListResponseExceptionCauseStackTraceInner.ModuleName == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.ModuleName), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.ModuleVersionOption.IsSet && fileListResponseExceptionCauseStackTraceInner.ModuleVersion == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.ModuleVersion), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.MethodNameOption.IsSet && fileListResponseExceptionCauseStackTraceInner.MethodName == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.MethodName), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.FileNameOption.IsSet && fileListResponseExceptionCauseStackTraceInner.FileName == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.FileName), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.ClassNameOption.IsSet && fileListResponseExceptionCauseStackTraceInner.ClassName == null)
                throw new ArgumentNullException(nameof(fileListResponseExceptionCauseStackTraceInner.ClassName), "Property is required for class FileListResponseExceptionCauseStackTraceInner.");

            if (fileListResponseExceptionCauseStackTraceInner.ClassLoaderNameOption.IsSet)
                writer.WriteString("classLoaderName", fileListResponseExceptionCauseStackTraceInner.ClassLoaderName);

            if (fileListResponseExceptionCauseStackTraceInner.ModuleNameOption.IsSet)
                writer.WriteString("moduleName", fileListResponseExceptionCauseStackTraceInner.ModuleName);

            if (fileListResponseExceptionCauseStackTraceInner.ModuleVersionOption.IsSet)
                writer.WriteString("moduleVersion", fileListResponseExceptionCauseStackTraceInner.ModuleVersion);

            if (fileListResponseExceptionCauseStackTraceInner.MethodNameOption.IsSet)
                writer.WriteString("methodName", fileListResponseExceptionCauseStackTraceInner.MethodName);

            if (fileListResponseExceptionCauseStackTraceInner.FileNameOption.IsSet)
                writer.WriteString("fileName", fileListResponseExceptionCauseStackTraceInner.FileName);

            if (fileListResponseExceptionCauseStackTraceInner.LineNumberOption.IsSet)
                writer.WriteNumber("lineNumber", fileListResponseExceptionCauseStackTraceInner.LineNumberOption.Value!.Value);

            if (fileListResponseExceptionCauseStackTraceInner.ClassNameOption.IsSet)
                writer.WriteString("className", fileListResponseExceptionCauseStackTraceInner.ClassName);

            if (fileListResponseExceptionCauseStackTraceInner.NativeMethodOption.IsSet)
                writer.WriteBoolean("nativeMethod", fileListResponseExceptionCauseStackTraceInner.NativeMethodOption.Value!.Value);
        }
    }
}
