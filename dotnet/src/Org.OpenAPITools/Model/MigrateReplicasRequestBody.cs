// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MigrateReplicasRequestBody
    /// </summary>
    public partial class MigrateReplicasRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateReplicasRequestBody" /> class.
        /// </summary>
        /// <param name="sourceNodes">The set of nodes which all replicas will be migrated off of.</param>
        /// <param name="targetNodes">A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;.</param>
        /// <param name="waitForFinalState">If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active.</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously.</param>
        [JsonConstructor]
        public MigrateReplicasRequestBody(List<string> sourceNodes, Option<List<string>?> targetNodes = default, Option<bool?> waitForFinalState = default, Option<string?> async = default)
        {
            SourceNodes = sourceNodes;
            TargetNodesOption = targetNodes;
            WaitForFinalStateOption = waitForFinalState;
            AsyncOption = async;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The set of nodes which all replicas will be migrated off of.
        /// </summary>
        /// <value>The set of nodes which all replicas will be migrated off of.</value>
        [JsonPropertyName("sourceNodes")]
        public List<string> SourceNodes { get; set; }

        /// <summary>
        /// Used to track the state of TargetNodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TargetNodesOption { get; private set; }

        /// <summary>
        /// A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;.
        /// </summary>
        /// <value>A set of nodes to migrate the replicas to. If this is not provided, then the API will use the live data nodes not in &#39;sourceNodes&#39;.</value>
        [JsonPropertyName("targetNodes")]
        public List<string>? TargetNodes { get { return this.TargetNodesOption; } set { this.TargetNodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active.
        /// </summary>
        /// <value>If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replicas are online and active.</value>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrateReplicasRequestBody {\n");
            sb.Append("  SourceNodes: ").Append(SourceNodes).Append("\n");
            sb.Append("  TargetNodes: ").Append(TargetNodes).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MigrateReplicasRequestBody" />
    /// </summary>
    public class MigrateReplicasRequestBodyJsonConverter : JsonConverter<MigrateReplicasRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="MigrateReplicasRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MigrateReplicasRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> sourceNodes = default;
            Option<List<string>?> targetNodes = default;
            Option<bool?> waitForFinalState = default;
            Option<string?> async = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sourceNodes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sourceNodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "targetNodes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                targetNodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sourceNodes.IsSet)
                throw new ArgumentException("Property is required for class MigrateReplicasRequestBody.", nameof(sourceNodes));

            if (sourceNodes.IsSet && sourceNodes.Value == null)
                throw new ArgumentNullException(nameof(sourceNodes), "Property is not nullable for class MigrateReplicasRequestBody.");

            if (targetNodes.IsSet && targetNodes.Value == null)
                throw new ArgumentNullException(nameof(targetNodes), "Property is not nullable for class MigrateReplicasRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class MigrateReplicasRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class MigrateReplicasRequestBody.");

            return new MigrateReplicasRequestBody(sourceNodes.Value!, targetNodes, waitForFinalState, async);
        }

        /// <summary>
        /// Serializes a <see cref="MigrateReplicasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MigrateReplicasRequestBody migrateReplicasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, migrateReplicasRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MigrateReplicasRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="migrateReplicasRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MigrateReplicasRequestBody migrateReplicasRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (migrateReplicasRequestBody.SourceNodes == null)
                throw new ArgumentNullException(nameof(migrateReplicasRequestBody.SourceNodes), "Property is required for class MigrateReplicasRequestBody.");

            if (migrateReplicasRequestBody.TargetNodesOption.IsSet && migrateReplicasRequestBody.TargetNodes == null)
                throw new ArgumentNullException(nameof(migrateReplicasRequestBody.TargetNodes), "Property is required for class MigrateReplicasRequestBody.");

            if (migrateReplicasRequestBody.AsyncOption.IsSet && migrateReplicasRequestBody.Async == null)
                throw new ArgumentNullException(nameof(migrateReplicasRequestBody.Async), "Property is required for class MigrateReplicasRequestBody.");

            writer.WritePropertyName("sourceNodes");
            JsonSerializer.Serialize(writer, migrateReplicasRequestBody.SourceNodes, jsonSerializerOptions);
            if (migrateReplicasRequestBody.TargetNodesOption.IsSet)
            {
                writer.WritePropertyName("targetNodes");
                JsonSerializer.Serialize(writer, migrateReplicasRequestBody.TargetNodes, jsonSerializerOptions);
            }
            if (migrateReplicasRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", migrateReplicasRequestBody.WaitForFinalStateOption.Value!.Value);

            if (migrateReplicasRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", migrateReplicasRequestBody.Async);
        }
    }
}
