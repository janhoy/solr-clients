// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PurgeUnusedStats
    /// </summary>
    public partial class PurgeUnusedStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurgeUnusedStats" /> class.
        /// </summary>
        /// <param name="numBackupIds">numBackupIds</param>
        /// <param name="numShardBackupIds">numShardBackupIds</param>
        /// <param name="numIndexFiles">numIndexFiles</param>
        [JsonConstructor]
        public PurgeUnusedStats(Option<int?> numBackupIds = default, Option<int?> numShardBackupIds = default, Option<int?> numIndexFiles = default)
        {
            NumBackupIdsOption = numBackupIds;
            NumShardBackupIdsOption = numShardBackupIds;
            NumIndexFilesOption = numIndexFiles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NumBackupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumBackupIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumBackupIds
        /// </summary>
        [JsonPropertyName("numBackupIds")]
        public int? NumBackupIds { get { return this.NumBackupIdsOption; } set { this.NumBackupIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumShardBackupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumShardBackupIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumShardBackupIds
        /// </summary>
        [JsonPropertyName("numShardBackupIds")]
        public int? NumShardBackupIds { get { return this.NumShardBackupIdsOption; } set { this.NumShardBackupIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumIndexFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumIndexFilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumIndexFiles
        /// </summary>
        [JsonPropertyName("numIndexFiles")]
        public int? NumIndexFiles { get { return this.NumIndexFilesOption; } set { this.NumIndexFilesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PurgeUnusedStats {\n");
            sb.Append("  NumBackupIds: ").Append(NumBackupIds).Append("\n");
            sb.Append("  NumShardBackupIds: ").Append(NumShardBackupIds).Append("\n");
            sb.Append("  NumIndexFiles: ").Append(NumIndexFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PurgeUnusedStats" />
    /// </summary>
    public class PurgeUnusedStatsJsonConverter : JsonConverter<PurgeUnusedStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="PurgeUnusedStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PurgeUnusedStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> numBackupIds = default;
            Option<int?> numShardBackupIds = default;
            Option<int?> numIndexFiles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numBackupIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numBackupIds = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numShardBackupIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numShardBackupIds = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numIndexFiles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numIndexFiles = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (numBackupIds.IsSet && numBackupIds.Value == null)
                throw new ArgumentNullException(nameof(numBackupIds), "Property is not nullable for class PurgeUnusedStats.");

            if (numShardBackupIds.IsSet && numShardBackupIds.Value == null)
                throw new ArgumentNullException(nameof(numShardBackupIds), "Property is not nullable for class PurgeUnusedStats.");

            if (numIndexFiles.IsSet && numIndexFiles.Value == null)
                throw new ArgumentNullException(nameof(numIndexFiles), "Property is not nullable for class PurgeUnusedStats.");

            return new PurgeUnusedStats(numBackupIds, numShardBackupIds, numIndexFiles);
        }

        /// <summary>
        /// Serializes a <see cref="PurgeUnusedStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="purgeUnusedStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PurgeUnusedStats purgeUnusedStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, purgeUnusedStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PurgeUnusedStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="purgeUnusedStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PurgeUnusedStats purgeUnusedStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (purgeUnusedStats.NumBackupIdsOption.IsSet)
                writer.WriteNumber("numBackupIds", purgeUnusedStats.NumBackupIdsOption.Value!.Value);

            if (purgeUnusedStats.NumShardBackupIdsOption.IsSet)
                writer.WriteNumber("numShardBackupIds", purgeUnusedStats.NumShardBackupIdsOption.Value!.Value);

            if (purgeUnusedStats.NumIndexFilesOption.IsSet)
                writer.WriteNumber("numIndexFiles", purgeUnusedStats.NumIndexFilesOption.Value!.Value);
        }
    }
}
