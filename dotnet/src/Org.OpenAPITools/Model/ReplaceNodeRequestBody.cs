// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReplaceNodeRequestBody
    /// </summary>
    public partial class ReplaceNodeRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceNodeRequestBody" /> class.
        /// </summary>
        /// <param name="targetNodeName">The target node where replicas will be copied. If this parameter is not provided, Solr will identify nodes automatically based on policies or number of cores in each node.</param>
        /// <param name="waitForFinalState">If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.</param>
        /// <param name="async">Request ID to track this action which will be processed asynchronously.</param>
        [JsonConstructor]
        public ReplaceNodeRequestBody(Option<string?> targetNodeName = default, Option<bool?> waitForFinalState = default, Option<string?> async = default)
        {
            TargetNodeNameOption = targetNodeName;
            WaitForFinalStateOption = waitForFinalState;
            AsyncOption = async;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TargetNodeName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetNodeNameOption { get; private set; }

        /// <summary>
        /// The target node where replicas will be copied. If this parameter is not provided, Solr will identify nodes automatically based on policies or number of cores in each node.
        /// </summary>
        /// <value>The target node where replicas will be copied. If this parameter is not provided, Solr will identify nodes automatically based on policies or number of cores in each node.</value>
        [JsonPropertyName("targetNodeName")]
        public string? TargetNodeName { get { return this.TargetNodeNameOption; } set { this.TargetNodeNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForFinalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WaitForFinalStateOption { get; private set; }

        /// <summary>
        /// If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.
        /// </summary>
        /// <value>If true, the request will complete only when all affected replicas become active. If false, the API will return the status of the single action, which may be before the new replica is online and active.</value>
        [JsonPropertyName("waitForFinalState")]
        public bool? WaitForFinalState { get { return this.WaitForFinalStateOption; } set { this.WaitForFinalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Request ID to track this action which will be processed asynchronously.
        /// </summary>
        /// <value>Request ID to track this action which will be processed asynchronously.</value>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceNodeRequestBody {\n");
            sb.Append("  TargetNodeName: ").Append(TargetNodeName).Append("\n");
            sb.Append("  WaitForFinalState: ").Append(WaitForFinalState).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReplaceNodeRequestBody" />
    /// </summary>
    public class ReplaceNodeRequestBodyJsonConverter : JsonConverter<ReplaceNodeRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReplaceNodeRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReplaceNodeRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> targetNodeName = default;
            Option<bool?> waitForFinalState = default;
            Option<string?> async = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "targetNodeName":
                            targetNodeName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "waitForFinalState":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                waitForFinalState = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (targetNodeName.IsSet && targetNodeName.Value == null)
                throw new ArgumentNullException(nameof(targetNodeName), "Property is not nullable for class ReplaceNodeRequestBody.");

            if (waitForFinalState.IsSet && waitForFinalState.Value == null)
                throw new ArgumentNullException(nameof(waitForFinalState), "Property is not nullable for class ReplaceNodeRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class ReplaceNodeRequestBody.");

            return new ReplaceNodeRequestBody(targetNodeName, waitForFinalState, async);
        }

        /// <summary>
        /// Serializes a <see cref="ReplaceNodeRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="replaceNodeRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReplaceNodeRequestBody replaceNodeRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, replaceNodeRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReplaceNodeRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="replaceNodeRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReplaceNodeRequestBody replaceNodeRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (replaceNodeRequestBody.TargetNodeNameOption.IsSet && replaceNodeRequestBody.TargetNodeName == null)
                throw new ArgumentNullException(nameof(replaceNodeRequestBody.TargetNodeName), "Property is required for class ReplaceNodeRequestBody.");

            if (replaceNodeRequestBody.AsyncOption.IsSet && replaceNodeRequestBody.Async == null)
                throw new ArgumentNullException(nameof(replaceNodeRequestBody.Async), "Property is required for class ReplaceNodeRequestBody.");

            if (replaceNodeRequestBody.TargetNodeNameOption.IsSet)
                writer.WriteString("targetNodeName", replaceNodeRequestBody.TargetNodeName);

            if (replaceNodeRequestBody.WaitForFinalStateOption.IsSet)
                writer.WriteBoolean("waitForFinalState", replaceNodeRequestBody.WaitForFinalStateOption.Value!.Value);

            if (replaceNodeRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", replaceNodeRequestBody.Async);
        }
    }
}
