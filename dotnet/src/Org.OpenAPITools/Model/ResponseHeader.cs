// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseHeader
    /// </summary>
    public partial class ResponseHeader : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseHeader" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="qTime">qTime</param>
        /// <param name="partialResults">partialResults</param>
        [JsonConstructor]
        public ResponseHeader(Option<int?> status = default, Option<long?> qTime = default, Option<bool?> partialResults = default)
        {
            StatusOption = status;
            QTimeOption = qTime;
            PartialResultsOption = partialResults;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of QTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> QTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets QTime
        /// </summary>
        [JsonPropertyName("QTime")]
        public long? QTime { get { return this.QTimeOption; } set { this.QTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PartialResults
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PartialResultsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PartialResults
        /// </summary>
        [JsonPropertyName("partialResults")]
        public bool? PartialResults { get { return this.PartialResultsOption; } set { this.PartialResultsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseHeader {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  QTime: ").Append(QTime).Append("\n");
            sb.Append("  PartialResults: ").Append(PartialResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResponseHeader" />
    /// </summary>
    public class ResponseHeaderJsonConverter : JsonConverter<ResponseHeader>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResponseHeader" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResponseHeader Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> status = default;
            Option<long?> qTime = default;
            Option<bool?> partialResults = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "QTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                qTime = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "partialResults":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                partialResults = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResponseHeader.");

            if (qTime.IsSet && qTime.Value == null)
                throw new ArgumentNullException(nameof(qTime), "Property is not nullable for class ResponseHeader.");

            if (partialResults.IsSet && partialResults.Value == null)
                throw new ArgumentNullException(nameof(partialResults), "Property is not nullable for class ResponseHeader.");

            return new ResponseHeader(status, qTime, partialResults);
        }

        /// <summary>
        /// Serializes a <see cref="ResponseHeader" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseHeader"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResponseHeader responseHeader, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, responseHeader, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResponseHeader" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="responseHeader"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResponseHeader responseHeader, JsonSerializerOptions jsonSerializerOptions)
        {
            if (responseHeader.StatusOption.IsSet)
                writer.WriteNumber("status", responseHeader.StatusOption.Value!.Value);

            if (responseHeader.QTimeOption.IsSet)
                writer.WriteNumber("QTime", responseHeader.QTimeOption.Value!.Value);

            if (responseHeader.PartialResultsOption.IsSet)
                writer.WriteBoolean("partialResults", responseHeader.PartialResultsOption.Value!.Value);
        }
    }
}
