// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RestoreCollectionRequestBody
    /// </summary>
    public partial class RestoreCollectionRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestoreCollectionRequestBody" /> class.
        /// </summary>
        /// <param name="collection">collection</param>
        /// <param name="location">location</param>
        /// <param name="repository">repository</param>
        /// <param name="backupId">backupId</param>
        /// <param name="async">async</param>
        /// <param name="createCollectionParams">createCollectionParams</param>
        [JsonConstructor]
        public RestoreCollectionRequestBody(string collection, Option<string?> location = default, Option<string?> repository = default, Option<int?> backupId = default, Option<string?> async = default, Option<CreateCollectionRequestBody?> createCollectionParams = default)
        {
            Collection = collection;
            LocationOption = location;
            RepositoryOption = repository;
            BackupIdOption = backupId;
            AsyncOption = async;
            CreateCollectionParamsOption = createCollectionParams;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [JsonPropertyName("collection")]
        public string Collection { get; set; }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [JsonPropertyName("repository")]
        public string? Repository { get { return this.RepositoryOption; } set { this.RepositoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BackupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackupId
        /// </summary>
        [JsonPropertyName("backupId")]
        public int? BackupId { get { return this.BackupIdOption; } set { this.BackupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateCollectionParams
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateCollectionRequestBody?> CreateCollectionParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateCollectionParams
        /// </summary>
        [JsonPropertyName("createCollectionParams")]
        public CreateCollectionRequestBody? CreateCollectionParams { get { return this.CreateCollectionParamsOption; } set { this.CreateCollectionParamsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestoreCollectionRequestBody {\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  BackupId: ").Append(BackupId).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  CreateCollectionParams: ").Append(CreateCollectionParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RestoreCollectionRequestBody" />
    /// </summary>
    public class RestoreCollectionRequestBodyJsonConverter : JsonConverter<RestoreCollectionRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="RestoreCollectionRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RestoreCollectionRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> collection = default;
            Option<string?> location = default;
            Option<string?> repository = default;
            Option<int?> backupId = default;
            Option<string?> async = default;
            Option<CreateCollectionRequestBody?> createCollectionParams = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "collection":
                            collection = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repository":
                            repository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "backupId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                backupId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createCollectionParams":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createCollectionParams = new Option<CreateCollectionRequestBody?>(JsonSerializer.Deserialize<CreateCollectionRequestBody>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!collection.IsSet)
                throw new ArgumentException("Property is required for class RestoreCollectionRequestBody.", nameof(collection));

            if (collection.IsSet && collection.Value == null)
                throw new ArgumentNullException(nameof(collection), "Property is not nullable for class RestoreCollectionRequestBody.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class RestoreCollectionRequestBody.");

            if (repository.IsSet && repository.Value == null)
                throw new ArgumentNullException(nameof(repository), "Property is not nullable for class RestoreCollectionRequestBody.");

            if (backupId.IsSet && backupId.Value == null)
                throw new ArgumentNullException(nameof(backupId), "Property is not nullable for class RestoreCollectionRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class RestoreCollectionRequestBody.");

            if (createCollectionParams.IsSet && createCollectionParams.Value == null)
                throw new ArgumentNullException(nameof(createCollectionParams), "Property is not nullable for class RestoreCollectionRequestBody.");

            return new RestoreCollectionRequestBody(collection.Value!, location, repository, backupId, async, createCollectionParams);
        }

        /// <summary>
        /// Serializes a <see cref="RestoreCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RestoreCollectionRequestBody restoreCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, restoreCollectionRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RestoreCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restoreCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RestoreCollectionRequestBody restoreCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (restoreCollectionRequestBody.Collection == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody.Collection), "Property is required for class RestoreCollectionRequestBody.");

            if (restoreCollectionRequestBody.LocationOption.IsSet && restoreCollectionRequestBody.Location == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody.Location), "Property is required for class RestoreCollectionRequestBody.");

            if (restoreCollectionRequestBody.RepositoryOption.IsSet && restoreCollectionRequestBody.Repository == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody.Repository), "Property is required for class RestoreCollectionRequestBody.");

            if (restoreCollectionRequestBody.AsyncOption.IsSet && restoreCollectionRequestBody.Async == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody.Async), "Property is required for class RestoreCollectionRequestBody.");

            if (restoreCollectionRequestBody.CreateCollectionParamsOption.IsSet && restoreCollectionRequestBody.CreateCollectionParams == null)
                throw new ArgumentNullException(nameof(restoreCollectionRequestBody.CreateCollectionParams), "Property is required for class RestoreCollectionRequestBody.");

            writer.WriteString("collection", restoreCollectionRequestBody.Collection);

            if (restoreCollectionRequestBody.LocationOption.IsSet)
                writer.WriteString("location", restoreCollectionRequestBody.Location);

            if (restoreCollectionRequestBody.RepositoryOption.IsSet)
                writer.WriteString("repository", restoreCollectionRequestBody.Repository);

            if (restoreCollectionRequestBody.BackupIdOption.IsSet)
                writer.WriteNumber("backupId", restoreCollectionRequestBody.BackupIdOption.Value!.Value);

            if (restoreCollectionRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", restoreCollectionRequestBody.Async);

            if (restoreCollectionRequestBody.CreateCollectionParamsOption.IsSet)
            {
                writer.WritePropertyName("createCollectionParams");
                JsonSerializer.Serialize(writer, restoreCollectionRequestBody.CreateCollectionParams, jsonSerializerOptions);
            }
        }
    }
}
