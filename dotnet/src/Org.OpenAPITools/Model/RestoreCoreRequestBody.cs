// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RestoreCoreRequestBody
    /// </summary>
    public partial class RestoreCoreRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestoreCoreRequestBody" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="shardBackupId">shardBackupId</param>
        /// <param name="location">location</param>
        /// <param name="async">async</param>
        /// <param name="backupRepository">backupRepository</param>
        [JsonConstructor]
        public RestoreCoreRequestBody(Option<string?> name = default, Option<string?> shardBackupId = default, Option<string?> location = default, Option<string?> async = default, Option<string?> backupRepository = default)
        {
            NameOption = name;
            ShardBackupIdOption = shardBackupId;
            LocationOption = location;
            AsyncOption = async;
            BackupRepositoryOption = backupRepository;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShardBackupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShardBackupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShardBackupId
        /// </summary>
        [JsonPropertyName("shardBackupId")]
        public string? ShardBackupId { get { return this.ShardBackupIdOption; } set { this.ShardBackupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackupRepository
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackupRepositoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackupRepository
        /// </summary>
        [JsonPropertyName("backupRepository")]
        public string? BackupRepository { get { return this.BackupRepositoryOption; } set { this.BackupRepositoryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestoreCoreRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShardBackupId: ").Append(ShardBackupId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("  BackupRepository: ").Append(BackupRepository).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RestoreCoreRequestBody" />
    /// </summary>
    public class RestoreCoreRequestBodyJsonConverter : JsonConverter<RestoreCoreRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="RestoreCoreRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RestoreCoreRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> shardBackupId = default;
            Option<string?> location = default;
            Option<string?> async = default;
            Option<string?> backupRepository = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shardBackupId":
                            shardBackupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "backupRepository":
                            backupRepository = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class RestoreCoreRequestBody.");

            if (shardBackupId.IsSet && shardBackupId.Value == null)
                throw new ArgumentNullException(nameof(shardBackupId), "Property is not nullable for class RestoreCoreRequestBody.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class RestoreCoreRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class RestoreCoreRequestBody.");

            if (backupRepository.IsSet && backupRepository.Value == null)
                throw new ArgumentNullException(nameof(backupRepository), "Property is not nullable for class RestoreCoreRequestBody.");

            return new RestoreCoreRequestBody(name, shardBackupId, location, async, backupRepository);
        }

        /// <summary>
        /// Serializes a <see cref="RestoreCoreRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restoreCoreRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RestoreCoreRequestBody restoreCoreRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, restoreCoreRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RestoreCoreRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="restoreCoreRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RestoreCoreRequestBody restoreCoreRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (restoreCoreRequestBody.NameOption.IsSet && restoreCoreRequestBody.Name == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody.Name), "Property is required for class RestoreCoreRequestBody.");

            if (restoreCoreRequestBody.ShardBackupIdOption.IsSet && restoreCoreRequestBody.ShardBackupId == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody.ShardBackupId), "Property is required for class RestoreCoreRequestBody.");

            if (restoreCoreRequestBody.LocationOption.IsSet && restoreCoreRequestBody.Location == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody.Location), "Property is required for class RestoreCoreRequestBody.");

            if (restoreCoreRequestBody.AsyncOption.IsSet && restoreCoreRequestBody.Async == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody.Async), "Property is required for class RestoreCoreRequestBody.");

            if (restoreCoreRequestBody.BackupRepositoryOption.IsSet && restoreCoreRequestBody.BackupRepository == null)
                throw new ArgumentNullException(nameof(restoreCoreRequestBody.BackupRepository), "Property is required for class RestoreCoreRequestBody.");

            if (restoreCoreRequestBody.NameOption.IsSet)
                writer.WriteString("name", restoreCoreRequestBody.Name);

            if (restoreCoreRequestBody.ShardBackupIdOption.IsSet)
                writer.WriteString("shardBackupId", restoreCoreRequestBody.ShardBackupId);

            if (restoreCoreRequestBody.LocationOption.IsSet)
                writer.WriteString("location", restoreCoreRequestBody.Location);

            if (restoreCoreRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", restoreCoreRequestBody.Async);

            if (restoreCoreRequestBody.BackupRepositoryOption.IsSet)
                writer.WriteString("backupRepository", restoreCoreRequestBody.BackupRepository);
        }
    }
}
