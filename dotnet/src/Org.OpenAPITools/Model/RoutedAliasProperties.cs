// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RoutedAliasProperties
    /// </summary>
    public partial class RoutedAliasProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutedAliasProperties" /> class.
        /// </summary>
        /// <param name="field">field</param>
        [JsonConstructor]
        public RoutedAliasProperties(string field)
        {
            Field = field;
            Type = this.GetType().Name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [JsonPropertyName("field")]
        public string Field { get; set; }

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public string Type { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoutedAliasProperties {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RoutedAliasProperties" />
    /// </summary>
    public class RoutedAliasPropertiesJsonConverter : JsonConverter<RoutedAliasProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="RoutedAliasProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RoutedAliasProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> field = default;
            Option<string?> type = default;

            string? discriminator = ClientUtils.GetDiscriminator(utf8JsonReader, "type");

            if (discriminator != null && discriminator.Equals("CategoryRoutedAliasProperties"))
                return JsonSerializer.Deserialize<CategoryRoutedAliasProperties>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("TimeRoutedAliasProperties"))
                return JsonSerializer.Deserialize<TimeRoutedAliasProperties>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "field":
                            field = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class RoutedAliasProperties.", nameof(field));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RoutedAliasProperties.", nameof(type));

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class RoutedAliasProperties.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RoutedAliasProperties.");

            return new RoutedAliasProperties(field.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="routedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RoutedAliasProperties routedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (routedAliasProperties is CategoryRoutedAliasProperties categoryRoutedAliasProperties){
                JsonSerializer.Serialize<CategoryRoutedAliasProperties>(writer, categoryRoutedAliasProperties, jsonSerializerOptions);
                return;
            }

            if (routedAliasProperties is TimeRoutedAliasProperties timeRoutedAliasProperties){
                JsonSerializer.Serialize<TimeRoutedAliasProperties>(writer, timeRoutedAliasProperties, jsonSerializerOptions);
                return;
            }

            writer.WriteStartObject();

            WriteProperties(writer, routedAliasProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="routedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RoutedAliasProperties routedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (routedAliasProperties.Field == null)
                throw new ArgumentNullException(nameof(routedAliasProperties.Field), "Property is required for class RoutedAliasProperties.");

            writer.WriteString("field", routedAliasProperties.Field);

            writer.WriteString("type", routedAliasProperties.Type);
        }
    }
}
