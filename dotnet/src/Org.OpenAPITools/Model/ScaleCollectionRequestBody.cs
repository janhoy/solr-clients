// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ScaleCollectionRequestBody
    /// </summary>
    public partial class ScaleCollectionRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScaleCollectionRequestBody" /> class.
        /// </summary>
        /// <param name="numToDelete">numToDelete</param>
        /// <param name="followAliases">followAliases</param>
        /// <param name="deleteInstanceDir">deleteInstanceDir</param>
        /// <param name="deleteDataDir">deleteDataDir</param>
        /// <param name="deleteIndex">deleteIndex</param>
        /// <param name="onlyIfDown">onlyIfDown</param>
        /// <param name="async">async</param>
        [JsonConstructor]
        public ScaleCollectionRequestBody(int numToDelete, Option<bool?> followAliases = default, Option<bool?> deleteInstanceDir = default, Option<bool?> deleteDataDir = default, Option<bool?> deleteIndex = default, Option<bool?> onlyIfDown = default, Option<string?> async = default)
        {
            NumToDelete = numToDelete;
            FollowAliasesOption = followAliases;
            DeleteInstanceDirOption = deleteInstanceDir;
            DeleteDataDirOption = deleteDataDir;
            DeleteIndexOption = deleteIndex;
            OnlyIfDownOption = onlyIfDown;
            AsyncOption = async;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets NumToDelete
        /// </summary>
        [JsonPropertyName("numToDelete")]
        public int NumToDelete { get; set; }

        /// <summary>
        /// Used to track the state of FollowAliases
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowAliasesOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowAliases
        /// </summary>
        [JsonPropertyName("followAliases")]
        public bool? FollowAliases { get { return this.FollowAliasesOption; } set { this.FollowAliasesOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeleteInstanceDir
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteInstanceDirOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeleteInstanceDir
        /// </summary>
        [JsonPropertyName("deleteInstanceDir")]
        public bool? DeleteInstanceDir { get { return this.DeleteInstanceDirOption; } set { this.DeleteInstanceDirOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeleteDataDir
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteDataDirOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeleteDataDir
        /// </summary>
        [JsonPropertyName("deleteDataDir")]
        public bool? DeleteDataDir { get { return this.DeleteDataDirOption; } set { this.DeleteDataDirOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeleteIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteIndexOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeleteIndex
        /// </summary>
        [JsonPropertyName("deleteIndex")]
        public bool? DeleteIndex { get { return this.DeleteIndexOption; } set { this.DeleteIndexOption = new(value); } }

        /// <summary>
        /// Used to track the state of OnlyIfDown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OnlyIfDownOption { get; private set; }

        /// <summary>
        /// Gets or Sets OnlyIfDown
        /// </summary>
        [JsonPropertyName("onlyIfDown")]
        public bool? OnlyIfDown { get { return this.OnlyIfDownOption; } set { this.OnlyIfDownOption = new(value); } }

        /// <summary>
        /// Used to track the state of Async
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsyncOption { get; private set; }

        /// <summary>
        /// Gets or Sets Async
        /// </summary>
        [JsonPropertyName("async")]
        public string? Async { get { return this.AsyncOption; } set { this.AsyncOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScaleCollectionRequestBody {\n");
            sb.Append("  NumToDelete: ").Append(NumToDelete).Append("\n");
            sb.Append("  FollowAliases: ").Append(FollowAliases).Append("\n");
            sb.Append("  DeleteInstanceDir: ").Append(DeleteInstanceDir).Append("\n");
            sb.Append("  DeleteDataDir: ").Append(DeleteDataDir).Append("\n");
            sb.Append("  DeleteIndex: ").Append(DeleteIndex).Append("\n");
            sb.Append("  OnlyIfDown: ").Append(OnlyIfDown).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScaleCollectionRequestBody" />
    /// </summary>
    public class ScaleCollectionRequestBodyJsonConverter : JsonConverter<ScaleCollectionRequestBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="ScaleCollectionRequestBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScaleCollectionRequestBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> numToDelete = default;
            Option<bool?> followAliases = default;
            Option<bool?> deleteInstanceDir = default;
            Option<bool?> deleteDataDir = default;
            Option<bool?> deleteIndex = default;
            Option<bool?> onlyIfDown = default;
            Option<string?> async = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numToDelete":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numToDelete = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "followAliases":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followAliases = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "deleteInstanceDir":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deleteInstanceDir = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "deleteDataDir":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deleteDataDir = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "deleteIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deleteIndex = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "onlyIfDown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                onlyIfDown = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "async":
                            async = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!numToDelete.IsSet)
                throw new ArgumentException("Property is required for class ScaleCollectionRequestBody.", nameof(numToDelete));

            if (numToDelete.IsSet && numToDelete.Value == null)
                throw new ArgumentNullException(nameof(numToDelete), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (followAliases.IsSet && followAliases.Value == null)
                throw new ArgumentNullException(nameof(followAliases), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (deleteInstanceDir.IsSet && deleteInstanceDir.Value == null)
                throw new ArgumentNullException(nameof(deleteInstanceDir), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (deleteDataDir.IsSet && deleteDataDir.Value == null)
                throw new ArgumentNullException(nameof(deleteDataDir), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (deleteIndex.IsSet && deleteIndex.Value == null)
                throw new ArgumentNullException(nameof(deleteIndex), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (onlyIfDown.IsSet && onlyIfDown.Value == null)
                throw new ArgumentNullException(nameof(onlyIfDown), "Property is not nullable for class ScaleCollectionRequestBody.");

            if (async.IsSet && async.Value == null)
                throw new ArgumentNullException(nameof(async), "Property is not nullable for class ScaleCollectionRequestBody.");

            return new ScaleCollectionRequestBody(numToDelete.Value!.Value!, followAliases, deleteInstanceDir, deleteDataDir, deleteIndex, onlyIfDown, async);
        }

        /// <summary>
        /// Serializes a <see cref="ScaleCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScaleCollectionRequestBody scaleCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scaleCollectionRequestBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScaleCollectionRequestBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scaleCollectionRequestBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScaleCollectionRequestBody scaleCollectionRequestBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scaleCollectionRequestBody.AsyncOption.IsSet && scaleCollectionRequestBody.Async == null)
                throw new ArgumentNullException(nameof(scaleCollectionRequestBody.Async), "Property is required for class ScaleCollectionRequestBody.");

            writer.WriteNumber("numToDelete", scaleCollectionRequestBody.NumToDelete);

            if (scaleCollectionRequestBody.FollowAliasesOption.IsSet)
                writer.WriteBoolean("followAliases", scaleCollectionRequestBody.FollowAliasesOption.Value!.Value);

            if (scaleCollectionRequestBody.DeleteInstanceDirOption.IsSet)
                writer.WriteBoolean("deleteInstanceDir", scaleCollectionRequestBody.DeleteInstanceDirOption.Value!.Value);

            if (scaleCollectionRequestBody.DeleteDataDirOption.IsSet)
                writer.WriteBoolean("deleteDataDir", scaleCollectionRequestBody.DeleteDataDirOption.Value!.Value);

            if (scaleCollectionRequestBody.DeleteIndexOption.IsSet)
                writer.WriteBoolean("deleteIndex", scaleCollectionRequestBody.DeleteIndexOption.Value!.Value);

            if (scaleCollectionRequestBody.OnlyIfDownOption.IsSet)
                writer.WriteBoolean("onlyIfDown", scaleCollectionRequestBody.OnlyIfDownOption.Value!.Value);

            if (scaleCollectionRequestBody.AsyncOption.IsSet)
                writer.WriteString("async", scaleCollectionRequestBody.Async);
        }
    }
}
