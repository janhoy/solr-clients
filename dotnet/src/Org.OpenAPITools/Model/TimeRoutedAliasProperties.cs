// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TimeRoutedAliasProperties
    /// </summary>
    public partial class TimeRoutedAliasProperties : RoutedAliasProperties, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeRoutedAliasProperties" /> class.
        /// </summary>
        /// <param name="field">field</param>
        /// <param name="start">start</param>
        /// <param name="interval">interval</param>
        /// <param name="tz">tz</param>
        /// <param name="maxFutureMs">maxFutureMs</param>
        /// <param name="preemptiveCreateMath">preemptiveCreateMath</param>
        /// <param name="autoDeleteAge">autoDeleteAge</param>
        [JsonConstructor]
        public TimeRoutedAliasProperties(string field, string start, string interval, Option<string?> tz = default, Option<long?> maxFutureMs = default, Option<string?> preemptiveCreateMath = default, Option<string?> autoDeleteAge = default) : base(field)
        {
            Start = start;
            Interval = interval;
            TzOption = tz;
            MaxFutureMsOption = maxFutureMs;
            PreemptiveCreateMathOption = preemptiveCreateMath;
            AutoDeleteAgeOption = autoDeleteAge;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [JsonPropertyName("start")]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [JsonPropertyName("interval")]
        public string Interval { get; set; }

        /// <summary>
        /// Used to track the state of Tz
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TzOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tz
        /// </summary>
        [JsonPropertyName("tz")]
        public string? Tz { get { return this.TzOption; } set { this.TzOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxFutureMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaxFutureMsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxFutureMs
        /// </summary>
        [JsonPropertyName("maxFutureMs")]
        public long? MaxFutureMs { get { return this.MaxFutureMsOption; } set { this.MaxFutureMsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreemptiveCreateMath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreemptiveCreateMathOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreemptiveCreateMath
        /// </summary>
        [JsonPropertyName("preemptiveCreateMath")]
        public string? PreemptiveCreateMath { get { return this.PreemptiveCreateMathOption; } set { this.PreemptiveCreateMathOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoDeleteAge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AutoDeleteAgeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AutoDeleteAge
        /// </summary>
        [JsonPropertyName("autoDeleteAge")]
        public string? AutoDeleteAge { get { return this.AutoDeleteAgeOption; } set { this.AutoDeleteAgeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeRoutedAliasProperties {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Tz: ").Append(Tz).Append("\n");
            sb.Append("  MaxFutureMs: ").Append(MaxFutureMs).Append("\n");
            sb.Append("  PreemptiveCreateMath: ").Append(PreemptiveCreateMath).Append("\n");
            sb.Append("  AutoDeleteAge: ").Append(AutoDeleteAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TimeRoutedAliasProperties" />
    /// </summary>
    public class TimeRoutedAliasPropertiesJsonConverter : JsonConverter<TimeRoutedAliasProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="TimeRoutedAliasProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TimeRoutedAliasProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> field = default;
            Option<string?> type = default;
            Option<string?> start = default;
            Option<string?> interval = default;
            Option<string?> tz = default;
            Option<long?> maxFutureMs = default;
            Option<string?> preemptiveCreateMath = default;
            Option<string?> autoDeleteAge = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "field":
                            field = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start":
                            start = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "interval":
                            interval = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tz":
                            tz = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maxFutureMs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxFutureMs = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "preemptiveCreateMath":
                            preemptiveCreateMath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "autoDeleteAge":
                            autoDeleteAge = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class TimeRoutedAliasProperties.", nameof(field));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class TimeRoutedAliasProperties.", nameof(type));

            if (!start.IsSet)
                throw new ArgumentException("Property is required for class TimeRoutedAliasProperties.", nameof(start));

            if (!interval.IsSet)
                throw new ArgumentException("Property is required for class TimeRoutedAliasProperties.", nameof(interval));

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (interval.IsSet && interval.Value == null)
                throw new ArgumentNullException(nameof(interval), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (tz.IsSet && tz.Value == null)
                throw new ArgumentNullException(nameof(tz), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (maxFutureMs.IsSet && maxFutureMs.Value == null)
                throw new ArgumentNullException(nameof(maxFutureMs), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (preemptiveCreateMath.IsSet && preemptiveCreateMath.Value == null)
                throw new ArgumentNullException(nameof(preemptiveCreateMath), "Property is not nullable for class TimeRoutedAliasProperties.");

            if (autoDeleteAge.IsSet && autoDeleteAge.Value == null)
                throw new ArgumentNullException(nameof(autoDeleteAge), "Property is not nullable for class TimeRoutedAliasProperties.");

            return new TimeRoutedAliasProperties(field.Value!, start.Value!, interval.Value!, tz, maxFutureMs, preemptiveCreateMath, autoDeleteAge);
        }

        /// <summary>
        /// Serializes a <see cref="TimeRoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeRoutedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TimeRoutedAliasProperties timeRoutedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, timeRoutedAliasProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TimeRoutedAliasProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="timeRoutedAliasProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TimeRoutedAliasProperties timeRoutedAliasProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (timeRoutedAliasProperties.Field == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.Field), "Property is required for class TimeRoutedAliasProperties.");

            if (timeRoutedAliasProperties.Start == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.Start), "Property is required for class TimeRoutedAliasProperties.");

            if (timeRoutedAliasProperties.Interval == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.Interval), "Property is required for class TimeRoutedAliasProperties.");

            if (timeRoutedAliasProperties.TzOption.IsSet && timeRoutedAliasProperties.Tz == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.Tz), "Property is required for class TimeRoutedAliasProperties.");

            if (timeRoutedAliasProperties.PreemptiveCreateMathOption.IsSet && timeRoutedAliasProperties.PreemptiveCreateMath == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.PreemptiveCreateMath), "Property is required for class TimeRoutedAliasProperties.");

            if (timeRoutedAliasProperties.AutoDeleteAgeOption.IsSet && timeRoutedAliasProperties.AutoDeleteAge == null)
                throw new ArgumentNullException(nameof(timeRoutedAliasProperties.AutoDeleteAge), "Property is required for class TimeRoutedAliasProperties.");

            writer.WriteString("field", timeRoutedAliasProperties.Field);

            writer.WriteString("type", timeRoutedAliasProperties.Type);

            writer.WriteString("start", timeRoutedAliasProperties.Start);

            writer.WriteString("interval", timeRoutedAliasProperties.Interval);

            if (timeRoutedAliasProperties.TzOption.IsSet)
                writer.WriteString("tz", timeRoutedAliasProperties.Tz);

            if (timeRoutedAliasProperties.MaxFutureMsOption.IsSet)
                writer.WriteNumber("maxFutureMs", timeRoutedAliasProperties.MaxFutureMsOption.Value!.Value);

            if (timeRoutedAliasProperties.PreemptiveCreateMathOption.IsSet)
                writer.WriteString("preemptiveCreateMath", timeRoutedAliasProperties.PreemptiveCreateMath);

            if (timeRoutedAliasProperties.AutoDeleteAgeOption.IsSet)
                writer.WriteString("autoDeleteAge", timeRoutedAliasProperties.AutoDeleteAge);
        }
    }
}
