// <auto-generated>
/*
 * v2 API
 *
 * OpenAPI spec for Solr's v2 API endpoints
 *
 * The version of the OpenAPI document: 9.8.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ZooKeeperStat
    /// </summary>
    public partial class ZooKeeperStat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZooKeeperStat" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion</param>
        /// <param name="aversion">aversion</param>
        /// <param name="children">children</param>
        /// <param name="ctime">ctime</param>
        /// <param name="cversion">cversion</param>
        /// <param name="czxid">czxid</param>
        /// <param name="ephemeralOwner">ephemeralOwner</param>
        /// <param name="mtime">mtime</param>
        /// <param name="mzxid">mzxid</param>
        /// <param name="pzxid">pzxid</param>
        /// <param name="dataLength">dataLength</param>
        [JsonConstructor]
        public ZooKeeperStat(Option<int?> varVersion = default, Option<int?> aversion = default, Option<int?> children = default, Option<long?> ctime = default, Option<int?> cversion = default, Option<long?> czxid = default, Option<long?> ephemeralOwner = default, Option<long?> mtime = default, Option<long?> mzxid = default, Option<long?> pzxid = default, Option<int?> dataLength = default)
        {
            VarVersionOption = varVersion;
            AversionOption = aversion;
            ChildrenOption = children;
            CtimeOption = ctime;
            CversionOption = cversion;
            CzxidOption = czxid;
            EphemeralOwnerOption = ephemeralOwner;
            MtimeOption = mtime;
            MzxidOption = mzxid;
            PzxidOption = pzxid;
            DataLengthOption = dataLength;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public int? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Aversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AversionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Aversion
        /// </summary>
        [JsonPropertyName("aversion")]
        public int? Aversion { get { return this.AversionOption; } set { this.AversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Children
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChildrenOption { get; private set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [JsonPropertyName("children")]
        public int? Children { get { return this.ChildrenOption; } set { this.ChildrenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ctime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CtimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ctime
        /// </summary>
        [JsonPropertyName("ctime")]
        public long? Ctime { get { return this.CtimeOption; } set { this.CtimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cversion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CversionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cversion
        /// </summary>
        [JsonPropertyName("cversion")]
        public int? Cversion { get { return this.CversionOption; } set { this.CversionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Czxid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CzxidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Czxid
        /// </summary>
        [JsonPropertyName("czxid")]
        public long? Czxid { get { return this.CzxidOption; } set { this.CzxidOption = new(value); } }

        /// <summary>
        /// Used to track the state of EphemeralOwner
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EphemeralOwnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets EphemeralOwner
        /// </summary>
        [JsonPropertyName("ephemeralOwner")]
        public long? EphemeralOwner { get { return this.EphemeralOwnerOption; } set { this.EphemeralOwnerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mtime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MtimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mtime
        /// </summary>
        [JsonPropertyName("mtime")]
        public long? Mtime { get { return this.MtimeOption; } set { this.MtimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mzxid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MzxidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mzxid
        /// </summary>
        [JsonPropertyName("mzxid")]
        public long? Mzxid { get { return this.MzxidOption; } set { this.MzxidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pzxid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PzxidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pzxid
        /// </summary>
        [JsonPropertyName("pzxid")]
        public long? Pzxid { get { return this.PzxidOption; } set { this.PzxidOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DataLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataLength
        /// </summary>
        [JsonPropertyName("dataLength")]
        public int? DataLength { get { return this.DataLengthOption; } set { this.DataLengthOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZooKeeperStat {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Aversion: ").Append(Aversion).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Ctime: ").Append(Ctime).Append("\n");
            sb.Append("  Cversion: ").Append(Cversion).Append("\n");
            sb.Append("  Czxid: ").Append(Czxid).Append("\n");
            sb.Append("  EphemeralOwner: ").Append(EphemeralOwner).Append("\n");
            sb.Append("  Mtime: ").Append(Mtime).Append("\n");
            sb.Append("  Mzxid: ").Append(Mzxid).Append("\n");
            sb.Append("  Pzxid: ").Append(Pzxid).Append("\n");
            sb.Append("  DataLength: ").Append(DataLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ZooKeeperStat" />
    /// </summary>
    public class ZooKeeperStatJsonConverter : JsonConverter<ZooKeeperStat>
    {
        /// <summary>
        /// Deserializes json to <see cref="ZooKeeperStat" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ZooKeeperStat Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> varVersion = default;
            Option<int?> aversion = default;
            Option<int?> children = default;
            Option<long?> ctime = default;
            Option<int?> cversion = default;
            Option<long?> czxid = default;
            Option<long?> ephemeralOwner = default;
            Option<long?> mtime = default;
            Option<long?> mzxid = default;
            Option<long?> pzxid = default;
            Option<int?> dataLength = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varVersion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "aversion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aversion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "children":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                children = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ctime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ctime = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "cversion":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cversion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "czxid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                czxid = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ephemeralOwner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ephemeralOwner = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "mtime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mtime = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "mzxid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mzxid = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "pzxid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pzxid = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "dataLength":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dataLength = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class ZooKeeperStat.");

            if (aversion.IsSet && aversion.Value == null)
                throw new ArgumentNullException(nameof(aversion), "Property is not nullable for class ZooKeeperStat.");

            if (children.IsSet && children.Value == null)
                throw new ArgumentNullException(nameof(children), "Property is not nullable for class ZooKeeperStat.");

            if (ctime.IsSet && ctime.Value == null)
                throw new ArgumentNullException(nameof(ctime), "Property is not nullable for class ZooKeeperStat.");

            if (cversion.IsSet && cversion.Value == null)
                throw new ArgumentNullException(nameof(cversion), "Property is not nullable for class ZooKeeperStat.");

            if (czxid.IsSet && czxid.Value == null)
                throw new ArgumentNullException(nameof(czxid), "Property is not nullable for class ZooKeeperStat.");

            if (ephemeralOwner.IsSet && ephemeralOwner.Value == null)
                throw new ArgumentNullException(nameof(ephemeralOwner), "Property is not nullable for class ZooKeeperStat.");

            if (mtime.IsSet && mtime.Value == null)
                throw new ArgumentNullException(nameof(mtime), "Property is not nullable for class ZooKeeperStat.");

            if (mzxid.IsSet && mzxid.Value == null)
                throw new ArgumentNullException(nameof(mzxid), "Property is not nullable for class ZooKeeperStat.");

            if (pzxid.IsSet && pzxid.Value == null)
                throw new ArgumentNullException(nameof(pzxid), "Property is not nullable for class ZooKeeperStat.");

            if (dataLength.IsSet && dataLength.Value == null)
                throw new ArgumentNullException(nameof(dataLength), "Property is not nullable for class ZooKeeperStat.");

            return new ZooKeeperStat(varVersion, aversion, children, ctime, cversion, czxid, ephemeralOwner, mtime, mzxid, pzxid, dataLength);
        }

        /// <summary>
        /// Serializes a <see cref="ZooKeeperStat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="zooKeeperStat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ZooKeeperStat zooKeeperStat, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, zooKeeperStat, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ZooKeeperStat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="zooKeeperStat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ZooKeeperStat zooKeeperStat, JsonSerializerOptions jsonSerializerOptions)
        {
            if (zooKeeperStat.VarVersionOption.IsSet)
                writer.WriteNumber("version", zooKeeperStat.VarVersionOption.Value!.Value);

            if (zooKeeperStat.AversionOption.IsSet)
                writer.WriteNumber("aversion", zooKeeperStat.AversionOption.Value!.Value);

            if (zooKeeperStat.ChildrenOption.IsSet)
                writer.WriteNumber("children", zooKeeperStat.ChildrenOption.Value!.Value);

            if (zooKeeperStat.CtimeOption.IsSet)
                writer.WriteNumber("ctime", zooKeeperStat.CtimeOption.Value!.Value);

            if (zooKeeperStat.CversionOption.IsSet)
                writer.WriteNumber("cversion", zooKeeperStat.CversionOption.Value!.Value);

            if (zooKeeperStat.CzxidOption.IsSet)
                writer.WriteNumber("czxid", zooKeeperStat.CzxidOption.Value!.Value);

            if (zooKeeperStat.EphemeralOwnerOption.IsSet)
                writer.WriteNumber("ephemeralOwner", zooKeeperStat.EphemeralOwnerOption.Value!.Value);

            if (zooKeeperStat.MtimeOption.IsSet)
                writer.WriteNumber("mtime", zooKeeperStat.MtimeOption.Value!.Value);

            if (zooKeeperStat.MzxidOption.IsSet)
                writer.WriteNumber("mzxid", zooKeeperStat.MzxidOption.Value!.Value);

            if (zooKeeperStat.PzxidOption.IsSet)
                writer.WriteNumber("pzxid", zooKeeperStat.PzxidOption.Value!.Value);

            if (zooKeeperStat.DataLengthOption.IsSet)
                writer.WriteNumber("dataLength", zooKeeperStat.DataLengthOption.Value!.Value);
        }
    }
}
